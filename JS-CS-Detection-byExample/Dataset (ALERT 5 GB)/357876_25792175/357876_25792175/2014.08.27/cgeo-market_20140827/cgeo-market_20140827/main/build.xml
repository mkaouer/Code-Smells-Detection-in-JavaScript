<?xml version="1.0" encoding="UTF-8"?>
<project name="cgeo">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <loadproperties srcFile="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />
    
    <!-- The private.properties file sets api-keys as well as keystore,
         certificate and passwords (if you want).
         See /templates/private.properties for more information. -->
    <property file="private.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"
    />
    
    <!-- Custom targets -->
    <target name="install_release" description="Install signed release application" depends="release">
        <exec executable="${sdk.dir}/platform-tools/adb">
            <arg line="-d install -r ./bin/${ant.project.name}-release.apk" />
        </exec>
    </target>
    
    <target name="debugAPI" depends="-pre-build"
        description="Changes API key to debug">
    </target>
    
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
		    <pathelement location="./compile-libs/findbugs-ant.jar"/>
		</classpath>
	</taskdef>

	<target name="findbugs">
		<mkdir dir="reports" />
		<gettarget
			androidJarFileOut="project.target.android.jar"
		    androidAidlFileOut="project.target.framework.aidl"
		    bootClassPathOut="project.target.class.path"
		    targetApiOut="project.target.apilevel"
		    minSdkVersionOut="project.minSdkVersion" />
		<findbugs 
			home="${findbugs.home}" 
			output="xml" 
			outputFile="reports/findbugs.xml" 
			excludefilter="project/findbugs/exclusions.xml"
			effort="max"
			reportLevel="low">
			<auxClasspath path="${project.target.android.jar}" />
			<class location="${out.dir}" />
		</findbugs>
	</target>
	
	<!-- extension targets. Uncomment the ones where you want to do custom work
         in between standard targets -->
    <target name="-pre-build">
        <condition property="build.mode.release" else="false">
            <equals arg1="${build.target}" arg2="release" />
        </condition>

        <if condition="${build.mode.release}">
            <then>
                <filterset id="maps-key">
                    <filter token="maps.api.key" value="${maps.api.key.market}"/>
                </filterset>
            </then>
            <else>
                <filterset id="maps-key">
                    <filter token="maps.api.key" value="${maps.api.key}"/>
                </filterset>
            </else>
        </if>
        <copy file="./templates/keys.xml" todir="./res/values/" overwrite="true">
            <filterset refid="maps-key" />
            <filterset>
                <filter token="ocde.okapi.consumer.key" value="${ocde.okapi.consumer.key}"/>
                <filter token="ocde.okapi.consumer.secret" value="${ocde.okapi.consumer.secret}"/>
                <filter token="ocpl.okapi.consumer.key" value="${ocpl.okapi.consumer.key}"/>
                <filter token="ocpl.okapi.consumer.secret" value="${ocpl.okapi.consumer.secret}"/>
                <filter token="ocus.okapi.consumer.key" value="${ocus.okapi.consumer.key}"/>
                <filter token="ocus.okapi.consumer.secret" value="${ocus.okapi.consumer.secret}"/>
                <filter token="ocnl.okapi.consumer.key" value="${ocnl.okapi.consumer.key}"/>
                <filter token="ocnl.okapi.consumer.secret" value="${ocnl.okapi.consumer.secret}"/>
                <filter token="ocro.okapi.consumer.key" value="${ocro.okapi.consumer.key}"/>
                <filter token="ocro.okapi.consumer.secret" value="${ocro.okapi.consumer.secret}"/>
                <filter token="ocuk.okapi.consumer.key" value="${ocuk.okapi.consumer.key}"/>
                <filter token="ocuk.okapi.consumer.secret" value="${ocuk.okapi.consumer.secret}"/>
            </filterset>
        </copy>
    </target>

<!-- start of modifications for android annotations, see https://github.com/excilys/androidannotations/wiki/Building-Project-Ant -->
	<property name="generated.dir" value="annotation_gen" />
	<property name="generated.absolute.dir" location="${generated.dir}" />
	<property name="java.compilerargs" value="-s &apos;${generated.absolute.dir}&apos;" />    
	<target name="-pre-compile">
		<mkdir dir="${generated.absolute.dir}" />
	</target>
    <target name="-compile" depends="-pre-build, -build-setup, -code-gen, -pre-compile">
        <do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">
            <!-- merge the project's own classpath and the tested project's classpath -->
            <path id="project.javac.classpath">
                <path refid="project.all.jars.path" />
                <path refid="tested.project.classpath" />
                <path path="${java.compiler.classpath}" />
                <fileset dir="compile-libs" includes="*.jar"/>
            </path>
            <javac encoding="${java.encoding}"
                    source="${java.source}" target="${java.target}"
                    debug="true" extdirs="" includeantruntime="false"
                    destdir="${out.classes.absolute.dir}"
                    bootclasspathref="project.target.class.path"
                    verbose="${verbose}"
                    classpathref="project.javac.classpath"
                    fork="${need.javac.fork}">
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
                <compilerarg line="${java.compilerargs}" />
            </javac>

            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo level="info">Instrumenting classes from ${out.absolute.dir}/classes...</echo>

                    <!-- build the filter to remove R, Manifest, BuildConfig -->
                    <getemmafilter
                            appPackage="${project.app.package}"
                            libraryPackagesRefId="project.library.packages"
                            filterOut="emma.default.filter"/>

                    <!-- define where the .em file is going. This may have been
                         setup already if this is a library -->
                    <property name="emma.coverage.absolute.file" location="${out.absolute.dir}/coverage.em" />

                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr verbosity="${verbosity}"
                               mode="overwrite"
                               instrpath="${out.absolute.dir}/classes"
                               outdir="${out.absolute.dir}/classes"
                               metadatafile="${emma.coverage.absolute.file}">
                            <filter excludes="${emma.default.filter}" />
                            <filter excludes="android.*, com.*, org.*" />
                            <filter value="${emma.filter}" />
                        </instr>
                    </emma>
                </then>
            </if>

            <!-- if the project is a library then we generate a jar file -->
            <if condition="${project.is.library}">
                <then>
                    <echo level="info">Creating library output jar file...</echo>
                    <property name="out.library.jar.file" location="${out.absolute.dir}/classes.jar" />
                    <if>
                        <condition>
                            <length string="${android.package.excludes}" trim="true" when="greater" length="0" />
                        </condition>
                        <then>
                            <echo level="info">Custom jar packaging exclusion: ${android.package.excludes}</echo>
                        </then>
                    </if>

                    <propertybyreplace name="project.app.package.path" input="${project.app.package}" replace="." with="/" />

                    <jar destfile="${out.library.jar.file}">
                        <fileset dir="${out.classes.absolute.dir}"
                                includes="**/*.class"
                                excludes="${project.app.package.path}/R.class ${project.app.package.path}/R$*.class ${project.app.package.path}/BuildConfig.class"/>
                        <fileset dir="${source.absolute.dir}" excludes="**/*.java ${android.package.excludes}" />
                    </jar>
                </then>
            </if>

        </do-only-if-manifest-hasCode>
    </target>
<!-- end of modifications for android-annotations -->    
    
	
<!--
    <target name="-post-compile">
    </target>
-->

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

</project>
