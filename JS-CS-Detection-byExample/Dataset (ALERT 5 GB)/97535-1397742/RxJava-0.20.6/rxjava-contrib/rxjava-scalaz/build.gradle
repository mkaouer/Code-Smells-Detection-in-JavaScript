apply plugin: 'scala'
apply plugin: 'osgi'

tasks.withType(ScalaCompile) {
  scalaCompileOptions.fork = true
  scalaCompileOptions.unchecked = true
  scalaCompileOptions.setAdditionalParameters(['-feature'])

  configure(scalaCompileOptions.forkOptions) {
    memoryMaximumSize = '1g'
    jvmArgs = ['-XX:MaxPermSize=512m']
  }
}

sourceSets {
  main {
        scala {
            srcDir 'src/main/scala'
        }
    }
    test {
        scala {
            srcDir 'src/test/scala'
        }
    }
}

dependencies {
    compile project(':rxjava-core')
    compile project(':language-adaptors:rxjava-scala')
    compile 'org.scalaz:scalaz-core_2.10:7.0.4'

    testCompile 'org.scalaz:scalaz-scalacheck-binding_2.10:7.0.4'
    testCompile 'org.typelevel:scalaz-specs2_2.10:0.1.2'
    testCompile 'junit:junit-dep:4.10'
}

task repl(type: Exec) {
    commandLine 'scala', '-cp', sourceSets.test.runtimeClasspath.asPath
    standardInput = System.in
}

jar {
    manifest {
        name = 'rxjava-scalaz'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*'
        instruction 'Fragment-Host', 'com.netflix.rxjava.core'
    }
}
