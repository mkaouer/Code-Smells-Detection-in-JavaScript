apply plugin: 'scala'
apply plugin: 'osgi'

tasks.withType(ScalaCompile) {
	scalaCompileOptions.fork = true
    scalaCompileOptions.unchecked = true
    scalaCompileOptions.setAdditionalParameters(['-feature'])

    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxPermSize=512m']
    }
}

sourceSets { 
	main { 
        scala { 
            srcDir 'src/main/scala'
        }
    }
    test { 
        scala { 
            srcDir 'src/main/scala'
            srcDir 'src/test/scala'
            srcDir 'src/examples/scala'
            //srcDir 'src/examples/java'
        }
        java.srcDirs = []
    }
    examples {
        // It seems that in Gradle, the dependency "compileScala depends on compileJava" is hardcoded,
        // or at least not meant to be removed.
        // However, compileScala also runs javac at the very end, so we just add the Java sources to
        // the scala source set:
        scala { 
            srcDir 'src/examples/scala'
            //srcDir 'src/examples/java'
        }
        java.srcDirs = []
    }
}

dependencies {
    compile 'org.scala-lang:scala-library:2.10.+'

    compile project(':rxjava-core')
    
    testCompile 'junit:junit-dep:4.10'
    testCompile 'org.mockito:mockito-core:1.8.5'
    testCompile 'org.scalatest:scalatest_2.10:1.9.1'
}

tasks.compileScala {  
    classpath = classpath + configurations.compile
}

tasks.compileExamplesScala {  
    classpath = classpath + files(compileScala.destinationDir) + (configurations.compile + configurations.testCompile)
}

// Add RxJava core to Scaladoc input:
// tasks.scaladoc.source(project(':rxjava-core').tasks.getByPath(':rxjava-core:compileJava').source)
// println("-------")
// println(tasks.scaladoc.source.asPath)

task test(overwrite: true, dependsOn: testClasses) << {
    ant.taskdef(name: 'scalatest',
            classname: 'org.scalatest.tools.ScalaTestAntTask',
            classpath: configurations.testCompile.asPath + ':' + configurations.testRuntime.asPath + ":" + compileScala.destinationDir
    )
    ant.scalatest(runpath: sourceSets.test.output.classesDir,
            haltonfailure: 'true',
            fork: 'false') {reporter(type: 'stdout')}
}

jar {
    manifest {
        name = 'rxjava-scala'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,!org.scalatest.*,*'
        instruction 'Fragment-Host', 'com.netflix.rxjava.core'
    }
}
