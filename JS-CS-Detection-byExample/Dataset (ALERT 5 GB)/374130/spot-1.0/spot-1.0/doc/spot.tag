<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/home-ssd/adl/git/spot/doc/</path>
    <filename>mainpage_8dox</filename>
  </compound>
  <compound kind="file">
    <name>dve2.hh</name>
    <path>/home-ssd/adl/git/spot/iface/dve2/</path>
    <filename>dve2_8hh</filename>
    <includes id="kripke_8hh" name="kripke.hh" local="yes" imported="no">kripke/kripke.hh</includes>
    <includes id="apcollect_8hh" name="apcollect.hh" local="yes" imported="no">ltlvisit/apcollect.hh</includes>
    <includes id="constant_8hh" name="constant.hh" local="yes" imported="no">ltlast/constant.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>kripke *</type>
      <name>load_dve2</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>afbc3f43caf8b96d8e715661d45e0a2b0</anchor>
      <arglist>(const std::string &amp;file, bdd_dict *dict, const ltl::atomic_prop_set *to_observe, const ltl::formula *dead=ltl::constant::true_instance(), int compress=0, bool verbose=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.hh</name>
    <path>/home-ssd/adl/git/spot/iface/gspn/</path>
    <filename>common_8hh</filename>
    <class kind="class">spot::gspn_exception</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a83bcadbb0c347d956021471f8c7d2135</anchor>
      <arglist>(std::ostream &amp;os, const gspn_exception &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gspn.hh</name>
    <path>/home-ssd/adl/git/spot/iface/gspn/</path>
    <filename>gspn_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="common_8hh" name="common.hh" local="yes" imported="no">common.hh</includes>
    <includes id="declenv_8hh" name="declenv.hh" local="yes" imported="no">ltlenv/declenv.hh</includes>
    <class kind="class">spot::gspn_interface</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>ssp.hh</name>
    <path>/home-ssd/adl/git/spot/iface/gspn/</path>
    <filename>ssp_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="common_8hh" name="common.hh" local="yes" imported="no">common.hh</includes>
    <includes id="gtec_8hh" name="gtec.hh" local="yes" imported="no">tgbaalgos/gtec/gtec.hh</includes>
    <includes id="ce_8hh" name="ce.hh" local="yes" imported="no">tgbaalgos/gtec/ce.hh</includes>
    <includes id="declenv_8hh" name="declenv.hh" local="yes" imported="no">ltlenv/declenv.hh</includes>
    <class kind="class">spot::gspn_ssp_interface</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga41573dafc02e8da2283670fa7aefebcf</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga9e84d9fcba32903d98fc0a0ebdc73ac1</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga4f5db797b2fc8a4b7617a76519114800</anchor>
      <arglist>(const tgba *ssp_automata, bool stack_inclusion=true, bool double_inclusion=false, bool reversed_double_inclusion=false, bool no_decomp=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_cout.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__cout_8hh</filename>
    <member kind="function">
      <type>void</type>
      <name>check_cout</name>
      <anchorfile>common__cout_8hh.html</anchorfile>
      <anchor>a383e1d50f0d7399b53f6db1d79e3e904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_cout</name>
      <anchorfile>common__cout_8hh.html</anchorfile>
      <anchor>a415db03cbc296c124c69a69f20f8b344</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_finput.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__finput_8hh</filename>
    <includes id="common__sys_8hh" name="common_sys.hh" local="yes" imported="no">common_sys.hh</includes>
    <class kind="struct">job</class>
    <class kind="class">job_processor</class>
    <member kind="typedef">
      <type>std::vector&lt; job &gt;</type>
      <name>jobs_t</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>a695b7740cb1f76ffb77343c1a6579857</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_opt_finput</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>a107794ef4789ab08c22a97e72d8bd1c1</anchor>
      <arglist>(int key, char *arg, struct argp_state *state)</arglist>
    </member>
    <member kind="function">
      <type>const spot::ltl::formula *</type>
      <name>parse_formula</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>a4d9e8932b21e3b0967c28935094bd8f3</anchor>
      <arglist>(const std::string &amp;s, spot::ltl::parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="variable">
      <type>jobs_t</type>
      <name>jobs</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>a3a51d7185d98a16cf5f90ee53b046ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lbt_input</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>a2f7a136da34f2c80033acd6853196402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct argp</type>
      <name>finput_argp</name>
      <anchorfile>common__finput_8hh.html</anchorfile>
      <anchor>af95f8aa910615b365c5b63cee603e9d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_output.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__output_8hh</filename>
    <includes id="common__sys_8hh" name="common_sys.hh" local="yes" imported="no">common_sys.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <member kind="enumeration">
      <name>output_format_t</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spot_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329a073e598d607b5191ba32cd908853a7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>spin_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329ac285ca7684bccf0c67ee422809686b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>utf8_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329aae6ed56c835bdd737b2dbdf59b2093de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lbt_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329a8e35fd7f6a70e1acf04ce1d492114a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>wring_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a00fe37b28d6a1ef39b6360204873b329a55218d3085b31bf928a0b18dfcf76299</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse_opt_output</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a5b6fd11e6463a9afecfe6bc16bd99e0e</anchor>
      <arglist>(int key, char *arg, struct argp_state *state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output_formula</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a28607c6b731e793710f51953c352dba8</anchor>
      <arglist>(const spot::ltl::formula *f, const char *filename=0, int linenum=0)</arglist>
    </member>
    <member kind="variable">
      <type>output_format_t</type>
      <name>output_format</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>ae7ae7aedc8baa9b0c22eb562d8e055c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>full_parenth</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a0918d5d0d569b4eb39f636ee45e03853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct argp</type>
      <name>output_argp</name>
      <anchorfile>common__output_8hh.html</anchorfile>
      <anchor>a8cc9aab6a4438a9a4c8aea01e2414769</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_post.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__post_8hh</filename>
    <includes id="common__sys_8hh" name="common_sys.hh" local="yes" imported="no">common_sys.hh</includes>
    <includes id="postproc_8hh" name="postproc.hh" local="yes" imported="no">tgbaalgos/postproc.hh</includes>
    <member kind="variable">
      <type>struct argp</type>
      <name>post_argp</name>
      <anchorfile>common__post_8hh.html</anchorfile>
      <anchor>a71d1696ea4f03520fd1d4779beac7ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spot::postprocessor::output_type</type>
      <name>type</name>
      <anchorfile>common__post_8hh.html</anchorfile>
      <anchor>af865e462fa1ed9c1b7ebe3da56da5a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spot::postprocessor::output_pref</type>
      <name>pref</name>
      <anchorfile>common__post_8hh.html</anchorfile>
      <anchor>a82862891d2e33a049fef6aa2f40acf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spot::postprocessor::optimization_level</type>
      <name>level</name>
      <anchorfile>common__post_8hh.html</anchorfile>
      <anchor>a5f29e337e33c60e37163471b72489fc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_r.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__r_8hh</filename>
    <includes id="common__sys_8hh" name="common_sys.hh" local="yes" imported="no">common_sys.hh</includes>
    <includes id="simplify_8hh" name="simplify.hh" local="yes" imported="no">ltlvisit/simplify.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>OPT_R</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>a3d68089f2b22d789bc804113d9dc9f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_OPT_R</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>a6e38bad085010e263d73ffe23e62692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LEVEL_DOC</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>a986eb7b83df3df9c09986c3b646ff539</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse_r</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>afdafd7ecd5d10c9b7aaefa208bebf07f</anchor>
      <arglist>(const char *arg)</arglist>
    </member>
    <member kind="function">
      <type>spot::ltl::ltl_simplifier_options</type>
      <name>simplifier_options</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>ac84245172d26904c41107e00127ed07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>simplification_level</name>
      <anchorfile>common__r_8hh.html</anchorfile>
      <anchor>ade2b282ed2b2c33de1e21fb354e8151f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_range.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__range_8hh</filename>
    <class kind="struct">range</class>
    <member kind="define">
      <type>#define</type>
      <name>RANGE_DOC</name>
      <anchorfile>common__range_8hh.html</anchorfile>
      <anchor>a325410a37b4c2be4959e0fd40365d831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>range</type>
      <name>parse_range</name>
      <anchorfile>common__range_8hh.html</anchorfile>
      <anchor>a88804ac68adb757e0833b02ab3856a33</anchor>
      <arglist>(const char *str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_setup.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__setup_8hh</filename>
    <includes id="common__sys_8hh" name="common_sys.hh" local="yes" imported="no">common_sys.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>common__setup_8hh.html</anchorfile>
      <anchor>a19a49ef6a58e72b0b0fc04cbf69a50c1</anchor>
      <arglist>(char **progname)</arglist>
    </member>
    <member kind="variable">
      <type>struct argp</type>
      <name>misc_argp</name>
      <anchorfile>common__setup_8hh.html</anchorfile>
      <anchor>ae25a48aa3cd40020564e6c43517227c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common_sys.hh</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>common__sys_8hh</filename>
  </compound>
  <compound kind="file">
    <name>location.hh</name>
    <path>/home-ssd/adl/git/spot/src/eltlparse/</path>
    <filename>eltlparse_2location_8hh</filename>
    <includes id="eltlparse_2position_8hh" name="position.hh" local="yes" imported="no">position.hh</includes>
    <class kind="class">eltlyy::location</class>
    <namespace>eltlyy</namespace>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a54a254bbac4af32e1cc89ba67e72eb74</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>af26bb8436d7cd0b0644e12f556a313a2</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a4e4f4196ca129aa92a2dfec705ff37c7</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a2c78f463d053ff689629d0df2eec191d</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a91a26185e5306f1bc20284fd6f626ecc</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a328f568332609961a0142d2aee4f84db</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>location.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripkeparse/</path>
    <filename>kripkeparse_2location_8hh</filename>
    <includes id="kripkeparse_2position_8hh" name="position.hh" local="yes" imported="no">position.hh</includes>
    <class kind="class">kripkeyy::location</class>
    <namespace>kripkeyy</namespace>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa34f3410380795f5be0c74169bbe68c4</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>ae598cea574b9c4801a3472f4c864de06</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>afac879f8bf87d40917be43775355ceb6</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a0e43cbe9ad93cf008baf6f40d7b2583a</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a800707b9f962770dad79eef495c8d603</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa0a789d9e4863cd952048faedbc6c669</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>location.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>ltlparse_2location_8hh</filename>
    <class kind="class">ltlyy::location</class>
    <namespace>ltlyy</namespace>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a70e347efcc4af1489a902f013c075795</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a5ad9aab98f3f4a4d03e28d26b885f0a9</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ae2f8bb8edf11642db0e6459bc4f2f2a5</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a234efa05cfec04aeb00d0c589a379541</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a4e42948172b1c36af4dd293384e80e89</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a7ca655af533c8a7eb435a85f9a1cd234</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>location.hh</name>
    <path>/home-ssd/adl/git/spot/src/neverparse/</path>
    <filename>neverparse_2location_8hh</filename>
    <includes id="neverparse_2position_8hh" name="position.hh" local="yes" imported="no">position.hh</includes>
    <class kind="class">neverclaimyy::location</class>
    <namespace>neverclaimyy</namespace>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a309e2b7246740b5e9961dd88ea59cc86</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a0335320481cc592dd6b43b7946ab302a</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a564992233965175c0d6d7175c1d071ac</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a24eeb2bbce3015bc3fd8ab049116b11b</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a939553ef4eb060a27b5ffe0cf3048140</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a42a5d85a40a9414fea7b9f33d92f0c5e</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>position.hh</name>
    <path>/home-ssd/adl/git/spot/src/eltlparse/</path>
    <filename>eltlparse_2position_8hh</filename>
    <class kind="class">eltlyy::position</class>
    <namespace>eltlyy</namespace>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a4284a9ad8587b1414b521578f0d531d1</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>ac1b0433b3eeacdbfb6dd4e28d38dc3a3</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a11900ce99fb8aa98dc628dc92d3b604f</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a50801c7df943fb33dd5b5b082aa44a57</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a6283908edae4450b2cf9abb75071bdc4</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a675a34cdbc3c9b1df91c4de62d90fa86</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a0921ed7379849faadfa4e0c334dbff05</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>position.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripkeparse/</path>
    <filename>kripkeparse_2position_8hh</filename>
    <class kind="class">kripkeyy::position</class>
    <namespace>kripkeyy</namespace>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>acd904cdfd20a2ffa9908ec3fd6316d5a</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa02d923c3a64873410c05cd8e554ce43</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a6fea62895c7fdacf3fb2a92657e59d9c</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a4b1ad160d2bf0b37aee7b5bfa85c883d</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a07f826450ef0b16a660e276bc70fdf52</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a30e08dab2d44b9f1ec2472540bf43c66</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a39a5189cacd38f34f57a8e0f0e3306b5</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>position.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>ltlparse_2position_8hh</filename>
    <class kind="class">ltlyy::position</class>
    <namespace>ltlyy</namespace>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ad4b9d0fc18d630a816d0d5879569a400</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>acbba141d458e781c3e884545fff8726f</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>af3f149ab4d359d9539af7f886620d4ac</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ae322d7f17d8337de215434430d4b5039</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a9d36da45cd9e96da6ec4eae56836577a</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a95004c056cf8a088f3760d2c45b32e32</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a0dd64d7f5203ae05d3a671f4dc66511b</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>position.hh</name>
    <path>/home-ssd/adl/git/spot/src/neverparse/</path>
    <filename>neverparse_2position_8hh</filename>
    <class kind="class">neverclaimyy::position</class>
    <namespace>neverclaimyy</namespace>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>af3e18b9841a3bcda514d0df0632d1b33</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a56ae22374e0293b42a46ecbbf64032ef</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a3251ac890e5678894e2ab0ff8ea71f3c</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a83e07bf39a4aa9d2d775c0a140f6a621</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a694464557bda93d3b014c32369608990</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a24c65c343ff99315e2ad07e93191a3af</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a45d523f7384fc5f8c8beec8a8053e508</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/eltlparse/</path>
    <filename>eltlparse_2public_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <includes id="nfa_8hh" name="nfa.hh" local="yes" imported="no">ltlast/nfa.hh</includes>
    <includes id="eltlparse_2location_8hh" name="location.hh" local="yes" imported="no">eltlparse/location.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::eltl</namespace>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>spair</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf0c33c18fcffd60a2c676bdc6b5214de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; eltlyy::location, spair &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga502251e9b247bf1f614b151254048b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga017167786b87df9a15ec651897ed5cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_file</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaa412b16e3eaa3d209baf83cb6e697161</anchor>
      <arglist>(const std::string &amp;filename, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf7928088c7a4d788cbef32258bb4875e</anchor>
      <arglist>(const std::string &amp;eltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga12db416891d2b540640c434afd0e5859</anchor>
      <arglist>(std::ostream &amp;os, parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaparse/</path>
    <filename>evtgbaparse_2public_8hh</filename>
    <includes id="explicit_8hh" name="explicit.hh" local="yes" imported="no">evtgba/explicit.hh</includes>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::pair&lt; evtgbayy::location, std::string &gt;</type>
      <name>evtgba_parse_error</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad049f28e03c2ebe740e5597034fd5c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; evtgba_parse_error &gt;</type>
      <name>evtgba_parse_error_list</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a90dc0e2318bb80c45893922f42ec44fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>evtgba_explicit *</type>
      <name>evtgba_parse</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a6805befaee0df3f7cb4427d30782f230</anchor>
      <arglist>(const std::string &amp;filename, evtgba_parse_error_list &amp;error_list, bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_evtgba_parse_errors</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a805ae4b750b93c1d2e19d81faa609065</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, evtgba_parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripkeparse/</path>
    <filename>kripkeparse_2public_8hh</filename>
    <includes id="kripkeexplicit_8hh" name="kripkeexplicit.hh" local="yes" imported="no">kripke/kripkeexplicit.hh</includes>
    <includes id="kripkeparse_2location_8hh" name="location.hh" local="yes" imported="no">kripkeparse/location.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::pair&lt; kripkeyy::location, std::string &gt;</type>
      <name>kripke_parse_error</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a68ac7577bed0b7af5dd8e45135797759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; kripke_parse_error &gt;</type>
      <name>kripke_parse_error_list</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a429e9facc10a0958d14ff3f94d71b006</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>kripke_explicit *</type>
      <name>kripke_parse</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad7749e1e9d7c9449aa0c0639f6e7add0</anchor>
      <arglist>(const std::string &amp;name, kripke_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_kripke_parse_errors</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a119f3d265650a37c30f816ad189725ae</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, kripke_parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>ltlparse_2public_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="typedef">
      <type>std::pair&lt; ltlyy::location, std::string &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9bf19c38b4ae7d74e6a9633ed360c147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9eb0f7867a212f92b0fd64a6ac5a12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga38985ad6b8ca53a130115aff8a055036</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_boolean</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga996c2f45174a66ee4ab85958900a1417</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_lbt</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga127ae53eca0defd994401f3919e2a0d2</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_sere</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga6a393a2f2a36d1f4aad872cb12ae76bf</anchor>
      <arglist>(const std::string &amp;sere_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga5535f3e1304089c8c6e13f564920ce00</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;input_string, const parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fix_utf8_locations</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga8fb520dd0b7b2ca3d828ea6cdfaf49b6</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/neverparse/</path>
    <filename>neverparse_2public_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <includes id="neverparse_2location_8hh" name="location.hh" local="yes" imported="no">neverparse/location.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::pair&lt; neverclaimyy::location, std::string &gt;</type>
      <name>neverclaim_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga3a14d5793c8decc8de5c19f640c721bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; neverclaim_parse_error &gt;</type>
      <name>neverclaim_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga15242b071d7c485804548ff2ee41b3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>neverclaim_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadc0e10bdf5a88fc8ee6fb83952f537e0</anchor>
      <arglist>(const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_neverclaim_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga596bbd8f0703340f2b556e43dfa7995e</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgba_2public_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="tgbabddconcrete_8hh" name="tgbabddconcrete.hh" local="yes" imported="no">tgbabddconcrete.hh</includes>
    <includes id="tgbabddconcreteproduct_8hh" name="tgbabddconcreteproduct.hh" local="yes" imported="no">tgbabddconcreteproduct.hh</includes>
    <includes id="bddprint_8hh" name="bddprint.hh" local="yes" imported="no">bddprint.hh</includes>
  </compound>
  <compound kind="file">
    <name>public.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaparse/</path>
    <filename>tgbaparse_2public_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::pair&lt; tgbayy::location, std::string &gt;</type>
      <name>tgba_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadcc2cd9b328a5c3f63918c577f86f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; tgba_parse_error &gt;</type>
      <name>tgba_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga76b22bb081d5c36378098caa5bf58081</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>tgba_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gab07f6359e41046dd8f1452ce3665e152</anchor>
      <arglist>(const std::string &amp;filename, tgba_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_tgba_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga95b48c3bd896478c7e22b0d49c39d89c</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, tgba_parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stack.hh</name>
    <path>/home-ssd/adl/git/spot/src/eltlparse/</path>
    <filename>eltlparse_2stack_8hh</filename>
    <class kind="class">eltlyy::stack</class>
    <class kind="class">eltlyy::slice</class>
    <namespace>eltlyy</namespace>
  </compound>
  <compound kind="file">
    <name>stack.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripkeparse/</path>
    <filename>kripkeparse_2stack_8hh</filename>
    <class kind="class">kripkeyy::stack</class>
    <class kind="class">kripkeyy::slice</class>
    <namespace>kripkeyy</namespace>
  </compound>
  <compound kind="file">
    <name>stack.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>ltlparse_2stack_8hh</filename>
    <class kind="class">ltlyy::stack</class>
    <class kind="class">ltlyy::slice</class>
    <namespace>ltlyy</namespace>
  </compound>
  <compound kind="file">
    <name>stack.hh</name>
    <path>/home-ssd/adl/git/spot/src/neverparse/</path>
    <filename>neverparse_2stack_8hh</filename>
    <class kind="class">neverclaimyy::stack</class>
    <class kind="class">neverclaimyy::slice</class>
    <namespace>neverclaimyy</namespace>
  </compound>
  <compound kind="file">
    <name>evtgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>evtgba_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="evtgbaiter_8hh" name="evtgbaiter.hh" local="yes" imported="no">evtgbaiter.hh</includes>
    <class kind="class">spot::evtgba</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>evtgbaiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>evtgbaiter_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="symbol_8hh" name="symbol.hh" local="yes" imported="no">symbol.hh</includes>
    <includes id="evtgbaiter_8hh" name="evtgbaiter.hh" local="yes" imported="no">evtgbaiter.hh</includes>
    <class kind="class">spot::evtgba_iterator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>explicit.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>explicit_8hh</filename>
    <includes id="evtgba_8hh" name="evtgba.hh" local="yes" imported="no">evtgba.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::evtgba_explicit</class>
    <class kind="struct">spot::evtgba_explicit::state</class>
    <class kind="struct">spot::evtgba_explicit::transition</class>
    <class kind="class">spot::state_evtgba_explicit</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>product.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>product_8hh</filename>
    <includes id="evtgba_8hh" name="evtgba.hh" local="yes" imported="no">evtgba/evtgba.hh</includes>
    <class kind="class">spot::evtgba_product</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>symbol.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>symbol_8hh</filename>
    <class kind="class">spot::symbol</class>
    <class kind="class">spot::rsymbol</class>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::set&lt; const symbol * &gt;</type>
      <name>symbol_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab1fe964166144356a185c98ce0bcbde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; rsymbol &gt;</type>
      <name>rsymbol_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a5f139f442de158fbe3bf9fab3ddee7f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dotty.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaalgos/</path>
    <filename>evtgbaalgos_2dotty_8hh</filename>
    <includes id="evtgba_8hh" name="evtgba.hh" local="yes" imported="no">evtgba/evtgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab3ff98345b771b22e0a9b67063676e84</anchor>
      <arglist>(std::ostream &amp;os, const evtgba *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dotty.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>ltlvisit_2dotty_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="no" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga7e27d31b2209954c1d57d3b8b5224473</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dotty.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>taalgos_2dotty_8hh</filename>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta/ta.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a6d777a0a353d8c7502742e3fa3b4a5b3</anchor>
      <arglist>(std::ostream &amp;os, const ta *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dotty.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tgbaalgos_2dotty_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga91590a0cf2e914df96d62e3509907cb4</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, bool assume_sba=false, dotty_decorator *dd=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reachiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaalgos/</path>
    <filename>evtgbaalgos_2reachiter_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="evtgba_8hh" name="evtgba.hh" local="yes" imported="no">evtgba/evtgba.hh</includes>
    <class kind="class">spot::evtgba_reachable_iterator</class>
    <class kind="class">spot::evtgba_reachable_iterator_depth_first</class>
    <class kind="class">spot::evtgba_reachable_iterator_breadth_first</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>reachiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>taalgos_2reachiter_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta/ta.hh</includes>
    <class kind="class">spot::ta_reachable_iterator</class>
    <class kind="class">spot::ta_reachable_iterator_depth_first</class>
    <class kind="class">spot::ta_reachable_iterator_breadth_first</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>reachiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tgbaalgos_2reachiter_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <class kind="class">spot::tgba_reachable_iterator</class>
    <class kind="class">spot::tgba_reachable_iterator_depth_first</class>
    <class kind="class">spot::tgba_reachable_iterator_breadth_first</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>save.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaalgos/</path>
    <filename>evtgbaalgos_2save_8hh</filename>
    <includes id="evtgba_8hh" name="evtgba.hh" local="yes" imported="no">evtgba/evtgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>evtgba_save_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aade1f7e5b6c685b5393d8a6d3ab7e09d</anchor>
      <arglist>(std::ostream &amp;os, const evtgba *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>save.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tgbaalgos_2save_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>tgba_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga5c7f56a5941eb2380676c4ff6706e1c2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgba2evtgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaalgos/</path>
    <filename>tgba2evtgba_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>evtgba_explicit *</type>
      <name>tgba_to_evtgba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3b22a05fb3e16d693b2d80425dfa4500</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fairkripke.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripke/</path>
    <filename>fairkripke_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="succiter_8hh" name="succiter.hh" local="yes" imported="no">tgba/succiter.hh</includes>
    <class kind="class">spot::fair_kripke_succ_iterator</class>
    <class kind="class">spot::fair_kripke</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>kripke.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripke/</path>
    <filename>kripke_8hh</filename>
    <includes id="fairkripke_8hh" name="fairkripke.hh" local="yes" imported="no">fairkripke.hh</includes>
    <class kind="class">spot::kripke_succ_iterator</class>
    <class kind="class">spot::kripke</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>kripkeexplicit.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripke/</path>
    <filename>kripkeexplicit_8hh</filename>
    <includes id="kripke_8hh" name="kripke.hh" local="yes" imported="no">kripke.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="kripkeprint_8hh" name="kripkeprint.hh" local="yes" imported="no">kripkeprint.hh</includes>
    <class kind="class">spot::state_kripke</class>
    <class kind="class">spot::kripke_explicit_succ_iterator</class>
    <class kind="class">spot::kripke_explicit</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>kripkeprint.hh</name>
    <path>/home-ssd/adl/git/spot/src/kripke/</path>
    <filename>kripkeprint_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga297ff6967b82ecb1de793bce48701379</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable_renumbered</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga65e6d2507fc1692b1405a26b7306379f</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>allnodes.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>allnodes_8hh</filename>
    <includes id="binop_8hh" name="binop.hh" local="yes" imported="no">binop.hh</includes>
    <includes id="unop_8hh" name="unop.hh" local="yes" imported="no">unop.hh</includes>
    <includes id="multop_8hh" name="multop.hh" local="yes" imported="no">multop.hh</includes>
    <includes id="atomic__prop_8hh" name="atomic_prop.hh" local="yes" imported="no">atomic_prop.hh</includes>
    <includes id="constant_8hh" name="constant.hh" local="yes" imported="no">constant.hh</includes>
    <includes id="automatop_8hh" name="automatop.hh" local="yes" imported="no">automatop.hh</includes>
    <includes id="bunop_8hh" name="bunop.hh" local="yes" imported="no">bunop.hh</includes>
  </compound>
  <compound kind="file">
    <name>atomic_prop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>atomic__prop_8hh</filename>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <includes id="environment_8hh" name="environment.hh" local="yes" imported="no">ltlenv/environment.hh</includes>
    <class kind="class">spot::ltl::atomic_prop</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const atomic_prop *</type>
      <name>is_atomic_prop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a6ebb15622f493a6e9d8fe698c4d3af9e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>automatop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>automatop_8hh</filename>
    <includes id="nfa_8hh" name="nfa.hh" local="yes" imported="no">nfa.hh</includes>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <class kind="class">spot::ltl::automatop</class>
    <class kind="struct">spot::ltl::automatop::tripletcmp</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>binop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>binop_8hh</filename>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <class kind="class">spot::ltl::binop</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aec170dbcfc4ed607f2e2c3fb8cb2264e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>afe008683046960e5c1be4aa9da7e7116</anchor>
      <arglist>(const formula *f, binop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>adeb0b3c086e4840b15469fc7c5ba8ffb</anchor>
      <arglist>(const formula *f, binop::type op1, binop::type op2)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_U</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a7f69b252a63c598fb4a8a1cd3a43b54a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_M</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>af2c3a3b78c2394cb420377732df53643</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_R</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a29e64397d9e57f5ef8d91cff0794d430</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_W</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a99c281102d5b23a2d24079cf66c8facd</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bunop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>bunop_8hh</filename>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <includes id="constant_8hh" name="constant.hh" local="yes" imported="no">constant.hh</includes>
    <class kind="class">spot::ltl::bunop</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_bunop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a87876bf8eb00438107b391a6db369146</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_bunop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>add6ce0b867fb1a665da9a97fc622367e</anchor>
      <arglist>(const formula *f, bunop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_Star</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a28aede25875d04c53587f8ddaec2e033</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_KleenStar</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a51d0620bc2a141cf443a7dc73f9d7237</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constant.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>constant_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">formula.hh</includes>
    <class kind="class">spot::ltl::constant</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const constant *</type>
      <name>is_constant</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a3ef6c967bc0d99bc8eab1c81d7a7eab1</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>formula.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>formula_8hh</filename>
    <includes id="predecl_8hh" name="predecl.hh" local="yes" imported="no">predecl.hh</includes>
    <class kind="class">spot::ltl::formula</class>
    <class kind="struct">spot::ltl::formula::ltl_prop</class>
    <class kind="struct">spot::ltl::formula_ptr_less_than</class>
    <class kind="struct">spot::ltl::formula_ptr_hash</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print_formula_props</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a5ebe7a0005ae56f57d6e085eddb453e1</anchor>
      <arglist>(std::ostream &amp;out, const formula *f, bool abbreviated=false)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>list_formula_props</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a53b023ef17f12698ac0721875482a394</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>formula_tree.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>formula__tree_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">formula.hh</includes>
    <includes id="multop_8hh" name="multop.hh" local="yes" imported="no">multop.hh</includes>
    <includes id="binop_8hh" name="binop.hh" local="yes" imported="no">binop.hh</includes>
    <includes id="unop_8hh" name="unop.hh" local="yes" imported="no">unop.hh</includes>
    <includes id="nfa_8hh" name="nfa.hh" local="yes" imported="no">nfa.hh</includes>
    <class kind="struct">spot::ltl::formula_tree::node</class>
    <class kind="struct">spot::ltl::formula_tree::node_unop</class>
    <class kind="struct">spot::ltl::formula_tree::node_binop</class>
    <class kind="struct">spot::ltl::formula_tree::node_multop</class>
    <class kind="struct">spot::ltl::formula_tree::node_nfa</class>
    <class kind="struct">spot::ltl::formula_tree::node_atomic</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <namespace>spot::ltl::formula_tree</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; node &gt;</type>
      <name>node_ptr</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>aca5141e136bf68845459fe16cee595a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>True</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>ac412ecbb3c26675b4c5a09b7a7e534f7ab55cce79f3e454898faaf56bcedef446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>False</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>ac412ecbb3c26675b4c5a09b7a7e534f7a5c565ea9647bef5f00525a383c418562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>instanciate</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>a15921c6ac098624c6194659ce7256a80</anchor>
      <arglist>(const node_ptr np, const std::vector&lt; const formula * &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>arity</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>af67581a7e99a31f157617cd73ff5f1a2</anchor>
      <arglist>(const node_ptr np)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>multop_8hh</filename>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <class kind="class">spot::ltl::multop</class>
    <class kind="struct">spot::ltl::multop::paircmp</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acf7f6187f2e0beb266738615ee380e5a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a72cf9d5651a25c79009864a5bb93deff</anchor>
      <arglist>(const formula *f, multop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa7830e6d2f0f4684e769df785ef8c9d8</anchor>
      <arglist>(const formula *f, multop::type op1, multop::type op2)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_And</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa208803abec5d0085c1f635909f44cdb</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_AndRat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a89dd541d50e9f0882cf9a879e3d0e2cc</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_AndNLM</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a20f7e738f8c27a3d296b519b8c8e3796</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Or</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a0ffb29ec0246eedf10abe95544bacfc5</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_OrRat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a684d629d37b85ad8b66f32cb29e1c1e6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Concat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a7db8010a9f32fbca50cd9075e2ba8473</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Fusion</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a67a179752351bf2d4e1e6df19013413a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nfa.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>nfa_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::ltl::nfa</class>
    <class kind="struct">spot::ltl::nfa::transition</class>
    <class kind="class">spot::ltl::succ_iterator</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <namespace>spot::ltl::formula_tree</namespace>
  </compound>
  <compound kind="file">
    <name>predecl.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>predecl_8hh</filename>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>refformula.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>refformula_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">formula.hh</includes>
    <class kind="class">spot::ltl::ref_formula</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>unop.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>unop_8hh</filename>
    <includes id="refformula_8hh" name="refformula.hh" local="yes" imported="no">refformula.hh</includes>
    <includes id="bunop_8hh" name="bunop.hh" local="yes" imported="no">bunop.hh</includes>
    <class kind="class">spot::ltl::unop</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const unop *</type>
      <name>is_unop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab5ba210cfb0a509be848ca2f9ea1d755</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_unop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>abc75bf92dfd70c0a414db946cc05d469</anchor>
      <arglist>(const formula *f, unop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_Not</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a3ca8bd47d984aaf3d8a758a0ee0ff436</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_X</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a599464ed25bf27b8a37b8a201bca64d1</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_F</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa08bd62932d13cfad5aacde4dded31b2</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_G</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a10e49587fe0e60b0229eb08c372d98fc</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_GF</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a1d0cc2d86dc01d7bef528fcbfbf784a6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_FG</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a08a5e79c0220c641b8bfe8a9252f2cbd</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>visitor.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>visitor_8hh</filename>
    <includes id="predecl_8hh" name="predecl.hh" local="yes" imported="no">predecl.hh</includes>
    <class kind="struct">spot::ltl::visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>declenv.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlenv/</path>
    <filename>declenv_8hh</filename>
    <includes id="environment_8hh" name="environment.hh" local="yes" imported="no">environment.hh</includes>
    <includes id="atomic__prop_8hh" name="atomic_prop.hh" local="yes" imported="no">ltlast/atomic_prop.hh</includes>
    <class kind="class">spot::ltl::declarative_environment</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>defaultenv.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlenv/</path>
    <filename>defaultenv_8hh</filename>
    <includes id="environment_8hh" name="environment.hh" local="yes" imported="no">environment.hh</includes>
    <class kind="class">spot::ltl::default_environment</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>environment.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlenv/</path>
    <filename>environment_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <class kind="class">spot::ltl::environment</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>ltlfile.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>ltlfile_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <class kind="class">spot::ltl::ltl_file</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>apcollect.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>apcollect_8hh</filename>
    <includes id="atomic__prop_8hh" name="atomic_prop.hh" local="yes" imported="no">ltlast/atomic_prop.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="typedef">
      <type>std::set&lt; const atomic_prop *, formula_ptr_less_than &gt;</type>
      <name>atomic_prop_set</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga8347f76c4cd9c56970ba55c8fb40ab1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>atomic_prop_set *</type>
      <name>atomic_prop_collect</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga335fb11ef18d07a729b03ee76719ead4</anchor>
      <arglist>(const formula *f, atomic_prop_set *s=0)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>atomic_prop_collect_as_bdd</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga34d27c315e9f6a09e7909066ab0f081f</anchor>
      <arglist>(const formula *f, const tgba *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clone.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>clone_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="visitor_8hh" name="visitor.hh" local="yes" imported="no">ltlast/visitor.hh</includes>
    <class kind="class">spot::ltl::clone_visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga4cbd1bf9c7d993d9fe093578b30712a6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>contain.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>contain_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="ltl2tgba__fm_8hh" name="ltl2tgba_fm.hh" local="yes" imported="no">tgbaalgos/ltl2tgba_fm.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::ltl::language_containment_checker</class>
    <class kind="struct">spot::ltl::language_containment_checker::record_</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>reduce_tau03</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a15bfcd6e1d7b386f8afa1cc785894ba2</anchor>
      <arglist>(const formula *f, bool stronger=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>destroy.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>destroy_8hh</filename>
    <includes id="postfix_8hh" name="postfix.hh" local="yes" imported="no">ltlvisit/postfix.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga7dfba082e4a6aca346befcc46f87e358</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dump.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>dump_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaaf316635f1320fa38885fa89e23e2098</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lbt.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>lbt_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="no" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga49b892ff2e4d9aec61c271959460ad12</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gae7e461087003b093571f87640dab9045</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>length.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>length_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>gabf324b4e946522d1b4caf3ce003ec903</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length_boolone</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga72b56983a73048f0a303323fd4463fbf</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lunabbrev.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>lunabbrev_8hh</filename>
    <includes id="clone_8hh" name="clone.hh" local="yes" imported="no">clone.hh</includes>
    <class kind="class">spot::ltl::unabbreviate_logic_visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_logic</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga802942a9f38ff14be3466c6a00705c9e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mark.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>mark_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="visitor_8hh" name="visitor.hh" local="yes" imported="no">ltlast/visitor.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::ltl::mark_tools</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>nenoform.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>nenoform_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>negative_normal_form</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga493ea666b2b7bea9b18d5ee9db2969b2</anchor>
      <arglist>(const formula *f, bool negated=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>postfix.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>postfix_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="visitor_8hh" name="visitor.hh" local="yes" imported="no">ltlast/visitor.hh</includes>
    <class kind="class">spot::ltl::postfix_visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>randomltl.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>randomltl_8hh</filename>
    <includes id="apcollect_8hh" name="apcollect.hh" local="yes" imported="no">apcollect.hh</includes>
    <class kind="class">spot::ltl::random_formula</class>
    <class kind="struct">spot::ltl::random_formula::op_proba</class>
    <class kind="class">spot::ltl::random_ltl</class>
    <class kind="class">spot::ltl::random_boolean</class>
    <class kind="class">spot::ltl::random_sere</class>
    <class kind="class">spot::ltl::random_psl</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>reduce.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>reduce_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="visitor_8hh" name="visitor.hh" local="yes" imported="no">ltlast/visitor.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="enumeration">
      <name>reduce_options</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>gac9e66395d0e9cb870fa7b1ca208b70ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caabff3607cc02f12d6756d0244a8f5464a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Basics</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caab83ef042ab620af2f258a817e95f8f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Syntactic_Implications</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22d75bbadb5b030981574ae49668ad94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Eventuality_And_Universality</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caaabb627af73b5817a542506be482f396d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22286d57705e7511f13a75c05ac0a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks_Stronger</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa0721d15d048b11cfe234f14850dbc9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa1629bc689540d42e2f86eea77a6cd275</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>reduce</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga75beb5d36830e9a795e96a3a64f032c1</anchor>
      <arglist>(const formula *f, int opt=Reduce_All)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga3210a9b433640efe1ef74e0da6c678e5</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga10c79e8a8c5b58fa77cbb6dab5857083</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>relabel.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>relabel_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="no" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="enumeration">
      <name>relabeling_style</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Abc</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13a5611119d586b70ace29dbf1c4678e6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Pnn</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13a92ec2e5d601c09c57173015e51b675cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>relabel</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga27c4d86c1432210a1e02a1fcd3fec2c3</anchor>
      <arglist>(const formula *f, relabeling_style style)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simpfg.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>simpfg_8hh</filename>
    <includes id="clone_8hh" name="clone.hh" local="yes" imported="no">clone.hh</includes>
    <class kind="class">spot::ltl::simplify_f_g_visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>simplify_f_g</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga900c80d1bc18bc999de94de19aafa6ad</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simplify.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>simplify_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">tgba/bdddict.hh</includes>
    <class kind="class">spot::ltl::ltl_simplifier_options</class>
    <class kind="class">spot::ltl::ltl_simplifier</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
  </compound>
  <compound kind="file">
    <name>snf.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>snf_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="typedef">
      <type>Sgi::hash_map&lt; const formula *, const formula *, ptr_hash&lt; formula &gt; &gt;</type>
      <name>snf_cache</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acb41ffa774442ee155cc23a60c0a78a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>star_normal_form</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acc1cf3cb0551cfab387565570fa21ebf</anchor>
      <arglist>(const formula *sere, snf_cache *cache=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tostring.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>tostring_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="no" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0f6fa636f033da650016c836d6c94215</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga41c884625ab680e8b8e3f2c60d58fd0e</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga839a34e0b8a9261d039177a3546f5501</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga2cd5cc7892c33dfbedafe28e102f0834</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0a8dd6d9bb385a69fabea697df9be925</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga62c230f1cb3170370c25d8bffb4ea141</anchor>
      <arglist>(const formula *f, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga91c4e60cf307d560694b163676ec2c6a</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gab337644a8e96528226e22cf166dc0977</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tunabbrev.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>tunabbrev_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="lunabbrev_8hh" name="lunabbrev.hh" local="yes" imported="no">ltlvisit/lunabbrev.hh</includes>
    <class kind="class">spot::ltl::unabbreviate_ltl_visitor</class>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_ltl</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa20f1c7fe556be8d3864b12c09efc2bb</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wmunabbrev.hh</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>wmunabbrev_8hh</filename>
    <namespace>spot</namespace>
    <namespace>spot::ltl</namespace>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_wm</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga133f7bfb31a5e4a1e98be27edad69217</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>acccompl.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>acccompl_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <class kind="class">spot::acc_compl</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>accconv.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>accconv_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <class kind="class">spot::acceptance_convertor</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>bareword.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>bareword_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaae6fadac6a2f91d7b8e27b3eb6ad647e</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>quote_unless_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga4731f21b7b43332b5c7b5bc63c6d67e6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bddalloc.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>bddalloc_8hh</filename>
    <includes id="freelist_8hh" name="freelist.hh" local="yes" imported="no">freelist.hh</includes>
    <class kind="class">spot::bdd_allocator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>bddlt.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>bddlt_8hh</filename>
    <class kind="struct">spot::bdd_less_than</class>
    <class kind="struct">spot::bdd_hash</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>bddop.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>bddop_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bdd</type>
      <name>compute_all_acceptance_conditions</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a1c1c9963ce3385c106461526f80e4d7a</anchor>
      <arglist>(bdd neg_acceptance_conditions)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>compute_neg_acceptance_conditions</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>acbfcdc0a54e339085eb6c5458c994832</anchor>
      <arglist>(bdd all_acceptance_conditions)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>casts.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>casts_8hh</filename>
    <member kind="define">
      <type>#define</type>
      <name>down_cast</name>
      <anchorfile>casts_8hh.html</anchorfile>
      <anchor>a4b402d2df7a186d789ac0837ebe88d13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>escape.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>escape_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga84a8b196e2ec651f0fd039c70c7ff6cb</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad4b0b4fae7b93db7d704a5fef6e021c6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga3f3dad2e940fa844eeccda24e9386608</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fixpool.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>fixpool_8hh</filename>
    <class kind="class">spot::fixed_size_pool</class>
    <class kind="struct">spot::fixed_size_pool::block_</class>
    <class kind="union">spot::fixed_size_pool::chunk_</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>formater.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>formater_8hh</filename>
    <class kind="class">spot::printable</class>
    <class kind="class">spot::printable_value</class>
    <class kind="class">spot::printable_id</class>
    <class kind="class">spot::printable_percent</class>
    <class kind="class">spot::formater</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>freelist.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>freelist_8hh</filename>
    <class kind="class">spot::free_list</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>hash.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>hash_8hh</filename>
    <includes id="hashfunc_8hh" name="hashfunc.hh" local="yes" imported="no">misc/hashfunc.hh</includes>
    <class kind="struct">spot::ptr_hash</class>
    <class kind="struct">spot::identity_hash</class>
    <namespace>spot</namespace>
    <member kind="define">
      <type>#define</type>
      <name>hash_map</name>
      <anchorfile>hash_8hh.html</anchorfile>
      <anchor>ad06cc371f5697a73eab4c293546b4dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_multimap</name>
      <anchorfile>hash_8hh.html</anchorfile>
      <anchor>a046c232424330722fc22de4526cf067b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_set</name>
      <anchorfile>hash_8hh.html</anchorfile>
      <anchor>adf357f1906b5e9496ca8792d88a3268e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sgi::hash&lt; std::string &gt;</type>
      <name>string_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga33960cd9c4aa7bb175efe1debb7534b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hashfunc.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>hashfunc_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>wang32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga9422ff0c16df957910dd4a0275d9f726</anchor>
      <arglist>(size_t key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>knuth32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>gaea94dbea4a286b0bde253baf07e7a56e</anchor>
      <arglist>(size_t key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intvcmp2.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>intvcmp2_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga5253b7b9fd60f3285091b39a1f1b815d</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaed78e6934b190995ba5a162ad0e76560</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>intvcomp.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>intvcomp_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga86ac44d535ef8f28e5d81a2edf907065</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input, std::vector&lt; unsigned int &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gade72f3d754ef89b594db989893ee3e7b</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;array, std::vector&lt; int &gt; &amp;output, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; *</type>
      <name>int_array_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gae8556060f7963410dd8c52d2426d7269</anchor>
      <arglist>(const int *array, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga6c161d70b36c5637b6511f2192f2d9bf</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; *array, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga72a6bb80b592f562634a6bd8aedd9ff6</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad595c02553de6187297d09d2b47c995c</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltstr.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>ltstr_8hh</filename>
    <class kind="struct">spot::char_ptr_less_than</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>memusage.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>memusage_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>int</type>
      <name>memusage</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a1a8d0610b61c0a30aad16791b0b73d15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minato.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>minato_8hh</filename>
    <class kind="class">spot::minato_isop</class>
    <class kind="struct">spot::minato_isop::local_vars</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>modgray.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>modgray_8hh</filename>
    <class kind="class">spot::loopless_modular_mixed_radix_gray_code</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>mspool.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>mspool_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::multiple_size_pool</class>
    <class kind="struct">spot::multiple_size_pool::block_</class>
    <class kind="union">spot::multiple_size_pool::chunk_</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>optionmap.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>optionmap_8hh</filename>
    <class kind="class">spot::option_map</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>random.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>random_8hh</filename>
    <class kind="class">spot::barand</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>void</type>
      <name>srand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga539812ab355a561fee1ecbfe60b276e4</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga86ce713fe60de9af440a7331de74aa1a</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>gafe8da996f40caa7d188f6b408ae62904</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>drand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga42801cd81368df5c1c61aa1626e299ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga978e1c6fb8f447274a05ddd3f87ce58b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bmrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga0130217a19e5156f796ab774dca4b08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga816b558a7c64daca3a2a018704377dac</anchor>
      <arglist>(double p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timer.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>timer_8hh</filename>
    <class kind="struct">spot::time_info</class>
    <class kind="class">spot::timer</class>
    <class kind="class">spot::timer_map</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>unique_ptr.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>unique__ptr_8hh</filename>
    <class kind="class">spot::unique_ptr</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab35966460c1f984c2db09456bdf08b42</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>version.hh</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>version_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga85c83eb1d18703782d129dbe4a518fca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>explicitstateconjunction.hh</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>explicitstateconjunction_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="no" imported="no">misc/hash.hh</includes>
    <includes id="sabasucciter_8hh" name="sabasucciter.hh" local="yes" imported="no">sabasucciter.hh</includes>
    <class kind="class">spot::explicit_state_conjunction</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>saba.hh</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>saba_8hh</filename>
    <includes id="sabastate_8hh" name="sabastate.hh" local="yes" imported="no">sabastate.hh</includes>
    <includes id="sabasucciter_8hh" name="sabasucciter.hh" local="yes" imported="no">sabasucciter.hh</includes>
    <includes id="bdddict_8hh" name="bdddict.hh" local="no" imported="no">tgba/bdddict.hh</includes>
    <class kind="class">spot::saba</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>sabacomplementtgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>sabacomplementtgba_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="no" imported="no">tgba/tgba.hh</includes>
    <includes id="tgbatba_8hh" name="tgbatba.hh" local="no" imported="no">tgba/tgbatba.hh</includes>
    <includes id="saba_8hh" name="saba.hh" local="yes" imported="no">saba.hh</includes>
    <class kind="class">spot::saba_complement_tgba</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>sabastate.hh</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>sabastate_8hh</filename>
    <class kind="class">spot::saba_state</class>
    <class kind="struct">spot::saba_state_ptr_less_than</class>
    <class kind="struct">spot::saba_state_ptr_equal</class>
    <class kind="struct">spot::saba_state_ptr_hash</class>
    <class kind="struct">spot::saba_state_shared_ptr_less_than</class>
    <class kind="struct">spot::saba_state_shared_ptr_equal</class>
    <class kind="struct">spot::saba_state_shared_ptr_hash</class>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const saba_state &gt;</type>
      <name>shared_saba_state</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a5494e2802ca03bd036c523a1c65f3a3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sabasucciter.hh</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>sabasucciter_8hh</filename>
    <includes id="sabastate_8hh" name="sabastate.hh" local="yes" imported="no">sabastate.hh</includes>
    <class kind="class">spot::saba_state_conjunction</class>
    <class kind="class">spot::saba_succ_iterator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>sabadotty.hh</name>
    <path>/home-ssd/adl/git/spot/src/sabaalgos/</path>
    <filename>sabadotty_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>saba_dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9f2c6c63ca4916813045c4326c635b93</anchor>
      <arglist>(std::ostream &amp;os, const saba *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sabareachiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/sabaalgos/</path>
    <filename>sabareachiter_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="saba_8hh" name="saba.hh" local="yes" imported="no">saba/saba.hh</includes>
    <class kind="class">spot::saba_reachable_iterator</class>
    <class kind="class">spot::saba_reachable_iterator_depth_first</class>
    <class kind="class">spot::saba_reachable_iterator_breadth_first</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>ta.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>ta_8hh</filename>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="succiter_8hh" name="succiter.hh" local="yes" imported="no">tgba/succiter.hh</includes>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">tgba/bdddict.hh</includes>
    <class kind="class">spot::ta</class>
    <class kind="class">spot::ta_succ_iterator</class>
    <class kind="class">spot::scc_stack_ta</class>
    <class kind="struct">spot::scc_stack_ta::connected_component</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>taexplicit.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>taexplicit_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta.hh</includes>
    <class kind="class">spot::ta_explicit</class>
    <class kind="class">spot::state_ta_explicit</class>
    <class kind="struct">spot::state_ta_explicit::transition</class>
    <class kind="class">spot::ta_explicit_succ_iterator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>taproduct.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>taproduct_8hh</filename>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta.hh</includes>
    <includes id="kripke_8hh" name="kripke.hh" local="yes" imported="no">kripke/kripke.hh</includes>
    <class kind="class">spot::state_ta_product</class>
    <class kind="class">spot::ta_succ_iterator_product</class>
    <class kind="class">spot::ta_product</class>
    <class kind="class">spot::ta_succ_iterator_product_by_changeset</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgta.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>tgta_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <class kind="class">spot::tgta</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgtaexplicit.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>tgtaexplicit_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <includes id="taexplicit_8hh" name="taexplicit.hh" local="yes" imported="no">taexplicit.hh</includes>
    <includes id="tgta_8hh" name="tgta.hh" local="yes" imported="no">tgta.hh</includes>
    <class kind="class">spot::tgta_explicit</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgtaproduct.hh</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>tgtaproduct_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="tgbaproduct_8hh" name="tgbaproduct.hh" local="yes" imported="no">tgba/tgbaproduct.hh</includes>
    <includes id="fixpool_8hh" name="fixpool.hh" local="yes" imported="no">misc/fixpool.hh</includes>
    <includes id="kripke_8hh" name="kripke.hh" local="yes" imported="no">kripke/kripke.hh</includes>
    <includes id="tgta_8hh" name="tgta.hh" local="yes" imported="no">tgta.hh</includes>
    <class kind="class">spot::tgta_product</class>
    <class kind="class">spot::tgta_succ_iterator_product</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>emptinessta.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>emptinessta_8hh</filename>
    <includes id="taproduct_8hh" name="taproduct.hh" local="yes" imported="no">ta/taproduct.hh</includes>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <includes id="nsheap_8hh" name="nsheap.hh" local="yes" imported="no">tgbaalgos/gtec/nsheap.hh</includes>
    <includes id="emptiness__stats_8hh" name="emptiness_stats.hh" local="yes" imported="no">tgbaalgos/emptiness_stats.hh</includes>
    <class kind="class">spot::ta_check</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>minimize.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>taalgos_2minimize_8hh</filename>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta/ta.hh</includes>
    <includes id="tgta_8hh" name="tgta.hh" local="yes" imported="no">ta/tgta.hh</includes>
    <includes id="tgtaexplicit_8hh" name="tgtaexplicit.hh" local="yes" imported="no">ta/tgtaexplicit.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>ta *</type>
      <name>minimize_ta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>gab6d913bd6fddb9c5c1919c97373bd6bd</anchor>
      <arglist>(const ta *ta_)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>minimize_tgta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>ga333ff9524f1e1a2988ac318f81dfae74</anchor>
      <arglist>(const tgta_explicit *tgta_)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>minimize.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tgbaalgos_2minimize_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_monitor</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga1ae7d44542608b4635f0dc05556d3064</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_wdba</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga871114e0c974638ee12deaa87e98f56b</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>minimize_obligation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4245a82c2be0713e20af9b217ad7b0a7</anchor>
      <arglist>(const tgba *aut_f, const ltl::formula *f=0, const tgba *aut_neg_f=0, bool reject_bigger=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>statessetbuilder.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>statessetbuilder_8hh</filename>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta/ta.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::set&lt; const state * &gt;</type>
      <name>get_states_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a4e83dbca5f5008ab4cac60ee423b905d</anchor>
      <arglist>(const ta *t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stats.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>taalgos_2stats_8hh</filename>
    <includes id="ta_8hh" name="ta.hh" local="yes" imported="no">ta/ta.hh</includes>
    <class kind="struct">spot::ta_statistics</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>ta_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__ta__misc.html</anchorfile>
      <anchor>ga6f9e7ec5c5d7b706b0c5184c4d3dbe3c</anchor>
      <arglist>(const ta *t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stats.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tgbaalgos_2stats_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="formater_8hh" name="formater.hh" local="yes" imported="no">misc/formater.hh</includes>
    <class kind="struct">spot::tgba_statistics</class>
    <class kind="struct">spot::tgba_sub_statistics</class>
    <class kind="class">spot::printable_formula</class>
    <class kind="class">spot::stat_printer</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaeeb949ca5fa52c1e292e0a7732ef46c4</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>tgba_sub_statistics</type>
      <name>sub_stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaec71c3349daead65b683e5ba99b893cf</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgba2ta.hh</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>tgba2ta_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="taexplicit_8hh" name="taexplicit.hh" local="yes" imported="no">ta/taexplicit.hh</includes>
    <includes id="tgtaexplicit_8hh" name="tgtaexplicit.hh" local="yes" imported="no">ta/tgtaexplicit.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>ta_explicit *</type>
      <name>tgba_to_ta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>ga5d3967eb107ea9bbb5f71b73f8dad2ef</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set, bool degeneralized=true, bool artificial_initial_state_mode=true, bool single_pass_emptiness_check=false, bool artificial_livelock_state_mode=false)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>tgba_to_tgta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>gabe1fa2db8c3bd35f340ad3a46654959a</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bdddict.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>bdddict_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="bddalloc_8hh" name="bddalloc.hh" local="yes" imported="no">misc/bddalloc.hh</includes>
    <class kind="class">spot::bdd_dict</class>
    <class kind="struct">spot::bdd_dict::bdd_info</class>
    <class kind="class">spot::bdd_dict::anon_free_list</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>bddprint.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>bddprint_8hh</filename>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">bdddict.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_sat</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a59e91579989d390a3979a5badf302255</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_sat</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aba342c9d66d191b7ed930e2b02043e7f</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_acc</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3b659fe265e2014282d3b25db928794b</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_accset</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aa75a117405f2292f6d80abc2ae930946</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_accset</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aa04818924fa41d2230160b499d95173d</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aca49e9ec778c8a6b38455a68db8d6ece</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a73d8fa997efd95d08e0d1b9dfa7b7073</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a174c8f965f37e9a26b33c9f76183720f</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab9eea881fdb5d8e629db7102fde452ea</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3ec151057e33aadb60d2b47ffaa64c24</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_table</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac8434843d2dcb0d99a027e398b01bafe</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_utf8</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9da9924abc8e1cb4086202c87b4213df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>formula2bdd.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>formula2bdd_8hh</filename>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">bdddict.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bdd</type>
      <name>formula_to_bdd</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab6641d7d9896e016376b1c618da92469</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *d, void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>const ltl::formula *</type>
      <name>bdd_to_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aebfbc06108c79ba74f84a838af4f1772</anchor>
      <arglist>(bdd f, const bdd_dict *d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>futurecondcol.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>futurecondcol_8hh</filename>
    <includes id="tgbascc_8hh" name="tgbascc.hh" local="yes" imported="no">tgbascc.hh</includes>
    <class kind="class">spot::future_conditions_collector</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>sba.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>sba_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <class kind="class">spot::sba</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>state.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>state_8hh</filename>
    <includes id="casts_8hh" name="casts.hh" local="yes" imported="no">misc/casts.hh</includes>
    <class kind="class">spot::state</class>
    <class kind="struct">spot::state_ptr_less_than</class>
    <class kind="struct">spot::state_ptr_equal</class>
    <class kind="struct">spot::state_ptr_hash</class>
    <class kind="struct">spot::state_shared_ptr_less_than</class>
    <class kind="struct">spot::state_shared_ptr_equal</class>
    <class kind="struct">spot::state_shared_ptr_hash</class>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const state &gt;</type>
      <name>shared_state</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a13a1db95095eccfe0a4ce4a818442fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shared_state_deleter</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a361af6c0080f2280ac0a884960374bd3</anchor>
      <arglist>(state *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>statebdd.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>statebdd_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">state.hh</includes>
    <class kind="class">spot::state_bdd</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>succiter.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>succiter_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">state.hh</includes>
    <class kind="class">spot::tgba_succ_iterator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>succiterconcrete.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>succiterconcrete_8hh</filename>
    <includes id="statebdd_8hh" name="statebdd.hh" local="yes" imported="no">statebdd.hh</includes>
    <includes id="succiter_8hh" name="succiter.hh" local="yes" imported="no">succiter.hh</includes>
    <includes id="tgbabddcoredata_8hh" name="tgbabddcoredata.hh" local="yes" imported="no">tgbabddcoredata.hh</includes>
    <class kind="class">spot::tgba_succ_iterator_concrete</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>taatgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>taatgba_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">bdddict.hh</includes>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <class kind="class">spot::taa_tgba</class>
    <class kind="struct">spot::taa_tgba::transition</class>
    <class kind="class">spot::state_set</class>
    <class kind="class">spot::taa_succ_iterator</class>
    <class kind="struct">spot::taa_succ_iterator::distance_sort</class>
    <class kind="class">spot::taa_tgba_labelled</class>
    <class kind="class">spot::taa_tgba_string</class>
    <class kind="class">spot::taa_tgba_formula</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgba_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">state.hh</includes>
    <includes id="succiter_8hh" name="succiter.hh" local="yes" imported="no">succiter.hh</includes>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">bdddict.hh</includes>
    <class kind="class">spot::tgba</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbabddconcrete.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbabddconcrete_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="statebdd_8hh" name="statebdd.hh" local="yes" imported="no">statebdd.hh</includes>
    <includes id="tgbabddfactory_8hh" name="tgbabddfactory.hh" local="yes" imported="no">tgbabddfactory.hh</includes>
    <includes id="succiterconcrete_8hh" name="succiterconcrete.hh" local="yes" imported="no">succiterconcrete.hh</includes>
    <class kind="class">spot::tgba_bdd_concrete</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbabddconcretefactory.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbabddconcretefactory_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tgbabddfactory_8hh" name="tgbabddfactory.hh" local="yes" imported="no">tgbabddfactory.hh</includes>
    <class kind="class">spot::tgba_bdd_concrete_factory</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbabddconcreteproduct.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbabddconcreteproduct_8hh</filename>
    <includes id="tgbabddconcrete_8hh" name="tgbabddconcrete.hh" local="yes" imported="no">tgbabddconcrete.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>product</name>
      <anchorfile>group__tgba__algorithms.html</anchorfile>
      <anchor>ga9a8f2973e4358cf18aa162634b61ab51</anchor>
      <arglist>(const tgba_bdd_concrete *left, const tgba_bdd_concrete *right)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgbabddcoredata.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbabddcoredata_8hh</filename>
    <includes id="bdddict_8hh" name="bdddict.hh" local="yes" imported="no">bdddict.hh</includes>
    <class kind="struct">spot::tgba_bdd_core_data</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbabddfactory.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbabddfactory_8hh</filename>
    <includes id="tgbabddcoredata_8hh" name="tgbabddcoredata.hh" local="yes" imported="no">tgbabddcoredata.hh</includes>
    <class kind="class">spot::tgba_bdd_factory</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbaexplicit.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbaexplicit_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="sba_8hh" name="sba.hh" local="yes" imported="no">sba.hh</includes>
    <includes id="formula2bdd_8hh" name="formula2bdd.hh" local="yes" imported="no">tgba/formula2bdd.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="bddop_8hh" name="bddop.hh" local="yes" imported="no">misc/bddop.hh</includes>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tostring_8hh" name="tostring.hh" local="yes" imported="no">ltlvisit/tostring.hh</includes>
    <class kind="struct">spot::destroy_key</class>
    <class kind="struct">spot::destroy_key&lt; const ltl::formula * &gt;</class>
    <class kind="class">spot::state_explicit</class>
    <class kind="struct">spot::state_explicit::transition</class>
    <class kind="class">spot::state_explicit_number</class>
    <class kind="class">spot::state_explicit_string</class>
    <class kind="class">spot::state_explicit_formula</class>
    <class kind="class">spot::tgba_explicit_succ_iterator</class>
    <class kind="class">spot::explicit_graph</class>
    <class kind="class">spot::tgba_explicit</class>
    <class kind="class">spot::sba_explicit</class>
    <class kind="class">spot::explicit_conf</class>
    <class kind="class">spot::explicit_conf&lt; graph, state_explicit_string &gt;</class>
    <class kind="class">spot::explicit_conf&lt; graph, state_explicit_formula &gt;</class>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_string &gt;, state_explicit_string &gt;</type>
      <name>tgba_explicit_string</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3ace0ebc1ab16f0766fa681785750794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_formula &gt;, state_explicit_formula &gt;</type>
      <name>tgba_explicit_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a24df826dd55ad1b8a6fd711c8ab1785e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_number &gt;, state_explicit_number &gt;</type>
      <name>tgba_explicit_number</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad566cf6234b8c875958ed4001f959bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_string &gt;, state_explicit_string &gt;</type>
      <name>sba_explicit_string</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a118b4701825f7a8860cebf5c0a68eee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_formula &gt;, state_explicit_formula &gt;</type>
      <name>sba_explicit_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a7ce8b43567a8c7e16773717dcf683eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_number &gt;, state_explicit_number &gt;</type>
      <name>sba_explicit_number</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a13bc152377363a78e3ab83a43a6be053</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgbakvcomplement.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbakvcomplement_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="tgbasgba_8hh" name="tgbasgba.hh" local="yes" imported="no">tgba/tgbasgba.hh</includes>
    <class kind="class">spot::bdd_ordered</class>
    <class kind="class">spot::tgba_kv_complement</class>
    <namespace>spot</namespace>
    <member kind="typedef">
      <type>std::vector&lt; bdd_ordered &gt;</type>
      <name>acc_list_t</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a4260b69cfc6b42df1b242d141d250acc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgbaproduct.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbaproduct_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="fixpool_8hh" name="fixpool.hh" local="yes" imported="no">misc/fixpool.hh</includes>
    <class kind="class">spot::state_product</class>
    <class kind="class">spot::tgba_product</class>
    <class kind="class">spot::tgba_product_init</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbasafracomplement.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbasafracomplement_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <class kind="class">spot::tgba_safra_complement</class>
    <namespace>spot</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TRANSFORM_TO_TBA</name>
      <anchorfile>tgbasafracomplement_8hh.html</anchorfile>
      <anchor>a58017d8aa524583d5383979e02633c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRANSFORM_TO_TGBA</name>
      <anchorfile>tgbasafracomplement_8hh.html</anchorfile>
      <anchor>a1ddf078b64b59249010fc5aa477af6ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display_safra</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ae6985cd6c82ba766e2e853f5a1e82e24</anchor>
      <arglist>(const tgba_safra_complement *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tgbascc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbascc_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="scc_8hh" name="scc.hh" local="yes" imported="no">tgbaalgos/scc.hh</includes>
    <class kind="class">spot::tgba_scc</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbasgba.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbasgba_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <class kind="class">spot::tgba_sgba_proxy</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbatba.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbatba_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::tgba_tba_proxy</class>
    <class kind="class">spot::tgba_sba_proxy</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>tgbaunion.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>tgbaunion_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <class kind="class">spot::state_union</class>
    <class kind="class">spot::tgba_succ_iterator_union</class>
    <class kind="class">spot::tgba_union</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>wdbacomp.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>wdbacomp_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba *</type>
      <name>wdba_complement</name>
      <anchorfile>group__tgba__on__the__fly__algorithms.html</anchorfile>
      <anchor>ga3d28f3aabd3fc1014482983f48a691e9</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bfssteps.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>bfssteps_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="emptiness_8hh" name="emptiness.hh" local="yes" imported="no">emptiness.hh</includes>
    <class kind="class">spot::bfs_steps</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>cutscc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>cutscc_8hh</filename>
    <includes id="tgba_2public_8hh" name="public.hh" local="yes" imported="no">tgba/public.hh</includes>
    <includes id="scc_8hh" name="scc.hh" local="yes" imported="no">tgbaalgos/scc.hh</includes>
    <class kind="struct">spot::sccs_set</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; sccs_set * &gt; &gt; *</type>
      <name>find_paths</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a7a3b33efec82bd649f01077850ddfc2a</anchor>
      <arglist>(tgba *a, const scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_spanning_paths</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>af2a55d9921bf9eab8f9b410ff0ad0e0d</anchor>
      <arglist>(std::vector&lt; sccs_set * &gt; *paths, scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; tgba * &gt;</type>
      <name>split_tgba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9f710ac23d3a22a3a66244d15de62a3c</anchor>
      <arglist>(tgba *a, const scc_map &amp;m, unsigned split_number)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cycles.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>cycles_8hh</filename>
    <includes id="scc_8hh" name="scc.hh" local="yes" imported="no">scc.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::enumerate_cycles</class>
    <class kind="struct">spot::enumerate_cycles::state_info</class>
    <class kind="struct">spot::enumerate_cycles::dfs_entry</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>degen.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>degen_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>sba *</type>
      <name>degeneralize</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga7bf747ce302af354c18a28799016dc42</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dottydec.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>dottydec_8hh</filename>
    <class kind="class">spot::dotty_decorator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>dupexp.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>dupexp_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_bfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga482c19d4b66ca51b15b1b5a0c51d114d</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_dfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga1068b73c22d281c74dfbcf512c9df0b7</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eltl2tgba_lacim.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>eltl2tgba__lacim_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tgbabddconcrete_8hh" name="tgbabddconcrete.hh" local="yes" imported="no">tgba/tgbabddconcrete.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>eltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gafbf62421b9c1da3df47ea92ade8ecdd4</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>emptiness.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>emptiness_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="emptiness__stats_8hh" name="emptiness_stats.hh" local="yes" imported="no">emptiness_stats.hh</includes>
    <class kind="class">spot::emptiness_check_result</class>
    <class kind="class">spot::emptiness_check</class>
    <class kind="class">spot::emptiness_check_instantiator</class>
    <class kind="struct">spot::tgba_run</class>
    <class kind="struct">spot::tgba_run::step</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga3aa3b6dd9854c94b6aaabafd4a612de2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>tgba_run_to_tgba</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga60bd6401d35428aa22bda3388765099b</anchor>
      <arglist>(const tgba *a, const tgba_run *run)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>emptiness_stats.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>emptiness__stats_8hh</filename>
    <includes id="ltstr_8hh" name="ltstr.hh" local="yes" imported="no">misc/ltstr.hh</includes>
    <class kind="struct">spot::unsigned_statistics</class>
    <class kind="class">spot::unsigned_statistics_copy</class>
    <class kind="class">spot::ec_statistics</class>
    <class kind="class">spot::ars_statistics</class>
    <class kind="class">spot::acss_statistics</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>ce.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>ce_8hh</filename>
    <includes id="status_8hh" name="status.hh" local="yes" imported="no">status.hh</includes>
    <includes id="emptiness_8hh" name="emptiness.hh" local="yes" imported="no">tgbaalgos/emptiness.hh</includes>
    <includes id="emptiness__stats_8hh" name="emptiness_stats.hh" local="yes" imported="no">tgbaalgos/emptiness_stats.hh</includes>
    <class kind="class">spot::couvreur99_check_result</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>explscc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>explscc_8hh</filename>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="sccstack_8hh" name="sccstack.hh" local="yes" imported="no">sccstack.hh</includes>
    <class kind="class">spot::explicit_connected_component</class>
    <class kind="class">spot::connected_component_hash_set</class>
    <class kind="class">spot::explicit_connected_component_factory</class>
    <class kind="class">spot::connected_component_hash_set_factory</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>gtec.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>gtec_8hh</filename>
    <includes id="status_8hh" name="status.hh" local="yes" imported="no">status.hh</includes>
    <includes id="emptiness_8hh" name="emptiness.hh" local="yes" imported="no">tgbaalgos/emptiness.hh</includes>
    <includes id="emptiness__stats_8hh" name="emptiness_stats.hh" local="yes" imported="no">tgbaalgos/emptiness_stats.hh</includes>
    <class kind="class">spot::couvreur99_check</class>
    <class kind="class">spot::couvreur99_check_shy</class>
    <class kind="struct">spot::couvreur99_check_shy::successor</class>
    <class kind="struct">spot::couvreur99_check_shy::todo_item</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>couvreur99</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga9bb3670ecff03df6d792c8a315c3e75c</anchor>
      <arglist>(const tgba *a, option_map options=option_map(), const numbered_state_heap_factory *nshf=numbered_state_heap_hash_map_factory::instance())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nsheap.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>nsheap_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="yes" imported="no">tgba/state.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <class kind="class">spot::numbered_state_heap_const_iterator</class>
    <class kind="class">spot::numbered_state_heap</class>
    <class kind="class">spot::numbered_state_heap_factory</class>
    <class kind="class">spot::numbered_state_heap_hash_map</class>
    <class kind="class">spot::numbered_state_heap_hash_map_factory</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>sccstack.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>sccstack_8hh</filename>
    <includes id="state_8hh" name="state.hh" local="no" imported="no">tgba/state.hh</includes>
    <class kind="class">spot::scc_stack</class>
    <class kind="struct">spot::scc_stack::connected_component</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>status.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>status_8hh</filename>
    <includes id="sccstack_8hh" name="sccstack.hh" local="yes" imported="no">sccstack.hh</includes>
    <includes id="nsheap_8hh" name="nsheap.hh" local="yes" imported="no">nsheap.hh</includes>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <class kind="class">spot::couvreur99_check_status</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>gv04.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>gv04_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_gv04_check</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae45e3a4c2ba4b8c0609a2afca67eabe8</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>isdet.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>isdet_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>unsigned</type>
      <name>count_nondet_states</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gacedab500bd933852465ef9bc3a094f70</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_deterministic</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafe8765d12152aff78507476c5a769131</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>isweakscc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>isweakscc_8hh</filename>
    <includes id="scc_8hh" name="scc.hh" local="yes" imported="no">scc.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_weak_scc</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga669ef0d3178251f3e1ba66ef5aebaa66</anchor>
      <arglist>(scc_map &amp;map, unsigned scc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lbtt.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>lbtt_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>lbtt_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga955eb1141519477fda8d09fae2a9cb4a</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>lbtt_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gac79329b001b40e290a99168897221290</anchor>
      <arglist>(std::istream &amp;is, std::string &amp;error, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltl2taa.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>ltl2taa_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="taatgba_8hh" name="taatgba.hh" local="yes" imported="no">tgba/taatgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>taa_tgba *</type>
      <name>ltl_to_taa</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gab63f738c24846842339e8c12fd5eb777</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool refined_rules=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltl2tgba_fm.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>ltl2tgba__fm_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <includes id="apcollect_8hh" name="apcollect.hh" local="yes" imported="no">ltlvisit/apcollect.hh</includes>
    <includes id="simplify_8hh" name="simplify.hh" local="yes" imported="no">ltlvisit/simplify.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_explicit_formula *</type>
      <name>ltl_to_tgba_fm</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga9e12e74a9e66d7ae2b96dfb1e11655b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool exprop=false, bool symb_merge=true, bool branching_postponement=false, bool fair_loop_approx=false, const ltl::atomic_prop_set *unobs=0, ltl::ltl_simplifier *simplifier=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltl2tgba_lacim.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>ltl2tgba__lacim_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tgbabddconcrete_8hh" name="tgbabddconcrete.hh" local="yes" imported="no">tgba/tgbabddconcrete.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>ltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga911db84b8e05185bb50b5eda55efe6b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>magic.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>magic_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga392d772bf851002cdda0ca34615aa54b</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gadae7938a96420813bcdabb1b31295294</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga054c1948b6c5076350e44a85ad580403</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>neverclaim.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>neverclaim_8hh</filename>
    <includes id="formula_8hh" name="formula.hh" local="yes" imported="no">ltlast/formula.hh</includes>
    <includes id="tgbatba_8hh" name="tgbatba.hh" local="yes" imported="no">tgba/tgbatba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>never_claim_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga989d3c71e821143e5b33d9f310784d64</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, const ltl::formula *f=0, bool comments=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>postproc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>postproc_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <class kind="class">spot::postprocessor</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>powerset.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>powerset_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <class kind="struct">spot::power_map</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafa490c8262811858828ad363760d911d</anchor>
      <arglist>(const tgba *aut, power_map &amp;pm)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga42b9bff1af663f032af02cc8007db6d6</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>projrun.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>projrun_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_run *</type>
      <name>project_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga1e0b8aeb36e622ac26a6c540ac17fddc</anchor>
      <arglist>(const tgba *a_run, const tgba *a_proj, const tgba_run *run)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomgraph.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>randomgraph_8hh</filename>
    <includes id="apcollect_8hh" name="apcollect.hh" local="yes" imported="no">ltlvisit/apcollect.hh</includes>
    <includes id="defaultenv_8hh" name="defaultenv.hh" local="yes" imported="no">ltlenv/defaultenv.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba *</type>
      <name>random_graph</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gadcf8ba83bd92b5cbf8f5b8f1083a793b</anchor>
      <arglist>(int n, float d, const ltl::atomic_prop_set *ap, bdd_dict *dict, int n_acc=0, float a=0.1, float t=0.5, ltl::environment *env=&amp;ltl::default_environment::instance())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reducerun.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>reducerun_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba_run *</type>
      <name>reduce_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gabc4ad10830cd80a3237415d28adeee1b</anchor>
      <arglist>(const tgba *a, const tgba_run *org)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reductgba_sim.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>reductgba__sim_8hh</filename>
    <namespace>spot</namespace>
    <member kind="enumeration">
      <name>reduce_tgba_options</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5bd08ab74b3ab10a27beceaa04d9217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa28ab8e63b3f476424eec1d49fb19b1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa6ef94353974a1119b8c3265eb0bcbe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa7b2d15a717f241527e25e1266370033e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa040be3fac90f0ddb426644a52418d7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa21c74a793193bfe95e63b43ef1b59350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Scc</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa685daa8530de270e1588cdc2c178a2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa81a405e18e9bbd601c4183e1c7ff49e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>reduc_tgba_sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gaa6ffda0ae1ab4b30ea4f4f8303f36929</anchor>
      <arglist>(const tgba *a, int opt=Reduce_All)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>replayrun.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>replayrun_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bool</type>
      <name>replay_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gae2bf747c24d2fb1a06f1a033f67fe6dc</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run, bool debug=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rundotdec.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>rundotdec_8hh</filename>
    <includes id="dottydec_8hh" name="dottydec.hh" local="yes" imported="no">dottydec.hh</includes>
    <includes id="emptiness_8hh" name="emptiness.hh" local="yes" imported="no">emptiness.hh</includes>
    <class kind="class">spot::tgba_run_dotty_decorator</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="file">
    <name>safety.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>safety_8hh</filename>
    <includes id="scc_8hh" name="scc.hh" local="yes" imported="no">scc.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>bool</type>
      <name>is_guarantee_automaton</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a8a3357941b87b564d5db84960ac97f24</anchor>
      <arglist>(const tgba *aut, const scc_map *sm=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_safety_mwdba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a674e27c0b7e007eede14c4337b67581c</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>scc_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <includes id="hash_8hh" name="hash.hh" local="yes" imported="no">misc/hash.hh</includes>
    <includes id="bddlt_8hh" name="bddlt.hh" local="yes" imported="no">misc/bddlt.hh</includes>
    <class kind="struct">spot::scc_stats</class>
    <class kind="class">spot::scc_map</class>
    <class kind="struct">spot::scc_map::scc</class>
    <namespace>spot</namespace>
    <member kind="function">
      <type>scc_stats</type>
      <name>build_scc_stats</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac57eb2b36c82228391e91bfdfd5e896e</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>scc_stats</type>
      <name>build_scc_stats</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3a3040faf1273245a9e256b406d2fcca</anchor>
      <arglist>(const scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_scc_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a773a06917359e059e86d341d62ecbb64</anchor>
      <arglist>(const tgba *a, std::ostream &amp;out, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_scc_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac55b8611e3b6da1437248c2c6d0d064a</anchor>
      <arglist>(const scc_map &amp;m, std::ostream &amp;out, bool verbose=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sccfilter.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>sccfilter_8hh</filename>
    <includes id="tgba_8hh" name="tgba.hh" local="yes" imported="no">tgba/tgba.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba *</type>
      <name>scc_filter</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a0eb62dcb2baeb2717a69966b5f7607d9</anchor>
      <arglist>(const tgba *aut, bool remove_all_useless=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>se05.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>se05_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga8c176368673a0c009dd3e934d57fb492</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae822266082cdb9772ce31388a6538cb9</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>se05</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga23a00d19bf7613222e6e41833e515c00</anchor>
      <arglist>(const tgba *a, option_map o)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simulation.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>simulation_8hh</filename>
    <namespace>spot</namespace>
    <member kind="function">
      <type>tgba *</type>
      <name>simulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gac2172a3be49892bccb7abcf14669c129</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>cosimulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5db456bdf40b6425d2a3584ab05bac5c</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>iterated_simulations</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4cd60f5abe60e3da4a1b788d6e9975b1</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stripacc.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>stripacc_8hh</filename>
    <includes id="tgbaexplicit_8hh" name="tgbaexplicit.hh" local="yes" imported="no">tgba/tgbaexplicit.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>strip_acceptance</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga27bc2c8fa49e5a2531b1b92dc6ed7020</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tau03.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tau03_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga159e81f9b91f99b2a749185f47924d99</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tau03opt.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>tau03opt_8hh</filename>
    <includes id="optionmap_8hh" name="optionmap.hh" local="yes" imported="no">misc/optionmap.hh</includes>
    <namespace>spot</namespace>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_opt_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga68f7245733f5fe5a86e6dd416d7746f1</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>weight.hh</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>weight_8hh</filename>
    <class kind="class">spot::weight</class>
    <namespace>spot</namespace>
  </compound>
  <compound kind="group">
    <name>ltl</name>
    <title>LTL formulae</title>
    <filename>group__ltl.html</filename>
    <subgroup>ltl_essential</subgroup>
    <subgroup>ltl_ast</subgroup>
    <subgroup>ltl_environment</subgroup>
    <subgroup>ltl_algorithm</subgroup>
  </compound>
  <compound kind="group">
    <name>saba</name>
    <title>SABA (State-based Alternating Büchi Automata)</title>
    <filename>group__saba.html</filename>
    <subgroup>saba_essentials</subgroup>
    <class kind="class">spot::saba_complement_tgba</class>
  </compound>
  <compound kind="group">
    <name>ta</name>
    <title>TA (Testing Automata)</title>
    <filename>group__ta.html</filename>
    <subgroup>ta_essentials</subgroup>
    <subgroup>ta_representation</subgroup>
    <subgroup>ta_algorithms</subgroup>
  </compound>
  <compound kind="group">
    <name>tgba</name>
    <title>TGBA (Transition-based Generalized Büchi Automata)</title>
    <filename>group__tgba.html</filename>
    <subgroup>kripke</subgroup>
    <subgroup>tgba_essentials</subgroup>
    <subgroup>tgba_representation</subgroup>
    <subgroup>tgba_algorithms</subgroup>
    <class kind="class">spot::future_conditions_collector</class>
    <class kind="class">spot::tgba_scc</class>
  </compound>
  <compound kind="group">
    <name>emptiness_check_ssp</name>
    <title>Emptiness-check algorithms for SSP</title>
    <filename>group__emptiness__check__ssp.html</filename>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga41573dafc02e8da2283670fa7aefebcf</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga9e84d9fcba32903d98fc0a0ebdc73ac1</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga4f5db797b2fc8a4b7617a76519114800</anchor>
      <arglist>(const tgba *ssp_automata, bool stack_inclusion=true, bool double_inclusion=false, bool reversed_double_inclusion=false, bool no_decomp=false)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ltl_io</name>
    <title>Input/Output of LTL formulae</title>
    <filename>group__ltl__io.html</filename>
    <class kind="class">spot::ltl::ltl_file</class>
    <class kind="class">spot::ltl::random_formula</class>
    <class kind="class">spot::ltl::random_ltl</class>
    <class kind="class">spot::ltl::random_boolean</class>
    <class kind="class">spot::ltl::random_sere</class>
    <class kind="class">spot::ltl::random_psl</class>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>spair</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf0c33c18fcffd60a2c676bdc6b5214de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; eltlyy::location, spair &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga502251e9b247bf1f614b151254048b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga017167786b87df9a15ec651897ed5cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ltlyy::location, std::string &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9bf19c38b4ae7d74e6a9633ed360c147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9eb0f7867a212f92b0fd64a6ac5a12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_file</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaa412b16e3eaa3d209baf83cb6e697161</anchor>
      <arglist>(const std::string &amp;filename, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf7928088c7a4d788cbef32258bb4875e</anchor>
      <arglist>(const std::string &amp;eltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga12db416891d2b540640c434afd0e5859</anchor>
      <arglist>(std::ostream &amp;os, parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga38985ad6b8ca53a130115aff8a055036</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_boolean</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga996c2f45174a66ee4ab85958900a1417</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_lbt</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga127ae53eca0defd994401f3919e2a0d2</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_sere</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga6a393a2f2a36d1f4aad872cb12ae76bf</anchor>
      <arglist>(const std::string &amp;sere_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga5535f3e1304089c8c6e13f564920ce00</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;input_string, const parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fix_utf8_locations</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga8fb520dd0b7b2ca3d828ea6cdfaf49b6</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga7e27d31b2209954c1d57d3b8b5224473</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaaf316635f1320fa38885fa89e23e2098</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga49b892ff2e4d9aec61c271959460ad12</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gae7e461087003b093571f87640dab9045</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0f6fa636f033da650016c836d6c94215</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga41c884625ab680e8b8e3f2c60d58fd0e</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga839a34e0b8a9261d039177a3546f5501</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga2cd5cc7892c33dfbedafe28e102f0834</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0a8dd6d9bb385a69fabea697df9be925</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga62c230f1cb3170370c25d8bffb4ea141</anchor>
      <arglist>(const formula *f, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga91c4e60cf307d560694b163676ec2c6a</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gab337644a8e96528226e22cf166dc0977</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>kripke</name>
    <title>Kripke Structures</title>
    <filename>group__kripke.html</filename>
    <class kind="class">spot::fair_kripke_succ_iterator</class>
    <class kind="class">spot::fair_kripke</class>
    <class kind="class">spot::kripke_succ_iterator</class>
    <class kind="class">spot::kripke</class>
  </compound>
  <compound kind="group">
    <name>ltl_essential</name>
    <title>Essential LTL types</title>
    <filename>group__ltl__essential.html</filename>
    <class kind="class">spot::ltl::formula</class>
    <class kind="struct">spot::ltl::visitor</class>
    <class kind="class">spot::ltl::environment</class>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga4cbd1bf9c7d993d9fe093578b30712a6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga7dfba082e4a6aca346befcc46f87e358</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ltl_ast</name>
    <title>LTL Abstract Syntax Tree</title>
    <filename>group__ltl__ast.html</filename>
    <class kind="class">spot::ltl::atomic_prop</class>
    <class kind="class">spot::ltl::binop</class>
    <class kind="class">spot::ltl::bunop</class>
    <class kind="class">spot::ltl::constant</class>
    <class kind="class">spot::ltl::formula</class>
    <class kind="class">spot::ltl::multop</class>
    <class kind="class">spot::ltl::ref_formula</class>
    <class kind="class">spot::ltl::unop</class>
  </compound>
  <compound kind="group">
    <name>ltl_environment</name>
    <title>LTL environments</title>
    <filename>group__ltl__environment.html</filename>
    <class kind="class">spot::ltl::declarative_environment</class>
    <class kind="class">spot::ltl::default_environment</class>
  </compound>
  <compound kind="group">
    <name>ltl_algorithm</name>
    <title>Algorithms for LTL formulae</title>
    <filename>group__ltl__algorithm.html</filename>
    <subgroup>ltl_io</subgroup>
    <subgroup>ltl_visitor</subgroup>
    <subgroup>ltl_rewriting</subgroup>
    <subgroup>ltl_misc</subgroup>
  </compound>
  <compound kind="group">
    <name>ltl_visitor</name>
    <title>Derivable visitors</title>
    <filename>group__ltl__visitor.html</filename>
    <class kind="class">spot::ltl::clone_visitor</class>
    <class kind="class">spot::ltl::unabbreviate_logic_visitor</class>
    <class kind="class">spot::ltl::postfix_visitor</class>
    <class kind="class">spot::ltl::simplify_f_g_visitor</class>
    <class kind="class">spot::ltl::unabbreviate_ltl_visitor</class>
  </compound>
  <compound kind="group">
    <name>ltl_rewriting</name>
    <title>Rewriting LTL formulae</title>
    <filename>group__ltl__rewriting.html</filename>
    <class kind="class">spot::ltl::ltl_simplifier</class>
    <member kind="enumeration">
      <name>reduce_options</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>gac9e66395d0e9cb870fa7b1ca208b70ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caabff3607cc02f12d6756d0244a8f5464a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Basics</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caab83ef042ab620af2f258a817e95f8f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Syntactic_Implications</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22d75bbadb5b030981574ae49668ad94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Eventuality_And_Universality</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caaabb627af73b5817a542506be482f396d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22286d57705e7511f13a75c05ac0a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks_Stronger</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa0721d15d048b11cfe234f14850dbc9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa1629bc689540d42e2f86eea77a6cd275</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_logic</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga802942a9f38ff14be3466c6a00705c9e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>mark_concat_ops</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga32279d715efca917b5ac55e1262a6a29</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>negative_normal_form</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga493ea666b2b7bea9b18d5ee9db2969b2</anchor>
      <arglist>(const formula *f, bool negated=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>reduce</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga75beb5d36830e9a795e96a3a64f032c1</anchor>
      <arglist>(const formula *f, int opt=Reduce_All)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>relabel</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga27c4d86c1432210a1e02a1fcd3fec2c3</anchor>
      <arglist>(const formula *f, relabeling_style style)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>simplify_f_g</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga900c80d1bc18bc999de94de19aafa6ad</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_wm</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga133f7bfb31a5e4a1e98be27edad69217</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ltl_misc</name>
    <title>Miscellaneous algorithms for LTL formulae</title>
    <filename>group__ltl__misc.html</filename>
    <member kind="typedef">
      <type>std::set&lt; const atomic_prop *, formula_ptr_less_than &gt;</type>
      <name>atomic_prop_set</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga8347f76c4cd9c56970ba55c8fb40ab1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>atomic_prop_set *</type>
      <name>atomic_prop_collect</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga335fb11ef18d07a729b03ee76719ead4</anchor>
      <arglist>(const formula *f, atomic_prop_set *s=0)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>atomic_prop_collect_as_bdd</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga34d27c315e9f6a09e7909066ab0f081f</anchor>
      <arglist>(const formula *f, const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>gabf324b4e946522d1b4caf3ce003ec903</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length_boolone</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga72b56983a73048f0a303323fd4463fbf</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga3210a9b433640efe1ef74e0da6c678e5</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga10c79e8a8c5b58fa77cbb6dab5857083</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>misc_tools</name>
    <title>Miscellaneous helper algorithms</title>
    <filename>group__misc__tools.html</filename>
    <subgroup>hash_funcs</subgroup>
    <subgroup>random</subgroup>
    <class kind="class">spot::bdd_allocator</class>
    <class kind="struct">spot::bdd_less_than</class>
    <class kind="struct">spot::bdd_hash</class>
    <class kind="class">spot::free_list</class>
    <class kind="struct">spot::char_ptr_less_than</class>
    <class kind="class">spot::minato_isop</class>
    <class kind="class">spot::loopless_modular_mixed_radix_gray_code</class>
    <class kind="class">spot::option_map</class>
    <class kind="struct">spot::time_info</class>
    <class kind="class">spot::timer</class>
    <class kind="class">spot::timer_map</class>
    <member kind="function">
      <type>bool</type>
      <name>is_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaae6fadac6a2f91d7b8e27b3eb6ad647e</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>quote_unless_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga4731f21b7b43332b5c7b5bc63c6d67e6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga84a8b196e2ec651f0fd039c70c7ff6cb</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad4b0b4fae7b93db7d704a5fef6e021c6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga3f3dad2e940fa844eeccda24e9386608</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga5253b7b9fd60f3285091b39a1f1b815d</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaed78e6934b190995ba5a162ad0e76560</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga86ac44d535ef8f28e5d81a2edf907065</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input, std::vector&lt; unsigned int &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gade72f3d754ef89b594db989893ee3e7b</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;array, std::vector&lt; int &gt; &amp;output, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; *</type>
      <name>int_array_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gae8556060f7963410dd8c52d2426d7269</anchor>
      <arglist>(const int *array, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga6c161d70b36c5637b6511f2192f2d9bf</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; *array, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga72a6bb80b592f562634a6bd8aedd9ff6</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad595c02553de6187297d09d2b47c995c</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga85c83eb1d18703782d129dbe4a518fca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hash_funcs</name>
    <title>Hashing functions</title>
    <filename>group__hash__funcs.html</filename>
    <class kind="struct">spot::ltl::formula_ptr_hash</class>
    <class kind="struct">spot::ptr_hash</class>
    <class kind="struct">spot::identity_hash</class>
    <class kind="struct">spot::saba_state_ptr_hash</class>
    <class kind="struct">spot::saba_state_shared_ptr_hash</class>
    <class kind="struct">spot::state_ptr_hash</class>
    <class kind="struct">spot::state_shared_ptr_hash</class>
    <member kind="function">
      <type>size_t</type>
      <name>wang32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga9422ff0c16df957910dd4a0275d9f726</anchor>
      <arglist>(size_t key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>knuth32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>gaea94dbea4a286b0bde253baf07e7a56e</anchor>
      <arglist>(size_t key)</arglist>
    </member>
    <member kind="typedef">
      <type>Sgi::hash&lt; std::string &gt;</type>
      <name>string_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga33960cd9c4aa7bb175efe1debb7534b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>random</name>
    <title>Random functions</title>
    <filename>group__random.html</filename>
    <class kind="class">spot::barand</class>
    <member kind="function">
      <type>void</type>
      <name>srand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga539812ab355a561fee1ecbfe60b276e4</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga86ce713fe60de9af440a7331de74aa1a</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>gafe8da996f40caa7d188f6b408ae62904</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>drand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga42801cd81368df5c1c61aa1626e299ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga978e1c6fb8f447274a05ddd3f87ce58b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bmrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga0130217a19e5156f796ab774dca4b08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga816b558a7c64daca3a2a018704377dac</anchor>
      <arglist>(double p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_io</name>
    <title>Input/Output of TGBA</title>
    <filename>group__tgba__io.html</filename>
    <subgroup>tgba_dotty</subgroup>
    <member kind="typedef">
      <type>std::pair&lt; neverclaimyy::location, std::string &gt;</type>
      <name>neverclaim_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga3a14d5793c8decc8de5c19f640c721bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; neverclaim_parse_error &gt;</type>
      <name>neverclaim_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga15242b071d7c485804548ff2ee41b3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; tgbayy::location, std::string &gt;</type>
      <name>tgba_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadcc2cd9b328a5c3f63918c577f86f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; tgba_parse_error &gt;</type>
      <name>tgba_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga76b22bb081d5c36378098caa5bf58081</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga297ff6967b82ecb1de793bce48701379</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable_renumbered</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga65e6d2507fc1692b1405a26b7306379f</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>neverclaim_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadc0e10bdf5a88fc8ee6fb83952f537e0</anchor>
      <arglist>(const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_neverclaim_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga596bbd8f0703340f2b556e43dfa7995e</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga91590a0cf2e914df96d62e3509907cb4</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, bool assume_sba=false, dotty_decorator *dd=0)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>lbtt_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga955eb1141519477fda8d09fae2a9cb4a</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>lbtt_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gac79329b001b40e290a99168897221290</anchor>
      <arglist>(std::istream &amp;is, std::string &amp;error, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance())</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>never_claim_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga989d3c71e821143e5b33d9f310784d64</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, const ltl::formula *f=0, bool comments=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>tgba_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga5c7f56a5941eb2380676c4ff6706e1c2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>tgba_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gab07f6359e41046dd8f1452ce3665e152</anchor>
      <arglist>(const std::string &amp;filename, tgba_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_tgba_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga95b48c3bd896478c7e22b0d49c39d89c</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, tgba_parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>saba_essentials</name>
    <title>Essential SABA types</title>
    <filename>group__saba__essentials.html</filename>
    <class kind="class">spot::explicit_state_conjunction</class>
    <class kind="class">spot::saba</class>
    <class kind="class">spot::saba_state</class>
    <class kind="struct">spot::saba_state_ptr_less_than</class>
    <class kind="struct">spot::saba_state_ptr_equal</class>
    <class kind="struct">spot::saba_state_ptr_hash</class>
    <class kind="struct">spot::saba_state_shared_ptr_less_than</class>
    <class kind="struct">spot::saba_state_shared_ptr_equal</class>
    <class kind="struct">spot::saba_state_shared_ptr_hash</class>
    <class kind="class">spot::saba_state_conjunction</class>
    <class kind="class">spot::saba_succ_iterator</class>
  </compound>
  <compound kind="group">
    <name>ta_essentials</name>
    <title>Essential TA types</title>
    <filename>group__ta__essentials.html</filename>
    <class kind="class">spot::ta</class>
    <class kind="class">spot::ta_succ_iterator</class>
    <class kind="class">spot::tgta</class>
  </compound>
  <compound kind="group">
    <name>ta_representation</name>
    <title>TA representations</title>
    <filename>group__ta__representation.html</filename>
    <class kind="class">spot::ta_explicit</class>
    <class kind="class">spot::state_ta_explicit</class>
    <class kind="class">spot::tgta_explicit</class>
  </compound>
  <compound kind="group">
    <name>ta_algorithms</name>
    <title>TA algorithms</title>
    <filename>group__ta__algorithms.html</filename>
    <subgroup>ta_io</subgroup>
    <subgroup>tgba_ta</subgroup>
    <subgroup>ta_generic</subgroup>
    <subgroup>ta_reduction</subgroup>
    <subgroup>ta_misc</subgroup>
    <subgroup>ta_emptiness_check</subgroup>
  </compound>
  <compound kind="group">
    <name>ta_io</name>
    <title>Input/Output of TA</title>
    <filename>group__ta__io.html</filename>
  </compound>
  <compound kind="group">
    <name>tgba_ta</name>
    <title>Transforming TGBA into TA</title>
    <filename>group__tgba__ta.html</filename>
    <member kind="function">
      <type>ta_explicit *</type>
      <name>tgba_to_ta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>ga5d3967eb107ea9bbb5f71b73f8dad2ef</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set, bool degeneralized=true, bool artificial_initial_state_mode=true, bool single_pass_emptiness_check=false, bool artificial_livelock_state_mode=false)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>tgba_to_tgta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>gabe1fa2db8c3bd35f340ad3a46654959a</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ta_generic</name>
    <title>Algorithm patterns</title>
    <filename>group__ta__generic.html</filename>
    <class kind="class">spot::ta_reachable_iterator</class>
    <class kind="class">spot::ta_reachable_iterator_depth_first</class>
    <class kind="class">spot::ta_reachable_iterator_breadth_first</class>
  </compound>
  <compound kind="group">
    <name>ta_reduction</name>
    <title>TA simplifications</title>
    <filename>group__ta__reduction.html</filename>
    <member kind="function">
      <type>ta *</type>
      <name>minimize_ta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>gab6d913bd6fddb9c5c1919c97373bd6bd</anchor>
      <arglist>(const ta *ta_)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>minimize_tgta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>ga333ff9524f1e1a2988ac318f81dfae74</anchor>
      <arglist>(const tgta_explicit *tgta_)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ta_misc</name>
    <title>Miscellaneous algorithms on TA</title>
    <filename>group__ta__misc.html</filename>
    <class kind="struct">spot::ta_statistics</class>
    <member kind="function">
      <type>ta_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__ta__misc.html</anchorfile>
      <anchor>ga6f9e7ec5c5d7b706b0c5184c4d3dbe3c</anchor>
      <arglist>(const ta *t)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ta_emptiness_check</name>
    <title>Emptiness-checks</title>
    <filename>group__ta__emptiness__check.html</filename>
    <subgroup>ta_emptiness_check_algorithms</subgroup>
    <class kind="class">spot::state_ta_product</class>
    <class kind="class">spot::ta_product</class>
    <class kind="class">spot::ta_check</class>
  </compound>
  <compound kind="group">
    <name>ta_emptiness_check_algorithms</name>
    <title>Emptiness-check algorithms</title>
    <filename>group__ta__emptiness__check__algorithms.html</filename>
  </compound>
  <compound kind="group">
    <name>tgba_essentials</name>
    <title>Essential TGBA types</title>
    <filename>group__tgba__essentials.html</filename>
    <class kind="class">spot::bdd_dict</class>
    <class kind="class">spot::sba</class>
    <class kind="class">spot::state</class>
    <class kind="struct">spot::state_ptr_less_than</class>
    <class kind="struct">spot::state_ptr_equal</class>
    <class kind="struct">spot::state_ptr_hash</class>
    <class kind="struct">spot::state_shared_ptr_less_than</class>
    <class kind="struct">spot::state_shared_ptr_equal</class>
    <class kind="struct">spot::state_shared_ptr_hash</class>
    <class kind="class">spot::tgba_succ_iterator</class>
    <class kind="class">spot::tgba</class>
  </compound>
  <compound kind="group">
    <name>tgba_representation</name>
    <title>TGBA representations</title>
    <filename>group__tgba__representation.html</filename>
    <class kind="class">spot::state_bdd</class>
    <class kind="class">spot::tgba_succ_iterator_concrete</class>
    <class kind="class">spot::tgba_bdd_concrete</class>
    <class kind="class">spot::state_explicit</class>
    <class kind="class">spot::state_explicit_number</class>
    <class kind="class">spot::state_explicit_string</class>
    <class kind="class">spot::state_explicit_formula</class>
    <class kind="class">spot::tgba_explicit_succ_iterator</class>
    <class kind="class">spot::explicit_graph</class>
    <class kind="class">spot::explicit_conf</class>
  </compound>
  <compound kind="group">
    <name>tgba_algorithms</name>
    <title>TGBA algorithms</title>
    <filename>group__tgba__algorithms.html</filename>
    <subgroup>tgba_on_the_fly_algorithms</subgroup>
    <subgroup>tgba_io</subgroup>
    <subgroup>tgba_ltl</subgroup>
    <subgroup>tgba_generic</subgroup>
    <subgroup>tgba_reduction</subgroup>
    <subgroup>tgba_misc</subgroup>
    <subgroup>emptiness_check</subgroup>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>product</name>
      <anchorfile>group__tgba__algorithms.html</anchorfile>
      <anchor>ga9a8f2973e4358cf18aa162634b61ab51</anchor>
      <arglist>(const tgba_bdd_concrete *left, const tgba_bdd_concrete *right)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_on_the_fly_algorithms</name>
    <title>TGBA on-the-fly algorithms</title>
    <filename>group__tgba__on__the__fly__algorithms.html</filename>
    <class kind="class">spot::tgba_kv_complement</class>
    <class kind="class">spot::state_product</class>
    <class kind="class">spot::tgba_safra_complement</class>
    <class kind="class">spot::tgba_sgba_proxy</class>
    <class kind="class">spot::tgba_tba_proxy</class>
    <class kind="class">spot::tgba_sba_proxy</class>
    <class kind="class">spot::state_union</class>
    <member kind="function">
      <type>tgba *</type>
      <name>wdba_complement</name>
      <anchorfile>group__tgba__on__the__fly__algorithms.html</anchorfile>
      <anchor>ga3d28f3aabd3fc1014482983f48a691e9</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_ltl</name>
    <title>Translating LTL formulae into TGBA</title>
    <filename>group__tgba__ltl.html</filename>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>eltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gafbf62421b9c1da3df47ea92ade8ecdd4</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>taa_tgba *</type>
      <name>ltl_to_taa</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gab63f738c24846842339e8c12fd5eb777</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool refined_rules=false)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_formula *</type>
      <name>ltl_to_tgba_fm</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga9e12e74a9e66d7ae2b96dfb1e11655b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool exprop=false, bool symb_merge=true, bool branching_postponement=false, bool fair_loop_approx=false, const ltl::atomic_prop_set *unobs=0, ltl::ltl_simplifier *simplifier=0)</arglist>
    </member>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>ltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga911db84b8e05185bb50b5eda55efe6b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_generic</name>
    <title>Algorithm patterns</title>
    <filename>group__tgba__generic.html</filename>
    <class kind="class">spot::tgba_reachable_iterator</class>
    <class kind="class">spot::tgba_reachable_iterator_depth_first</class>
    <class kind="class">spot::tgba_reachable_iterator_breadth_first</class>
  </compound>
  <compound kind="group">
    <name>tgba_reduction</name>
    <title>TGBA simplifications</title>
    <filename>group__tgba__reduction.html</filename>
    <class kind="class">spot::postprocessor</class>
    <member kind="enumeration">
      <name>reduce_tgba_options</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5bd08ab74b3ab10a27beceaa04d9217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa28ab8e63b3f476424eec1d49fb19b1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa6ef94353974a1119b8c3265eb0bcbe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa7b2d15a717f241527e25e1266370033e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa040be3fac90f0ddb426644a52418d7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa21c74a793193bfe95e63b43ef1b59350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Scc</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa685daa8530de270e1588cdc2c178a2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa81a405e18e9bbd601c4183e1c7ff49e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_monitor</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga1ae7d44542608b4635f0dc05556d3064</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_wdba</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga871114e0c974638ee12deaa87e98f56b</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>minimize_obligation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4245a82c2be0713e20af9b217ad7b0a7</anchor>
      <arglist>(const tgba *aut_f, const ltl::formula *f=0, const tgba *aut_neg_f=0, bool reject_bigger=false)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>reduc_tgba_sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gaa6ffda0ae1ab4b30ea4f4f8303f36929</anchor>
      <arglist>(const tgba *a, int opt=Reduce_All)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>simulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gac2172a3be49892bccb7abcf14669c129</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>cosimulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5db456bdf40b6425d2a3584ab05bac5c</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>iterated_simulations</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4cd60f5abe60e3da4a1b788d6e9975b1</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_misc</name>
    <title>Miscellaneous algorithms on TGBA</title>
    <filename>group__tgba__misc.html</filename>
    <class kind="class">spot::bfs_steps</class>
    <class kind="struct">spot::tgba_statistics</class>
    <class kind="struct">spot::tgba_sub_statistics</class>
    <class kind="class">spot::printable_formula</class>
    <class kind="class">spot::stat_printer</class>
    <member kind="function">
      <type>sba *</type>
      <name>degeneralize</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga7bf747ce302af354c18a28799016dc42</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_bfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga482c19d4b66ca51b15b1b5a0c51d114d</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_dfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga1068b73c22d281c74dfbcf512c9df0b7</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>count_nondet_states</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gacedab500bd933852465ef9bc3a094f70</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_deterministic</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafe8765d12152aff78507476c5a769131</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_weak_scc</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga669ef0d3178251f3e1ba66ef5aebaa66</anchor>
      <arglist>(scc_map &amp;map, unsigned scc)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>random_graph</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gadcf8ba83bd92b5cbf8f5b8f1083a793b</anchor>
      <arglist>(int n, float d, const ltl::atomic_prop_set *ap, bdd_dict *dict, int n_acc=0, float a=0.1, float t=0.5, ltl::environment *env=&amp;ltl::default_environment::instance())</arglist>
    </member>
    <member kind="function">
      <type>tgba_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaeeb949ca5fa52c1e292e0a7732ef46c4</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>tgba_sub_statistics</type>
      <name>sub_stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaec71c3349daead65b683e5ba99b893cf</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>strip_acceptance</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga27bc2c8fa49e5a2531b1b92dc6ed7020</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafa490c8262811858828ad363760d911d</anchor>
      <arglist>(const tgba *aut, power_map &amp;pm)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga42b9bff1af663f032af02cc8007db6d6</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_dotty</name>
    <title>Decorating the dot output</title>
    <filename>group__tgba__dotty.html</filename>
    <class kind="class">spot::dotty_decorator</class>
    <class kind="class">spot::tgba_run_dotty_decorator</class>
  </compound>
  <compound kind="group">
    <name>emptiness_check</name>
    <title>Emptiness-checks</title>
    <filename>group__emptiness__check.html</filename>
    <subgroup>emptiness_check_ssp</subgroup>
    <subgroup>emptiness_check_algorithms</subgroup>
    <subgroup>tgba_run</subgroup>
    <subgroup>emptiness_check_stats</subgroup>
    <class kind="class">spot::emptiness_check_result</class>
    <class kind="class">spot::emptiness_check</class>
    <class kind="class">spot::emptiness_check_instantiator</class>
  </compound>
  <compound kind="group">
    <name>emptiness_check_algorithms</name>
    <title>Emptiness-check algorithms</title>
    <filename>group__emptiness__check__algorithms.html</filename>
    <class kind="class">spot::couvreur99_check</class>
    <class kind="class">spot::couvreur99_check_shy</class>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>couvreur99</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga9bb3670ecff03df6d792c8a315c3e75c</anchor>
      <arglist>(const tgba *a, option_map options=option_map(), const numbered_state_heap_factory *nshf=numbered_state_heap_hash_map_factory::instance())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_gv04_check</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae45e3a4c2ba4b8c0609a2afca67eabe8</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga392d772bf851002cdda0ca34615aa54b</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gadae7938a96420813bcdabb1b31295294</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga054c1948b6c5076350e44a85ad580403</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga8c176368673a0c009dd3e934d57fb492</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae822266082cdb9772ce31388a6538cb9</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>se05</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga23a00d19bf7613222e6e41833e515c00</anchor>
      <arglist>(const tgba *a, option_map o)</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga159e81f9b91f99b2a749185f47924d99</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_opt_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga68f7245733f5fe5a86e6dd416d7746f1</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>tgba_run</name>
    <title>TGBA runs and supporting functions</title>
    <filename>group__tgba__run.html</filename>
    <class kind="struct">spot::tgba_run</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga3aa3b6dd9854c94b6aaabafd4a612de2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>tgba_run_to_tgba</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga60bd6401d35428aa22bda3388765099b</anchor>
      <arglist>(const tgba *a, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba_run *</type>
      <name>project_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga1e0b8aeb36e622ac26a6c540ac17fddc</anchor>
      <arglist>(const tgba *a_run, const tgba *a_proj, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba_run *</type>
      <name>reduce_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gabc4ad10830cd80a3237415d28adeee1b</anchor>
      <arglist>(const tgba *a, const tgba_run *org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replay_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gae2bf747c24d2fb1a06f1a033f67fe6dc</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run, bool debug=false)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>emptiness_check_stats</name>
    <title>Emptiness-check statistics</title>
    <filename>group__emptiness__check__stats.html</filename>
    <class kind="struct">spot::unsigned_statistics</class>
    <class kind="class">spot::unsigned_statistics_copy</class>
    <class kind="class">spot::ec_statistics</class>
    <class kind="class">spot::ars_statistics</class>
    <class kind="class">spot::acss_statistics</class>
  </compound>
  <compound kind="struct">
    <name>job</name>
    <filename>structjob.html</filename>
    <member kind="function">
      <type></type>
      <name>job</name>
      <anchorfile>structjob.html</anchorfile>
      <anchor>aba7ee17c7790f3a8a5c423eaf272dcf8</anchor>
      <arglist>(const char *str, bool file_p)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>structjob.html</anchorfile>
      <anchor>abe7609a9a4b04aa6447bb70021df9b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>file_p</name>
      <anchorfile>structjob.html</anchorfile>
      <anchor>a30c6c15243fc0eb9b8176052c57d64e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>job_processor</name>
    <filename>classjob__processor.html</filename>
    <member kind="function">
      <type></type>
      <name>job_processor</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a1c73aa1b58386e937fc164315c37fee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~job_processor</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a608015b8e75fcc11c21b835ae860d3c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>process_formula</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a250a23d1f53c593b806ebfb3acc79f83</anchor>
      <arglist>(const spot::ltl::formula *f, const char *filename=0, int linenum=0)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_string</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a6fe7965720e9f1006cbda5556506c0f1</anchor>
      <arglist>(const std::string &amp;str, const char *filename=0, int linenum=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_stream</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a654ca54ced97367931006f8898cd11f2</anchor>
      <arglist>(std::istream &amp;is, const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>process_file</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a2603c32fb65ec20d3e8218428ebe3e84</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>ab102cdb983a0dc859dee767e7a9f4577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>abort_run</name>
      <anchorfile>classjob__processor.html</anchorfile>
      <anchor>a2bae6be941f51d7a70b02f04de1c4e51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>range</name>
    <filename>structrange.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>min</name>
      <anchorfile>structrange.html</anchorfile>
      <anchor>ac44f344c608da635b1982be4e412ba01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max</name>
      <anchorfile>structrange.html</anchorfile>
      <anchor>a4b9f4703bc318f6f7cd0f1cb50e113f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>eltlyy</name>
    <filename>namespaceeltlyy.html</filename>
    <class kind="class">eltlyy::location</class>
    <class kind="class">eltlyy::position</class>
    <class kind="class">eltlyy::stack</class>
    <class kind="class">eltlyy::slice</class>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a54a254bbac4af32e1cc89ba67e72eb74</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>af26bb8436d7cd0b0644e12f556a313a2</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a4e4f4196ca129aa92a2dfec705ff37c7</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a2c78f463d053ff689629d0df2eec191d</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a91a26185e5306f1bc20284fd6f626ecc</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a328f568332609961a0142d2aee4f84db</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a4284a9ad8587b1414b521578f0d531d1</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>ac1b0433b3eeacdbfb6dd4e28d38dc3a3</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a11900ce99fb8aa98dc628dc92d3b604f</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a50801c7df943fb33dd5b5b082aa44a57</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a6283908edae4450b2cf9abb75071bdc4</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a675a34cdbc3c9b1df91c4de62d90fa86</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceeltlyy.html</anchorfile>
      <anchor>a0921ed7379849faadfa4e0c334dbff05</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eltlyy::location</name>
    <filename>classeltlyy_1_1location.html</filename>
    <member kind="function">
      <type></type>
      <name>location</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a67ae9d987b73ae278c21cc17f417a544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a322b9d559c1de7b16239ec607fe4e119</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a6e5ce78f23adb8266a279dc35f124286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a359e7753b25c1a9d067069a39d2b206d</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a355d744c92f2dd0de25c0b86118c91e6</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>begin</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a8dcd07fa1594c8ca1fc333fa06eeea03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>end</name>
      <anchorfile>classeltlyy_1_1location.html</anchorfile>
      <anchor>a22ba632de51b90d65f0943aa9c4d869f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eltlyy::position</name>
    <filename>classeltlyy_1_1position.html</filename>
    <member kind="function">
      <type></type>
      <name>position</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a6fd1fc15c3cecf4403bf1f4948e5c917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a87967ab231df0c85d7fe60a4f6ea51f9</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>af6741153b645359b31393572219b8c6f</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a1418d6f58984447bc930281d6c439410</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>filename</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a835a35e8b6b76bd2114ad08ff19f0fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>line</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a14eab269be22dcf2f6ea831f9e6dcb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>column</name>
      <anchorfile>classeltlyy_1_1position.html</anchorfile>
      <anchor>a5834760b2b29ec22bea4b5e8ab3b74b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eltlyy::stack</name>
    <filename>classeltlyy_1_1stack.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>S::reverse_iterator</type>
      <name>iterator</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>a2f87dfec3d5f1cd8518474506f33e65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S::const_reverse_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>adbfc212340ff504ed851dafbfe493dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>a07f5e779d6419afaba24a69b37829931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>add1db76031f36a35f977ebeb9e63ec8f</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>aae2a83bb7dd551e2627dbaca2155a43f</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>afed65e80050115e4ab176c325811bd00</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>abac43e7f4bbd7762ab8b11d87092b33f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>aa9fed13bfc256a10a21449b1994fb638</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>ae120a66fbd5b012a5d7d2949833feefd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>a3cf029a41000caeb22713011cb181a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>a805069b4e8ef17cad61e09acc375c806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>seq_</name>
      <anchorfile>classeltlyy_1_1stack.html</anchorfile>
      <anchor>aaed892258296f348e5bd1c40845a3e0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>eltlyy::slice</name>
    <filename>classeltlyy_1_1slice.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>slice</name>
      <anchorfile>classeltlyy_1_1slice.html</anchorfile>
      <anchor>a42f9e6bd9215eed73c69ff8d4f1375d4</anchor>
      <arglist>(const S &amp;stack, unsigned int range)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classeltlyy_1_1slice.html</anchorfile>
      <anchor>a153dec6db6967210ebcb608c1a218075</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const S &amp;</type>
      <name>stack_</name>
      <anchorfile>classeltlyy_1_1slice.html</anchorfile>
      <anchor>acf400d4ecaa90350f712a0b9d5ea2a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>range_</name>
      <anchorfile>classeltlyy_1_1slice.html</anchorfile>
      <anchor>a63231ec89e353be94249c5739f24d986</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>kripkeyy</name>
    <filename>namespacekripkeyy.html</filename>
    <class kind="class">kripkeyy::location</class>
    <class kind="class">kripkeyy::position</class>
    <class kind="class">kripkeyy::stack</class>
    <class kind="class">kripkeyy::slice</class>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa34f3410380795f5be0c74169bbe68c4</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>ae598cea574b9c4801a3472f4c864de06</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>afac879f8bf87d40917be43775355ceb6</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a0e43cbe9ad93cf008baf6f40d7b2583a</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a800707b9f962770dad79eef495c8d603</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa0a789d9e4863cd952048faedbc6c669</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>acd904cdfd20a2ffa9908ec3fd6316d5a</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>aa02d923c3a64873410c05cd8e554ce43</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a6fea62895c7fdacf3fb2a92657e59d9c</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a4b1ad160d2bf0b37aee7b5bfa85c883d</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a07f826450ef0b16a660e276bc70fdf52</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a30e08dab2d44b9f1ec2472540bf43c66</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacekripkeyy.html</anchorfile>
      <anchor>a39a5189cacd38f34f57a8e0f0e3306b5</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kripkeyy::location</name>
    <filename>classkripkeyy_1_1location.html</filename>
    <member kind="function">
      <type></type>
      <name>location</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>ae6c15e6dbc48db12b6dcd89feca75897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>a410f1ef1cb2f504961d646d5b65699dc</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>a618bec446e6aa337765ce6d34af26601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>a996c7caa5465aae609ccc17892fa1cc3</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>aac8a695321aeb1fa8ca201fede8ff3ae</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>begin</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>a752f2350fe2e8d05af03f81089aeef62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>end</name>
      <anchorfile>classkripkeyy_1_1location.html</anchorfile>
      <anchor>a1e5336b39c2d801de7bf23b42c717c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kripkeyy::position</name>
    <filename>classkripkeyy_1_1position.html</filename>
    <member kind="function">
      <type></type>
      <name>position</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>a0722682eb146764138b3f8ed74e1746a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>ac9c985a3df1b0a3cac37d889dd1dd4ce</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>a5a1476821f0e6c52f787b4195a879c55</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>aa2acf7853b4ae10784fd12e10248db45</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>filename</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>ad768b7da99747f6bdc2eaec7882ab38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>line</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>acc0b7ca8ac697ffc7c72198a946f0086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>column</name>
      <anchorfile>classkripkeyy_1_1position.html</anchorfile>
      <anchor>ab0a2181ebac3b2d484ed08cef3e4df68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kripkeyy::stack</name>
    <filename>classkripkeyy_1_1stack.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>S::reverse_iterator</type>
      <name>iterator</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a724ec9d1dc468053ff41030ac32652ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S::const_reverse_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a8051e42a5270e5b5129300eb25232d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>ab7c57e44a9cc1cf8daec71595d205bae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>aed1c29ddcf72ba477e8300664d8ebedc</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a8eb97d89f736fcabad4a91794dec0261</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>ac47d9be5287d84555b3daf2f967437db</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a4d46ec99a92ea376055e404ef6f6d0e0</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a204ed6ed62ac1214617605b0e627c5a8</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>ad00bdb2f772f269557cd1e82f467dde8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a87805aaa5e3bdaacbc089369f8907e2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>a6ed3c05ec4d5224e37116bdd09835c26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>seq_</name>
      <anchorfile>classkripkeyy_1_1stack.html</anchorfile>
      <anchor>ab35562329a878e5b795242bdd2728ad3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>kripkeyy::slice</name>
    <filename>classkripkeyy_1_1slice.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>slice</name>
      <anchorfile>classkripkeyy_1_1slice.html</anchorfile>
      <anchor>a7a47de9136034b325108ac2a2d7dbfe5</anchor>
      <arglist>(const S &amp;stack, unsigned int range)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classkripkeyy_1_1slice.html</anchorfile>
      <anchor>a18687c50422b2fcbee6fcaeaccced859</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const S &amp;</type>
      <name>stack_</name>
      <anchorfile>classkripkeyy_1_1slice.html</anchorfile>
      <anchor>afab692dce937ff373743dafcd5e2f239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>range_</name>
      <anchorfile>classkripkeyy_1_1slice.html</anchorfile>
      <anchor>a380971594eff9df8eff50563770978e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ltlyy</name>
    <filename>namespaceltlyy.html</filename>
    <class kind="class">ltlyy::location</class>
    <class kind="class">ltlyy::position</class>
    <class kind="class">ltlyy::stack</class>
    <class kind="class">ltlyy::slice</class>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a70e347efcc4af1489a902f013c075795</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a5ad9aab98f3f4a4d03e28d26b885f0a9</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ae2f8bb8edf11642db0e6459bc4f2f2a5</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a234efa05cfec04aeb00d0c589a379541</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a4e42948172b1c36af4dd293384e80e89</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a7ca655af533c8a7eb435a85f9a1cd234</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ad4b9d0fc18d630a816d0d5879569a400</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>acbba141d458e781c3e884545fff8726f</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>af3f149ab4d359d9539af7f886620d4ac</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>ae322d7f17d8337de215434430d4b5039</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a9d36da45cd9e96da6ec4eae56836577a</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a95004c056cf8a088f3760d2c45b32e32</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceltlyy.html</anchorfile>
      <anchor>a0dd64d7f5203ae05d3a671f4dc66511b</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ltlyy::location</name>
    <filename>classltlyy_1_1location.html</filename>
    <member kind="function">
      <type></type>
      <name>location</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>ae2ff12ab024484a2d1245bf657290142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>a8f1b859b38fe5cb33d306beb98ec04bb</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>a0cb10e032ede2952ebff291bf11b3654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>adf146e08e5fffd4dab9862c0f6a310bc</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>a8fcb821f469792c4e0de5fd5049e7f6d</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>begin</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>aadd64beae4835b78c359f97683155317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>end</name>
      <anchorfile>classltlyy_1_1location.html</anchorfile>
      <anchor>a6750a25f8b82b02801327952ca942bc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ltlyy::position</name>
    <filename>classltlyy_1_1position.html</filename>
    <member kind="function">
      <type></type>
      <name>position</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>a846eecdf8d903355f4ae3e544ca88998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>a3cfe2972548145ce7b025da0a6a01220</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>aad9d63b47c96c61f74fa22c1866fa28f</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>aa97041344fc45ab8f01c0dd625a36e80</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>filename</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>aaaafaf5e29c0851b6e040c800dc8a906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>line</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>a91e1bd88aad032f4a1e1dafcab06f4c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>column</name>
      <anchorfile>classltlyy_1_1position.html</anchorfile>
      <anchor>a4e34ca78e4f8d15cef154cb98f1d28dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ltlyy::stack</name>
    <filename>classltlyy_1_1stack.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>S::reverse_iterator</type>
      <name>iterator</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a94a04e80e72696ab3f2047aa28386a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S::const_reverse_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a239eb8ed9ae3418507948ea22bf4b17d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a4ba9a1280192f8fa71d596359af81bb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a4828adafbe0411fe1c364ef3fe6b6cc2</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a5043f71bbda8168cf6c25132539f1cdd</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>afb03571eadc61e3ddc3f51654e93cdbb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>aa74a3ec1b90a6d5508eb3800aa9994d4</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a11bfaba9e90dc3b2c65bf9347c9f735f</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>ae6eb60b04f2ea503314c0103dc3cc3d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a7f79328ecc76c8be2430a15ba7d3e0dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a99c931c48986079ebec17a1929244914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>seq_</name>
      <anchorfile>classltlyy_1_1stack.html</anchorfile>
      <anchor>a15579b222f8b5378fd138e4e2cd6fc5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ltlyy::slice</name>
    <filename>classltlyy_1_1slice.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>slice</name>
      <anchorfile>classltlyy_1_1slice.html</anchorfile>
      <anchor>a9ef6761922013aafd4e3495cf769fe3f</anchor>
      <arglist>(const S &amp;stack, unsigned int range)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classltlyy_1_1slice.html</anchorfile>
      <anchor>ae755ede00ee5ef3ef95d83e9d8cddc79</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const S &amp;</type>
      <name>stack_</name>
      <anchorfile>classltlyy_1_1slice.html</anchorfile>
      <anchor>aef72daa49c051fed98133d5a25fa5cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>range_</name>
      <anchorfile>classltlyy_1_1slice.html</anchorfile>
      <anchor>a3dfbb1d178a9e2b022395f16c6279a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>neverclaimyy</name>
    <filename>namespaceneverclaimyy.html</filename>
    <class kind="class">neverclaimyy::location</class>
    <class kind="class">neverclaimyy::position</class>
    <class kind="class">neverclaimyy::stack</class>
    <class kind="class">neverclaimyy::slice</class>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a309e2b7246740b5e9961dd88ea59cc86</anchor>
      <arglist>(const location &amp;begin, const location &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const location</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a0335320481cc592dd6b43b7946ab302a</anchor>
      <arglist>(const location &amp;begin, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>location &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a564992233965175c0d6d7175c1d071ac</anchor>
      <arglist>(location &amp;res, unsigned int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a24eeb2bbce3015bc3fd8ab049116b11b</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a939553ef4eb060a27b5ffe0cf3048140</anchor>
      <arglist>(const location &amp;loc1, const location &amp;loc2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a42a5d85a40a9414fea7b9f33d92f0c5e</anchor>
      <arglist>(std::ostream &amp;ostr, const location &amp;loc)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator+=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>af3e18b9841a3bcda514d0df0632d1b33</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator+</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a56ae22374e0293b42a46ecbbf64032ef</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position &amp;</type>
      <name>operator-=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a3251ac890e5678894e2ab0ff8ea71f3c</anchor>
      <arglist>(position &amp;res, const int width)</arglist>
    </member>
    <member kind="function">
      <type>const position</type>
      <name>operator-</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a83e07bf39a4aa9d2d775c0a140f6a621</anchor>
      <arglist>(const position &amp;begin, const int width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a694464557bda93d3b014c32369608990</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a24c65c343ff99315e2ad07e93191a3af</anchor>
      <arglist>(const position &amp;pos1, const position &amp;pos2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceneverclaimyy.html</anchorfile>
      <anchor>a45d523f7384fc5f8c8beec8a8053e508</anchor>
      <arglist>(std::ostream &amp;ostr, const position &amp;pos)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>neverclaimyy::location</name>
    <filename>classneverclaimyy_1_1location.html</filename>
    <member kind="function">
      <type></type>
      <name>location</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>a1dd036278b24644640ccceac76eeaf30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>a820071d933656cfb4ef5a31e846d9c47</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>ab585263b0b719f5570b9a60587a0db91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>ab6e0a3dcd06155419f5d9c9345a0cfe2</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>aa7b93d746f2671dba02a4bd0ed2c5df9</anchor>
      <arglist>(unsigned int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>begin</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>acdbf2ae108217568cf1dc873dc4a1551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>position</type>
      <name>end</name>
      <anchorfile>classneverclaimyy_1_1location.html</anchorfile>
      <anchor>ace225416967f03dcd616603d0b342a7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>neverclaimyy::position</name>
    <filename>classneverclaimyy_1_1position.html</filename>
    <member kind="function">
      <type></type>
      <name>position</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>ad7e67343390e9889e021a22df5d0abbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>ac55ff7afcb0b3a4b28801f78211398ff</anchor>
      <arglist>(std::string *fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lines</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>af5713d2bbe6f9f4948b3c182d62465f1</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>columns</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>a74986bfcbfeb0b46e912a256e4984590</anchor>
      <arglist>(int count=1)</arglist>
    </member>
    <member kind="variable">
      <type>std::string *</type>
      <name>filename</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>ad7914a618adac4dc40da3c13ed7b3095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>line</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>a77e81f211864bcbaa80f2a5b829e6f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>column</name>
      <anchorfile>classneverclaimyy_1_1position.html</anchorfile>
      <anchor>aad933b0a66ce9e68c548be8e66a4471c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>neverclaimyy::stack</name>
    <filename>classneverclaimyy_1_1stack.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>S::reverse_iterator</type>
      <name>iterator</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a3d094a1ee1d2199c0f12b713d3593e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S::const_reverse_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>ab28391a142fe60f44b51101f0d87f458</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>af3215724c90ffc0128e351602d30efb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stack</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a993d98b76a35344d09bf219dfdd24200</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a6fa805b1e17e702bef46f7b88c995884</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a2b711e9fde94d0b4d50eac36f301a995</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a91c8944f9e6b64eb3aa50fee8505396f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a942d896f0daaa3a5f19e7f6be524e453</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>ad921f09e7356bfeb49c68f1de31807e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a4a9667a78eb54aed222344bff35af4d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>af2b802360474741b2d46df76caa60a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>S</type>
      <name>seq_</name>
      <anchorfile>classneverclaimyy_1_1stack.html</anchorfile>
      <anchor>a7fc2327e2275f4905e682e3a9522ea90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>neverclaimyy::slice</name>
    <filename>classneverclaimyy_1_1slice.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>slice</name>
      <anchorfile>classneverclaimyy_1_1slice.html</anchorfile>
      <anchor>af681ce1ab59a64179cb224a8ac030d5f</anchor>
      <arglist>(const S &amp;stack, unsigned int range)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classneverclaimyy_1_1slice.html</anchorfile>
      <anchor>a4aab47c7f122ed8afe4769952dc77bc8</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const S &amp;</type>
      <name>stack_</name>
      <anchorfile>classneverclaimyy_1_1slice.html</anchorfile>
      <anchor>adac9a8d890ee6eac5130d7ec7f62e207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>range_</name>
      <anchorfile>classneverclaimyy_1_1slice.html</anchorfile>
      <anchor>aa0fba58ee34309cc2b61027ccf94db72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>spot</name>
    <filename>namespacespot.html</filename>
    <namespace>spot::eltl</namespace>
    <namespace>spot::ltl</namespace>
    <class kind="class">spot::evtgba</class>
    <class kind="class">spot::evtgba_iterator</class>
    <class kind="class">spot::evtgba_explicit</class>
    <class kind="class">spot::state_evtgba_explicit</class>
    <class kind="class">spot::evtgba_product</class>
    <class kind="class">spot::symbol</class>
    <class kind="class">spot::rsymbol</class>
    <class kind="class">spot::evtgba_reachable_iterator</class>
    <class kind="class">spot::evtgba_reachable_iterator_depth_first</class>
    <class kind="class">spot::evtgba_reachable_iterator_breadth_first</class>
    <class kind="class">spot::fair_kripke_succ_iterator</class>
    <class kind="class">spot::fair_kripke</class>
    <class kind="class">spot::kripke_succ_iterator</class>
    <class kind="class">spot::kripke</class>
    <class kind="class">spot::state_kripke</class>
    <class kind="class">spot::kripke_explicit_succ_iterator</class>
    <class kind="class">spot::kripke_explicit</class>
    <class kind="class">spot::acc_compl</class>
    <class kind="class">spot::acceptance_convertor</class>
    <class kind="class">spot::bdd_allocator</class>
    <class kind="struct">spot::bdd_less_than</class>
    <class kind="struct">spot::bdd_hash</class>
    <class kind="class">spot::fixed_size_pool</class>
    <class kind="class">spot::printable</class>
    <class kind="class">spot::printable_value</class>
    <class kind="class">spot::printable_id</class>
    <class kind="class">spot::printable_percent</class>
    <class kind="class">spot::formater</class>
    <class kind="class">spot::free_list</class>
    <class kind="struct">spot::ptr_hash</class>
    <class kind="struct">spot::identity_hash</class>
    <class kind="struct">spot::char_ptr_less_than</class>
    <class kind="class">spot::minato_isop</class>
    <class kind="class">spot::loopless_modular_mixed_radix_gray_code</class>
    <class kind="class">spot::multiple_size_pool</class>
    <class kind="class">spot::option_map</class>
    <class kind="class">spot::barand</class>
    <class kind="struct">spot::time_info</class>
    <class kind="class">spot::timer</class>
    <class kind="class">spot::timer_map</class>
    <class kind="class">spot::unique_ptr</class>
    <class kind="class">spot::explicit_state_conjunction</class>
    <class kind="class">spot::saba</class>
    <class kind="class">spot::saba_complement_tgba</class>
    <class kind="class">spot::saba_state</class>
    <class kind="struct">spot::saba_state_ptr_less_than</class>
    <class kind="struct">spot::saba_state_ptr_equal</class>
    <class kind="struct">spot::saba_state_ptr_hash</class>
    <class kind="struct">spot::saba_state_shared_ptr_less_than</class>
    <class kind="struct">spot::saba_state_shared_ptr_equal</class>
    <class kind="struct">spot::saba_state_shared_ptr_hash</class>
    <class kind="class">spot::saba_state_conjunction</class>
    <class kind="class">spot::saba_succ_iterator</class>
    <class kind="class">spot::saba_reachable_iterator</class>
    <class kind="class">spot::saba_reachable_iterator_depth_first</class>
    <class kind="class">spot::saba_reachable_iterator_breadth_first</class>
    <class kind="class">spot::ta</class>
    <class kind="class">spot::ta_succ_iterator</class>
    <class kind="class">spot::scc_stack_ta</class>
    <class kind="class">spot::ta_explicit</class>
    <class kind="class">spot::state_ta_explicit</class>
    <class kind="class">spot::ta_explicit_succ_iterator</class>
    <class kind="class">spot::state_ta_product</class>
    <class kind="class">spot::ta_succ_iterator_product</class>
    <class kind="class">spot::ta_product</class>
    <class kind="class">spot::ta_succ_iterator_product_by_changeset</class>
    <class kind="class">spot::tgta</class>
    <class kind="class">spot::tgta_explicit</class>
    <class kind="class">spot::tgta_product</class>
    <class kind="class">spot::tgta_succ_iterator_product</class>
    <class kind="class">spot::ta_check</class>
    <class kind="class">spot::ta_reachable_iterator</class>
    <class kind="class">spot::ta_reachable_iterator_depth_first</class>
    <class kind="class">spot::ta_reachable_iterator_breadth_first</class>
    <class kind="struct">spot::ta_statistics</class>
    <class kind="class">spot::bdd_dict</class>
    <class kind="class">spot::future_conditions_collector</class>
    <class kind="class">spot::sba</class>
    <class kind="class">spot::state</class>
    <class kind="struct">spot::state_ptr_less_than</class>
    <class kind="struct">spot::state_ptr_equal</class>
    <class kind="struct">spot::state_ptr_hash</class>
    <class kind="struct">spot::state_shared_ptr_less_than</class>
    <class kind="struct">spot::state_shared_ptr_equal</class>
    <class kind="struct">spot::state_shared_ptr_hash</class>
    <class kind="class">spot::state_bdd</class>
    <class kind="class">spot::tgba_succ_iterator</class>
    <class kind="class">spot::tgba_succ_iterator_concrete</class>
    <class kind="class">spot::taa_tgba</class>
    <class kind="class">spot::state_set</class>
    <class kind="class">spot::taa_succ_iterator</class>
    <class kind="class">spot::taa_tgba_labelled</class>
    <class kind="class">spot::taa_tgba_string</class>
    <class kind="class">spot::taa_tgba_formula</class>
    <class kind="class">spot::tgba</class>
    <class kind="class">spot::tgba_bdd_concrete</class>
    <class kind="class">spot::tgba_bdd_concrete_factory</class>
    <class kind="struct">spot::tgba_bdd_core_data</class>
    <class kind="class">spot::tgba_bdd_factory</class>
    <class kind="struct">spot::destroy_key</class>
    <class kind="struct">spot::destroy_key&lt; const ltl::formula * &gt;</class>
    <class kind="class">spot::state_explicit</class>
    <class kind="class">spot::state_explicit_number</class>
    <class kind="class">spot::state_explicit_string</class>
    <class kind="class">spot::state_explicit_formula</class>
    <class kind="class">spot::tgba_explicit_succ_iterator</class>
    <class kind="class">spot::explicit_graph</class>
    <class kind="class">spot::tgba_explicit</class>
    <class kind="class">spot::sba_explicit</class>
    <class kind="class">spot::explicit_conf</class>
    <class kind="class">spot::explicit_conf&lt; graph, state_explicit_string &gt;</class>
    <class kind="class">spot::explicit_conf&lt; graph, state_explicit_formula &gt;</class>
    <class kind="class">spot::bdd_ordered</class>
    <class kind="class">spot::tgba_kv_complement</class>
    <class kind="class">spot::state_product</class>
    <class kind="class">spot::tgba_product</class>
    <class kind="class">spot::tgba_product_init</class>
    <class kind="class">spot::tgba_safra_complement</class>
    <class kind="class">spot::tgba_scc</class>
    <class kind="class">spot::tgba_sgba_proxy</class>
    <class kind="class">spot::tgba_tba_proxy</class>
    <class kind="class">spot::tgba_sba_proxy</class>
    <class kind="class">spot::state_union</class>
    <class kind="class">spot::tgba_succ_iterator_union</class>
    <class kind="class">spot::tgba_union</class>
    <class kind="class">spot::bfs_steps</class>
    <class kind="struct">spot::sccs_set</class>
    <class kind="class">spot::enumerate_cycles</class>
    <class kind="class">spot::dotty_decorator</class>
    <class kind="class">spot::emptiness_check_result</class>
    <class kind="class">spot::emptiness_check</class>
    <class kind="class">spot::emptiness_check_instantiator</class>
    <class kind="struct">spot::tgba_run</class>
    <class kind="struct">spot::unsigned_statistics</class>
    <class kind="class">spot::unsigned_statistics_copy</class>
    <class kind="class">spot::ec_statistics</class>
    <class kind="class">spot::ars_statistics</class>
    <class kind="class">spot::acss_statistics</class>
    <class kind="class">spot::couvreur99_check_result</class>
    <class kind="class">spot::explicit_connected_component</class>
    <class kind="class">spot::connected_component_hash_set</class>
    <class kind="class">spot::explicit_connected_component_factory</class>
    <class kind="class">spot::connected_component_hash_set_factory</class>
    <class kind="class">spot::couvreur99_check</class>
    <class kind="class">spot::couvreur99_check_shy</class>
    <class kind="class">spot::numbered_state_heap_const_iterator</class>
    <class kind="class">spot::numbered_state_heap</class>
    <class kind="class">spot::numbered_state_heap_factory</class>
    <class kind="class">spot::numbered_state_heap_hash_map</class>
    <class kind="class">spot::numbered_state_heap_hash_map_factory</class>
    <class kind="class">spot::scc_stack</class>
    <class kind="class">spot::couvreur99_check_status</class>
    <class kind="class">spot::postprocessor</class>
    <class kind="struct">spot::power_map</class>
    <class kind="class">spot::tgba_reachable_iterator</class>
    <class kind="class">spot::tgba_reachable_iterator_depth_first</class>
    <class kind="class">spot::tgba_reachable_iterator_breadth_first</class>
    <class kind="class">spot::tgba_run_dotty_decorator</class>
    <class kind="struct">spot::scc_stats</class>
    <class kind="class">spot::scc_map</class>
    <class kind="struct">spot::tgba_statistics</class>
    <class kind="struct">spot::tgba_sub_statistics</class>
    <class kind="class">spot::printable_formula</class>
    <class kind="class">spot::stat_printer</class>
    <class kind="class">spot::weight</class>
    <class kind="class">spot::gspn_exception</class>
    <class kind="class">spot::gspn_interface</class>
    <class kind="class">spot::gspn_ssp_interface</class>
    <member kind="typedef">
      <type>std::set&lt; const symbol * &gt;</type>
      <name>symbol_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab1fe964166144356a185c98ce0bcbde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; rsymbol &gt;</type>
      <name>rsymbol_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a5f139f442de158fbe3bf9fab3ddee7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; evtgbayy::location, std::string &gt;</type>
      <name>evtgba_parse_error</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad049f28e03c2ebe740e5597034fd5c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; evtgba_parse_error &gt;</type>
      <name>evtgba_parse_error_list</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a90dc0e2318bb80c45893922f42ec44fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; kripkeyy::location, std::string &gt;</type>
      <name>kripke_parse_error</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a68ac7577bed0b7af5dd8e45135797759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; kripke_parse_error &gt;</type>
      <name>kripke_parse_error_list</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a429e9facc10a0958d14ff3f94d71b006</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; neverclaimyy::location, std::string &gt;</type>
      <name>neverclaim_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga3a14d5793c8decc8de5c19f640c721bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; neverclaim_parse_error &gt;</type>
      <name>neverclaim_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga15242b071d7c485804548ff2ee41b3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const saba_state &gt;</type>
      <name>shared_saba_state</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a5494e2802ca03bd036c523a1c65f3a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const state &gt;</type>
      <name>shared_state</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a13a1db95095eccfe0a4ce4a818442fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_string &gt;, state_explicit_string &gt;</type>
      <name>tgba_explicit_string</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3ace0ebc1ab16f0766fa681785750794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_formula &gt;, state_explicit_formula &gt;</type>
      <name>tgba_explicit_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a24df826dd55ad1b8a6fd711c8ab1785e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; tgba_explicit&lt; state_explicit_number &gt;, state_explicit_number &gt;</type>
      <name>tgba_explicit_number</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad566cf6234b8c875958ed4001f959bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_string &gt;, state_explicit_string &gt;</type>
      <name>sba_explicit_string</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a118b4701825f7a8860cebf5c0a68eee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_formula &gt;, state_explicit_formula &gt;</type>
      <name>sba_explicit_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a7ce8b43567a8c7e16773717dcf683eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>explicit_conf&lt; sba_explicit&lt; state_explicit_number &gt;, state_explicit_number &gt;</type>
      <name>sba_explicit_number</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a13bc152377363a78e3ab83a43a6be053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bdd_ordered &gt;</type>
      <name>acc_list_t</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a4260b69cfc6b42df1b242d141d250acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; tgbayy::location, std::string &gt;</type>
      <name>tgba_parse_error</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadcc2cd9b328a5c3f63918c577f86f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; tgba_parse_error &gt;</type>
      <name>tgba_parse_error_list</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga76b22bb081d5c36378098caa5bf58081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sgi::hash&lt; std::string &gt;</type>
      <name>string_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga33960cd9c4aa7bb175efe1debb7534b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>reduce_tgba_options</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5bd08ab74b3ab10a27beceaa04d9217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa28ab8e63b3f476424eec1d49fb19b1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa6ef94353974a1119b8c3265eb0bcbe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Dir_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa7b2d15a717f241527e25e1266370033e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_quotient_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa040be3fac90f0ddb426644a52418d7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_transition_Del_Sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa21c74a793193bfe95e63b43ef1b59350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Scc</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa685daa8530de270e1588cdc2c178a2ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gga5bd08ab74b3ab10a27beceaa04d9217aa81a405e18e9bbd601c4183e1c7ff49e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab3ff98345b771b22e0a9b67063676e84</anchor>
      <arglist>(std::ostream &amp;os, const evtgba *g)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>evtgba_save_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aade1f7e5b6c685b5393d8a6d3ab7e09d</anchor>
      <arglist>(std::ostream &amp;os, const evtgba *g)</arglist>
    </member>
    <member kind="function">
      <type>evtgba_explicit *</type>
      <name>tgba_to_evtgba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3b22a05fb3e16d693b2d80425dfa4500</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>evtgba_explicit *</type>
      <name>evtgba_parse</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a6805befaee0df3f7cb4427d30782f230</anchor>
      <arglist>(const std::string &amp;filename, evtgba_parse_error_list &amp;error_list, bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_evtgba_parse_errors</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a805ae4b750b93c1d2e19d81faa609065</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, evtgba_parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga297ff6967b82ecb1de793bce48701379</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>kripke_save_reachable_renumbered</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga65e6d2507fc1692b1405a26b7306379f</anchor>
      <arglist>(std::ostream &amp;os, const kripke *k)</arglist>
    </member>
    <member kind="function">
      <type>kripke_explicit *</type>
      <name>kripke_parse</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ad7749e1e9d7c9449aa0c0639f6e7add0</anchor>
      <arglist>(const std::string &amp;name, kripke_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_kripke_parse_errors</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a119f3d265650a37c30f816ad189725ae</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, kripke_parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaae6fadac6a2f91d7b8e27b3eb6ad647e</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>quote_unless_bare_word</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga4731f21b7b43332b5c7b5bc63c6d67e6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>compute_all_acceptance_conditions</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a1c1c9963ce3385c106461526f80e4d7a</anchor>
      <arglist>(bdd neg_acceptance_conditions)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>compute_neg_acceptance_conditions</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>acbfcdc0a54e339085eb6c5458c994832</anchor>
      <arglist>(bdd all_acceptance_conditions)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga84a8b196e2ec651f0fd039c70c7ff6cb</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>escape_str</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad4b0b4fae7b93db7d704a5fef6e021c6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trim</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga3f3dad2e940fa844eeccda24e9386608</anchor>
      <arglist>(std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>wang32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>ga9422ff0c16df957910dd4a0275d9f726</anchor>
      <arglist>(size_t key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>knuth32_hash</name>
      <anchorfile>group__hash__funcs.html</anchorfile>
      <anchor>gaea94dbea4a286b0bde253baf07e7a56e</anchor>
      <arglist>(size_t key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga5253b7b9fd60f3285091b39a1f1b815d</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress2</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gaed78e6934b190995ba5a162ad0e76560</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga86ac44d535ef8f28e5d81a2edf907065</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;input, std::vector&lt; unsigned int &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_vector_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gade72f3d754ef89b594db989893ee3e7b</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;array, std::vector&lt; int &gt; &amp;output, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; *</type>
      <name>int_array_vector_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gae8556060f7963410dd8c52d2426d7269</anchor>
      <arglist>(const int *array, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_vector_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga6c161d70b36c5637b6511f2192f2d9bf</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; *array, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_compress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga72a6bb80b592f562634a6bd8aedd9ff6</anchor>
      <arglist>(const int *array, size_t n, int *dest, size_t &amp;dest_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>int_array_array_decompress</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>gad595c02553de6187297d09d2b47c995c</anchor>
      <arglist>(const int *array, size_t array_size, int *res, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memusage</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a1a8d0610b61c0a30aad16791b0b73d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>srand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga539812ab355a561fee1ecbfe60b276e4</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga86ce713fe60de9af440a7331de74aa1a</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>gafe8da996f40caa7d188f6b408ae62904</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>drand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga42801cd81368df5c1c61aa1626e299ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga978e1c6fb8f447274a05ddd3f87ce58b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bmrand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga0130217a19e5156f796ab774dca4b08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prand</name>
      <anchorfile>group__random.html</anchorfile>
      <anchor>ga816b558a7c64daca3a2a018704377dac</anchor>
      <arglist>(double p)</arglist>
    </member>
    <member kind="function">
      <type>unique_ptr&lt; T &gt;</type>
      <name>make_unique</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab35966460c1f984c2db09456bdf08b42</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>version</name>
      <anchorfile>group__misc__tools.html</anchorfile>
      <anchor>ga85c83eb1d18703782d129dbe4a518fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>neverclaim_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gadc0e10bdf5a88fc8ee6fb83952f537e0</anchor>
      <arglist>(const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_neverclaim_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga596bbd8f0703340f2b556e43dfa7995e</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, neverclaim_parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>saba_dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9f2c6c63ca4916813045c4326c635b93</anchor>
      <arglist>(std::ostream &amp;os, const saba *g)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a6d777a0a353d8c7502742e3fa3b4a5b3</anchor>
      <arglist>(std::ostream &amp;os, const ta *a)</arglist>
    </member>
    <member kind="function">
      <type>ta *</type>
      <name>minimize_ta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>gab6d913bd6fddb9c5c1919c97373bd6bd</anchor>
      <arglist>(const ta *ta_)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>minimize_tgta</name>
      <anchorfile>group__ta__reduction.html</anchorfile>
      <anchor>ga333ff9524f1e1a2988ac318f81dfae74</anchor>
      <arglist>(const tgta_explicit *tgta_)</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; const state * &gt;</type>
      <name>get_states_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a4e83dbca5f5008ab4cac60ee423b905d</anchor>
      <arglist>(const ta *t)</arglist>
    </member>
    <member kind="function">
      <type>ta_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__ta__misc.html</anchorfile>
      <anchor>ga6f9e7ec5c5d7b706b0c5184c4d3dbe3c</anchor>
      <arglist>(const ta *t)</arglist>
    </member>
    <member kind="function">
      <type>ta_explicit *</type>
      <name>tgba_to_ta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>ga5d3967eb107ea9bbb5f71b73f8dad2ef</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set, bool degeneralized=true, bool artificial_initial_state_mode=true, bool single_pass_emptiness_check=false, bool artificial_livelock_state_mode=false)</arglist>
    </member>
    <member kind="function">
      <type>tgta_explicit *</type>
      <name>tgba_to_tgta</name>
      <anchorfile>group__tgba__ta.html</anchorfile>
      <anchor>gabe1fa2db8c3bd35f340ad3a46654959a</anchor>
      <arglist>(const tgba *tgba_to_convert, bdd atomic_propositions_set)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_sat</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a59e91579989d390a3979a5badf302255</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_sat</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aba342c9d66d191b7ed930e2b02043e7f</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_acc</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3b659fe265e2014282d3b25db928794b</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_accset</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aa75a117405f2292f6d80abc2ae930946</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_accset</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aa04818924fa41d2230160b499d95173d</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aca49e9ec778c8a6b38455a68db8d6ece</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_set</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a73d8fa997efd95d08e0d1b9dfa7b7073</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a174c8f965f37e9a26b33c9f76183720f</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>bdd_format_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab9eea881fdb5d8e629db7102fde452ea</anchor>
      <arglist>(const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3ec151057e33aadb60d2b47ffaa64c24</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>bdd_print_table</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac8434843d2dcb0d99a027e398b01bafe</anchor>
      <arglist>(std::ostream &amp;os, const bdd_dict *dict, bdd b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_utf8</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9da9924abc8e1cb4086202c87b4213df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>formula_to_bdd</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ab6641d7d9896e016376b1c618da92469</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *d, void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>const ltl::formula *</type>
      <name>bdd_to_formula</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>aebfbc06108c79ba74f84a838af4f1772</anchor>
      <arglist>(bdd f, const bdd_dict *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shared_state_deleter</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a361af6c0080f2280ac0a884960374bd3</anchor>
      <arglist>(state *s)</arglist>
    </member>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>product</name>
      <anchorfile>group__tgba__algorithms.html</anchorfile>
      <anchor>ga9a8f2973e4358cf18aa162634b61ab51</anchor>
      <arglist>(const tgba_bdd_concrete *left, const tgba_bdd_concrete *right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display_safra</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ae6985cd6c82ba766e2e853f5a1e82e24</anchor>
      <arglist>(const tgba_safra_complement *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>wdba_complement</name>
      <anchorfile>group__tgba__on__the__fly__algorithms.html</anchorfile>
      <anchor>ga3d28f3aabd3fc1014482983f48a691e9</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; sccs_set * &gt; &gt; *</type>
      <name>find_paths</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a7a3b33efec82bd649f01077850ddfc2a</anchor>
      <arglist>(tgba *a, const scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_spanning_paths</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>af2a55d9921bf9eab8f9b410ff0ad0e0d</anchor>
      <arglist>(std::vector&lt; sccs_set * &gt; *paths, scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; tgba * &gt;</type>
      <name>split_tgba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a9f710ac23d3a22a3a66244d15de62a3c</anchor>
      <arglist>(tgba *a, const scc_map &amp;m, unsigned split_number)</arglist>
    </member>
    <member kind="function">
      <type>sba *</type>
      <name>degeneralize</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga7bf747ce302af354c18a28799016dc42</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga91590a0cf2e914df96d62e3509907cb4</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, bool assume_sba=false, dotty_decorator *dd=0)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_bfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga482c19d4b66ca51b15b1b5a0c51d114d</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_dupexp_dfs</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga1068b73c22d281c74dfbcf512c9df0b7</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>eltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gafbf62421b9c1da3df47ea92ade8ecdd4</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga3aa3b6dd9854c94b6aaabafd4a612de2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>tgba_run_to_tgba</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga60bd6401d35428aa22bda3388765099b</anchor>
      <arglist>(const tgba *a, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>couvreur99</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga9bb3670ecff03df6d792c8a315c3e75c</anchor>
      <arglist>(const tgba *a, option_map options=option_map(), const numbered_state_heap_factory *nshf=numbered_state_heap_hash_map_factory::instance())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_gv04_check</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae45e3a4c2ba4b8c0609a2afca67eabe8</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>count_nondet_states</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gacedab500bd933852465ef9bc3a094f70</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_deterministic</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafe8765d12152aff78507476c5a769131</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_weak_scc</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga669ef0d3178251f3e1ba66ef5aebaa66</anchor>
      <arglist>(scc_map &amp;map, unsigned scc)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>lbtt_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga955eb1141519477fda8d09fae2a9cb4a</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>lbtt_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gac79329b001b40e290a99168897221290</anchor>
      <arglist>(std::istream &amp;is, std::string &amp;error, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance())</arglist>
    </member>
    <member kind="function">
      <type>taa_tgba *</type>
      <name>ltl_to_taa</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>gab63f738c24846842339e8c12fd5eb777</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool refined_rules=false)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_formula *</type>
      <name>ltl_to_tgba_fm</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga9e12e74a9e66d7ae2b96dfb1e11655b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict, bool exprop=false, bool symb_merge=true, bool branching_postponement=false, bool fair_loop_approx=false, const ltl::atomic_prop_set *unobs=0, ltl::ltl_simplifier *simplifier=0)</arglist>
    </member>
    <member kind="function">
      <type>tgba_bdd_concrete *</type>
      <name>ltl_to_tgba_lacim</name>
      <anchorfile>group__tgba__ltl.html</anchorfile>
      <anchor>ga911db84b8e05185bb50b5eda55efe6b6</anchor>
      <arglist>(const ltl::formula *f, bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga392d772bf851002cdda0ca34615aa54b</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gadae7938a96420813bcdabb1b31295294</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>magic_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga054c1948b6c5076350e44a85ad580403</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_monitor</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga1ae7d44542608b4635f0dc05556d3064</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>minimize_wdba</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga871114e0c974638ee12deaa87e98f56b</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>minimize_obligation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4245a82c2be0713e20af9b217ad7b0a7</anchor>
      <arglist>(const tgba *aut_f, const ltl::formula *f=0, const tgba *aut_neg_f=0, bool reject_bigger=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>never_claim_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga989d3c71e821143e5b33d9f310784d64</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g, const ltl::formula *f=0, bool comments=false)</arglist>
    </member>
    <member kind="function">
      <type>tgba_run *</type>
      <name>project_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>ga1e0b8aeb36e622ac26a6c540ac17fddc</anchor>
      <arglist>(const tgba *a_run, const tgba *a_proj, const tgba_run *run)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>random_graph</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gadcf8ba83bd92b5cbf8f5b8f1083a793b</anchor>
      <arglist>(int n, float d, const ltl::atomic_prop_set *ap, bdd_dict *dict, int n_acc=0, float a=0.1, float t=0.5, ltl::environment *env=&amp;ltl::default_environment::instance())</arglist>
    </member>
    <member kind="function">
      <type>tgba_run *</type>
      <name>reduce_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gabc4ad10830cd80a3237415d28adeee1b</anchor>
      <arglist>(const tgba *a, const tgba_run *org)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>reduc_tgba_sim</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gaa6ffda0ae1ab4b30ea4f4f8303f36929</anchor>
      <arglist>(const tgba *a, int opt=Reduce_All)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>replay_tgba_run</name>
      <anchorfile>group__tgba__run.html</anchorfile>
      <anchor>gae2bf747c24d2fb1a06f1a033f67fe6dc</anchor>
      <arglist>(std::ostream &amp;os, const tgba *a, const tgba_run *run, bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_guarantee_automaton</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a8a3357941b87b564d5db84960ac97f24</anchor>
      <arglist>(const tgba *aut, const scc_map *sm=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_safety_mwdba</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a674e27c0b7e007eede14c4337b67581c</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>tgba_save_reachable</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga5c7f56a5941eb2380676c4ff6706e1c2</anchor>
      <arglist>(std::ostream &amp;os, const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>scc_stats</type>
      <name>build_scc_stats</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac57eb2b36c82228391e91bfdfd5e896e</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>scc_stats</type>
      <name>build_scc_stats</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a3a3040faf1273245a9e256b406d2fcca</anchor>
      <arglist>(const scc_map &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_scc_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a773a06917359e059e86d341d62ecbb64</anchor>
      <arglist>(const tgba *a, std::ostream &amp;out, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_scc_dot</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>ac55b8611e3b6da1437248c2c6d0d064a</anchor>
      <arglist>(const scc_map &amp;m, std::ostream &amp;out, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>scc_filter</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a0eb62dcb2baeb2717a69966b5f7607d9</anchor>
      <arglist>(const tgba *aut, bool remove_all_useless=false)</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga8c176368673a0c009dd3e934d57fb492</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>bit_state_hashing_se05_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>gae822266082cdb9772ce31388a6538cb9</anchor>
      <arglist>(const tgba *a, size_t size, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>se05</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga23a00d19bf7613222e6e41833e515c00</anchor>
      <arglist>(const tgba *a, option_map o)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>simulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>gac2172a3be49892bccb7abcf14669c129</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>cosimulation</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga5db456bdf40b6425d2a3584ab05bac5c</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>iterated_simulations</name>
      <anchorfile>group__tgba__reduction.html</anchorfile>
      <anchor>ga4cd60f5abe60e3da4a1b788d6e9975b1</anchor>
      <arglist>(const tgba *automaton)</arglist>
    </member>
    <member kind="function">
      <type>tgba_statistics</type>
      <name>stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaeeb949ca5fa52c1e292e0a7732ef46c4</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>tgba_sub_statistics</type>
      <name>sub_stats_reachable</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gaec71c3349daead65b683e5ba99b893cf</anchor>
      <arglist>(const tgba *g)</arglist>
    </member>
    <member kind="function">
      <type>sba_explicit_number *</type>
      <name>strip_acceptance</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga27bc2c8fa49e5a2531b1b92dc6ed7020</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga159e81f9b91f99b2a749185f47924d99</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>explicit_tau03_opt_search</name>
      <anchorfile>group__emptiness__check__algorithms.html</anchorfile>
      <anchor>ga68f7245733f5fe5a86e6dd416d7746f1</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_string *</type>
      <name>tgba_parse</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>gab07f6359e41046dd8f1452ce3665e152</anchor>
      <arglist>(const std::string &amp;filename, tgba_parse_error_list &amp;error_list, bdd_dict *dict, ltl::environment &amp;env=ltl::default_environment::instance(), ltl::environment &amp;envacc=ltl::default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_tgba_parse_errors</name>
      <anchorfile>group__tgba__io.html</anchorfile>
      <anchor>ga95b48c3bd896478c7e22b0d49c39d89c</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;filename, tgba_parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>kripke *</type>
      <name>load_dve2</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>afbc3f43caf8b96d8e715661d45e0a2b0</anchor>
      <arglist>(const std::string &amp;file, bdd_dict *dict, const ltl::atomic_prop_set *to_observe, const ltl::formula *dead=ltl::constant::true_instance(), int compress=0, bool verbose=true)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacespot.html</anchorfile>
      <anchor>a83bcadbb0c347d956021471f8c7d2135</anchor>
      <arglist>(std::ostream &amp;os, const gspn_exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga41573dafc02e8da2283670fa7aefebcf</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy_semi</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga9e84d9fcba32903d98fc0a0ebdc73ac1</anchor>
      <arglist>(const tgba *ssp_automata)</arglist>
    </member>
    <member kind="function">
      <type>couvreur99_check *</type>
      <name>couvreur99_check_ssp_shy</name>
      <anchorfile>group__emptiness__check__ssp.html</anchorfile>
      <anchor>ga4f5db797b2fc8a4b7617a76519114800</anchor>
      <arglist>(const tgba *ssp_automata, bool stack_inclusion=true, bool double_inclusion=false, bool reversed_double_inclusion=false, bool no_decomp=false)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>gafa490c8262811858828ad363760d911d</anchor>
      <arglist>(const tgba *aut, power_map &amp;pm)</arglist>
    </member>
    <member kind="function">
      <type>tgba_explicit_number *</type>
      <name>tgba_powerset</name>
      <anchorfile>group__tgba__misc.html</anchorfile>
      <anchor>ga42b9bff1af663f032af02cc8007db6d6</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba</name>
    <filename>classspot_1_1evtgba.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~evtgba</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>aabc9dfaaa11ae2817b815e04e6f0ac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual evtgba_iterator *</type>
      <name>init_iter</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a436fb54ba8f9ef7ff5816fce95ffce35</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual evtgba_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a1a4fd63d6785ffe99230c7dba8828bd2</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual evtgba_iterator *</type>
      <name>pred_iter</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>aeecb6afd07f3bc6f25d331206d2694fa</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a404b5891b9c6d89e7c00119f50b8d904</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_label</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a1d0748a93153bb953567f4400c97b1f6</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_condition</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a6cb3397d6eebf41ab57a52ee62f24f81</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a64cfc4f0744e445bd324bc342e5ac1a2</anchor>
      <arglist>(const symbol_set &amp;symset) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const symbol_set &amp;</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>acbaa981617d85ed25bc8ffda29a0da3b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const symbol_set &amp;</type>
      <name>alphabet</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a390311f7dc8543582fbe300d575db129</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>evtgba</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a4e0cd70bfc949737c24cd5feaa79a639</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_iterator</name>
    <filename>classspot_1_1evtgba__iterator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~evtgba_iterator</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>a9d8c61953e4e360e67656eb5a7f1e855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>a71d31cdc1a9fb301f127381a40eb0fb5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>a7bf70fa00c95a082ab1005a54b660bd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>a84fdb9f0f1865a05167d0091945a92d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>ae66fa08d18c32f6c6aac72e633d6568a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const symbol *</type>
      <name>current_label</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>a285a4d9e4af5422ea3223cb675fd1202</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual symbol_set</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba__iterator.html</anchorfile>
      <anchor>affc2688e59a3d6b4c9f98f49fc3c934c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_explicit</name>
    <filename>classspot_1_1evtgba__explicit.html</filename>
    <base>spot::evtgba</base>
    <class kind="struct">spot::evtgba_explicit::state</class>
    <class kind="struct">spot::evtgba_explicit::transition</class>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>transition_list</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a4677acf05a8457e05eeb2e6cf4da892d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evtgba_explicit</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a8ab45da7a566e4bc1a36e7a6929a2b0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~evtgba_explicit</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a9e55ed8ffcd48b6a6988e3122fc9b3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>init_iter</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>af45bb6a27de2749842d544542cb5d4ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a2f587aef77ca4ad6c20289ba83ec5a5b</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>pred_iter</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a4ed8eeaedc7f99b871abdb99269efa55</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a1aa7d03a2e3cf816a554656fbd1702b8</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const symbol_set &amp;</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a843354b6a8d5a8e91f28186c8bb52d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const symbol_set &amp;</type>
      <name>alphabet</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a8a6f84608c98fab8bcd5da389d5dd45a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a746910840b7172bc47c736699873447e</anchor>
      <arglist>(const std::string &amp;source, const rsymbol &amp;label, rsymbol_set acc, const std::string &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a5729d795c5a0133f14b0a0a197b8e188</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>ab5c309fa836cebcb0d18cabdbb1ae34f</anchor>
      <arglist>(const rsymbol &amp;acc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_label</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a1d0748a93153bb953567f4400c97b1f6</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_condition</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a6cb3397d6eebf41ab57a52ee62f24f81</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a64cfc4f0744e445bd324bc342e5ac1a2</anchor>
      <arglist>(const symbol_set &amp;symset) const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const std::string, evtgba_explicit::state *, string_hash &gt;</type>
      <name>ns_map</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>aa16e2b4b65c45c9475af7a713f538fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const evtgba_explicit::state *, std::string, ptr_hash&lt; evtgba_explicit::state &gt; &gt;</type>
      <name>sn_map</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>ab97038f0504cdf602c705837ad6f40aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>state *</type>
      <name>declare_state</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a2ee2537d11d6a1f6de223779328ac46c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ns_map</type>
      <name>name_state_map_</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a372eb937ce1d9b428c936a0753eb9771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sn_map</type>
      <name>state_name_map_</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>ac71fdf79c51b3bae07c5ba09aa7a97b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>symbol_set</type>
      <name>acc_set_</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a978b4d26fdfda151c88f9599c15b43c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>symbol_set</type>
      <name>alphabet_</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a609277b4be1ff425b595630e7cd83c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>transition_list</type>
      <name>init_states_</name>
      <anchorfile>classspot_1_1evtgba__explicit.html</anchorfile>
      <anchor>a8b0c5f622be35e8bcd8bc2410d834726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::evtgba_explicit::state</name>
    <filename>structspot_1_1evtgba__explicit_1_1state.html</filename>
    <member kind="variable">
      <type>transition_list</type>
      <name>in</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1state.html</anchorfile>
      <anchor>abdd128cb3cf9cfa528715693c3eb6e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>transition_list</type>
      <name>out</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1state.html</anchorfile>
      <anchor>af3302ed17eccd35a966d5d6228da6a9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::evtgba_explicit::transition</name>
    <filename>structspot_1_1evtgba__explicit_1_1transition.html</filename>
    <member kind="variable">
      <type>const symbol *</type>
      <name>label</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1transition.html</anchorfile>
      <anchor>afa33a4f90c3ee7ce1e1dea480b7e8ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>symbol_set</type>
      <name>acceptance_conditions</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1transition.html</anchorfile>
      <anchor>a087ed92748df1e44ee858e6ff8fa1617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>state *</type>
      <name>in</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1transition.html</anchorfile>
      <anchor>ad625abb8593ae2da6f87e79f762c49c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>state *</type>
      <name>out</name>
      <anchorfile>structspot_1_1evtgba__explicit_1_1transition.html</anchorfile>
      <anchor>aed079ec9410046f9cd280a4bb38fb8c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_evtgba_explicit</name>
    <filename>classspot_1_1state__evtgba__explicit.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_evtgba_explicit</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>afe4f49c8898b875826c6a152a2f48fd6</anchor>
      <arglist>(const evtgba_explicit::state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>af4bc379eedc9945c63316f2e473eb332</anchor>
      <arglist>(const spot::state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>a6771ab7466adf4ad202d1e105ce0999a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_evtgba_explicit *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>ab8f9960a92ec9f4d1ad96b2942ea611d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_evtgba_explicit</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>a226a8f9c05117bd084d8a2678ce25919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const evtgba_explicit::state *</type>
      <name>get_state</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>ae2ede234a92ab451bbfd288e859e866b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const evtgba_explicit::state *</type>
      <name>state_</name>
      <anchorfile>classspot_1_1state__evtgba__explicit.html</anchorfile>
      <anchor>a07a131cd86eba7ca7115585922df3543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_product</name>
    <filename>classspot_1_1evtgba__product.html</filename>
    <base>spot::evtgba</base>
    <member kind="typedef">
      <type>std::vector&lt; const evtgba * &gt;</type>
      <name>evtgba_product_operands</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a2d016d95b60a34136fe3a2d2d54b5d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const symbol *, std::set&lt; int &gt; &gt;</type>
      <name>common_symbol_table</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>af8bcb5296a2a25d167eb04496c70f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>evtgba_product</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a82fceba91a1c73c35734fb74cde201c2</anchor>
      <arglist>(const evtgba_product_operands &amp;op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~evtgba_product</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a5636576ff86131e7d0a728db150be3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>init_iter</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a24f211c072432f01b8989654da2c4e0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>acc7f0b353e845572771c6ef68cd5b81a</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual evtgba_iterator *</type>
      <name>pred_iter</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>abeac4d97aa4376b43d5080e4e1ee1e49</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a501126ea8050088ab8910a87c33d232f</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const symbol_set &amp;</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a50ce8230b66e7a1c3b29d607b3b26773</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const symbol_set &amp;</type>
      <name>alphabet</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a4d7a149ae79f51b2868c997e8d23a275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_label</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a1d0748a93153bb953567f4400c97b1f6</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_condition</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a6cb3397d6eebf41ab57a52ee62f24f81</anchor>
      <arglist>(const symbol *symbol) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_acceptance_conditions</name>
      <anchorfile>classspot_1_1evtgba.html</anchorfile>
      <anchor>a64cfc4f0744e445bd324bc342e5ac1a2</anchor>
      <arglist>(const symbol_set &amp;symset) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const evtgba_product_operands</type>
      <name>op_</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a52adb5842c2f63b8a8515a73d7ab1fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>symbol_set</type>
      <name>alphabet_</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>aa3e031418cc1d0ac65227bb33cc14c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>symbol_set</type>
      <name>all_acc_</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>a4cf307b3f6a8bec8d2a5790285b1c945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>common_symbol_table</type>
      <name>common_symbols_</name>
      <anchorfile>classspot_1_1evtgba__product.html</anchorfile>
      <anchor>ad4ccc5dc54c974f7b325ed37314acfa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::symbol</name>
    <filename>classspot_1_1symbol.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a2d3e47dcadbba6ea03327079bef37385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a5ed0588e5e78eb6ebb01e1eb549e14b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unref</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>aa2f6f801a6eaf919d331e701d0960054</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const symbol *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a7cb3a96073a869a871a0adbf6f5c0f9b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>ad14ac6b52b2674d8b1626cedb2869774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a05da366065e59d84362d9a895c0a9e0c</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; const std::string, const symbol * &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>ac735ed8997cb6ab4e510f8af5af3cf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a8cf1cd6cabdcca272b458ef9daa1e0ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>symbol</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a85153fd31287ee08b23c52210fb999e0</anchor>
      <arglist>(const std::string *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~symbol</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a68fce5a9b221466d42b68d9e8f3a57d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances_</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a3699255941c0138ee008f00c4c5f5b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>symbol</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a4623a4e645c68b49a8ef8ebc83d6b5c7</anchor>
      <arglist>(const symbol &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string *</type>
      <name>name_</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a9b21039ac115179e9662909193a6cc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>refs_</name>
      <anchorfile>classspot_1_1symbol.html</anchorfile>
      <anchor>a457748ae8181a11bc924c93b7b4a5851</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::rsymbol</name>
    <filename>classspot_1_1rsymbol.html</filename>
    <member kind="function">
      <type></type>
      <name>rsymbol</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a8430c48c75ae91c15960d0861d79d94f</anchor>
      <arglist>(const symbol *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rsymbol</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a4cb4d6289efb89f514c7fcd44c16ca34</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rsymbol</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a788f2c486d3ced5c0895fa255efe1bb7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rsymbol</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a0ee48b6af2c8c0f08945e71928346d59</anchor>
      <arglist>(const rsymbol &amp;rs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~rsymbol</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>aee84daf797689825550a0b41ae7815e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const symbol *</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>aba0324e4478a6592ac2dc5b57adc2515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const rsymbol &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a4b1d92f941d7a7bbcf50025a1fd80689</anchor>
      <arglist>(const rsymbol &amp;rs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>aaaf878e34ca2b6fe5e4809a31fc97737</anchor>
      <arglist>(const rsymbol &amp;rs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a8208e282b727703e7f8e2ab09201d4ed</anchor>
      <arglist>(const rsymbol &amp;rs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>a5510637a8eb3eafb82b2db288c3603de</anchor>
      <arglist>(const rsymbol &amp;rs) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const symbol *</type>
      <name>s_</name>
      <anchorfile>classspot_1_1rsymbol.html</anchorfile>
      <anchor>acfce70452a20e9e475eb5611928ac0a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_reachable_iterator</name>
    <filename>classspot_1_1evtgba__reachable__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>evtgba_reachable_iterator</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>aad215c9dd64e2ada976034186c84f0b0</anchor>
      <arglist>(const evtgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~evtgba_reachable_iterator</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ab9bed460740f30800c3f48cda4f4d824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad0af722c94538a07affe2c965feb342a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a46605998bf6a55f260044447766523d3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad9c252df734681b986bbc0f4ea524cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ae61c37c9e29f0a79e1e5face6bbcb133</anchor>
      <arglist>(const state *s, int n, evtgba_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a59bce0b0fcaf447647c4f7753a0dba6c</anchor>
      <arglist>(int in, int out, const evtgba_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>afce8d2337bf9df243dee8446de8849eb</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a6f180c98c268292a4ea96841e749fa5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af58355525031fe6f97f68944458841c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const evtgba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>afb33cd58f4836ccdcd1ea208e04b3079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af8910bbbb51a3652d8d5cd18116e9412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_reachable_iterator_depth_first</name>
    <filename>classspot_1_1evtgba__reachable__iterator__depth__first.html</filename>
    <base>spot::evtgba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>evtgba_reachable_iterator_depth_first</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>ac78a17176417eaa0462b3101cfbbaa20</anchor>
      <arglist>(const evtgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>ac9d67ceda8fb9bb84235f5e4c4802872</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>afdfbb44f854c7167015d052255d28951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad0af722c94538a07affe2c965feb342a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a46605998bf6a55f260044447766523d3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad9c252df734681b986bbc0f4ea524cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ae61c37c9e29f0a79e1e5face6bbcb133</anchor>
      <arglist>(const state *s, int n, evtgba_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a59bce0b0fcaf447647c4f7753a0dba6c</anchor>
      <arglist>(int in, int out, const evtgba_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af58355525031fe6f97f68944458841c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>a4eb7720780d6b5a89869eae06b7d844b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const evtgba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>afb33cd58f4836ccdcd1ea208e04b3079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af8910bbbb51a3652d8d5cd18116e9412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::evtgba_reachable_iterator_breadth_first</name>
    <filename>classspot_1_1evtgba__reachable__iterator__breadth__first.html</filename>
    <base>spot::evtgba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>evtgba_reachable_iterator_breadth_first</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>afb9e32466120ed5493a0a82da74d227e</anchor>
      <arglist>(const evtgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>acebc86b514e728ac74fa8bad7385e679</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>afd98c3d35faaaf8c2989119c75bd7bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad0af722c94538a07affe2c965feb342a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a46605998bf6a55f260044447766523d3</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ad9c252df734681b986bbc0f4ea524cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>ae61c37c9e29f0a79e1e5face6bbcb133</anchor>
      <arglist>(const state *s, int n, evtgba_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>a59bce0b0fcaf447647c4f7753a0dba6c</anchor>
      <arglist>(int in, int out, const evtgba_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af58355525031fe6f97f68944458841c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a70ab1daa5e78f0209719cc1542ef9aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const evtgba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>afb33cd58f4836ccdcd1ea208e04b3079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1evtgba__reachable__iterator.html</anchorfile>
      <anchor>af8910bbbb51a3652d8d5cd18116e9412</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::fair_kripke_succ_iterator</name>
    <filename>classspot_1_1fair__kripke__succ__iterator.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>fair_kripke_succ_iterator</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>af5f13094ee31ec1532f1828eda633884</anchor>
      <arglist>(const bdd &amp;cond, const bdd &amp;acc_cond)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fair_kripke_succ_iterator</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>aaa763b8c564155e0919168def4541988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>a8014eccf2ef9156d8d5816554d3a0398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>ac6ac67ac1f85ba3fc76f506b18864b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a09901d8bb1addc2512f99ea2d47dc70a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>aad7914dae3d29f19e3d48c628a4e2da1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a8e5b92f684fad0d93c49a85342cad192</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>ac2e83755c24ac845e3dc88a371bbd50c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>cond_</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>a0890022e94cd8bd0e366dc2131830bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>acc_cond_</name>
      <anchorfile>classspot_1_1fair__kripke__succ__iterator.html</anchorfile>
      <anchor>a20455bd0a2d5d3d2be6f50c97ca730b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::fair_kripke</name>
    <filename>classspot_1_1fair__kripke.html</filename>
    <base>spot::tgba</base>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>state_condition</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>ab82a2fe269593fecab7c63d0c4c9ac03</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>state_acceptance_conditions</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>a53abb58e05f201b9b2ce74d8e9798e3a</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a3455011d3860bbd101a7f75ae2aad009</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a372b5a1582f8cb9fccd91c413350c8b8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a5a52dc9090be87bf46c59d487bf84f42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a2700b9f829bf2a884e29df8394ee2521</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a752a730728601d572f5147dd8811316d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a4d531428cb11fe9be3ddbf1928eb3657</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>a3b16acfa5d90c43b6086a3ed07be3959</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>ad7f0b0379bc951430835a079983c4587</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::kripke_succ_iterator</name>
    <filename>classspot_1_1kripke__succ__iterator.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>kripke_succ_iterator</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>ad9e251d935e182910c21e05cb85e75d4</anchor>
      <arglist>(const bdd &amp;cond)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~kripke_succ_iterator</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>a3156060e055c280711ae1ba50a9da9a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>a0e4579806f511b2f3dfadcb00bb39149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>abf13d02bf3d7ca433a98cecbfbbdf7a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a09901d8bb1addc2512f99ea2d47dc70a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>aad7914dae3d29f19e3d48c628a4e2da1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a8e5b92f684fad0d93c49a85342cad192</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>ac2e83755c24ac845e3dc88a371bbd50c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>cond_</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>a53db0c2c8253d2ea56c8d2e6bbbe531a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::kripke</name>
    <filename>classspot_1_1kripke.html</filename>
    <base>spot::fair_kripke</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~kripke</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>aa1fa1d92500924dd1a51cf5e314e7cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>state_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a86e7dadbe7fc48e2dbaa95f15dda57f3</anchor>
      <arglist>(const state *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a6696401b19377b3ffbf9339e93e09c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a6fa3b564adacefa55542641b0d994f4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>state_condition</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>ab82a2fe269593fecab7c63d0c4c9ac03</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a3455011d3860bbd101a7f75ae2aad009</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a372b5a1582f8cb9fccd91c413350c8b8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a5a52dc9090be87bf46c59d487bf84f42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a2700b9f829bf2a884e29df8394ee2521</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>a3b16acfa5d90c43b6086a3ed07be3959</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>ad7f0b0379bc951430835a079983c4587</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_kripke</name>
    <filename>classspot_1_1state__kripke.html</filename>
    <base>spot::state</base>
    <member kind="function" protection="private">
      <type></type>
      <name>state_kripke</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a89b2611de96da62366776ec4572217ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a52bf31fe8ce536c72c88dfb2a1128518</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a34efce572c4f354bca8fa6da70d6b8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual state_kripke *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a14754602a19036e5ad361dbcb1d41bb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>aa753f419fd919cd1c48b4799650f3c80</anchor>
      <arglist>(bdd f)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_succ</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a1e18ec87d68f0f4140a51736c805c2f7</anchor>
      <arglist>(state_kripke *succ)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual bdd</type>
      <name>as_bdd</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>ad5cbce91e2d23981f0ba3cb54a08534c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a8b56f189ba8da6b3e5ab2b0bc48ad501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~state_kripke</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>acb2d640e3a42c1210be5545d611de27e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const std::list&lt; state_kripke * &gt; &amp;</type>
      <name>get_succ</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>aeb8bcdce53505033d4de8026aa8a2c1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>bdd_</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a6716294b34b0d5f7142493d829e5cd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; state_kripke * &gt;</type>
      <name>succ_</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a46792dec215b248b617a1d9cc7041c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>kripke_explicit</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>a1b022d37f82af298b358577d2aed6634</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>kripke_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1state__kripke.html</anchorfile>
      <anchor>ade420e5d0f3bcdf4a102b455ebf5b6df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::kripke_explicit_succ_iterator</name>
    <filename>classspot_1_1kripke__explicit__succ__iterator.html</filename>
    <base>spot::kripke_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>kripke_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>acd712e4780e367834753e1c9de7c4f11</anchor>
      <arglist>(const state_kripke *, bdd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~kripke_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>ad966f5a5cd8be7c808643b2b733ae9ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>a1ab2d99a137978a613cb3e2ace890282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>a8c9541840c401605b6d0b2611dc05b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>af412537fd24d2fa522deff91e56ae86c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_kripke *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>a3ca6e69059ad49e72a3413ab38ebf647</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>a0e4579806f511b2f3dfadcb00bb39149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>abf13d02bf3d7ca433a98cecbfbbdf7a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>cond_</name>
      <anchorfile>classspot_1_1kripke__succ__iterator.html</anchorfile>
      <anchor>a53db0c2c8253d2ea56c8d2e6bbbe531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const state_kripke *</type>
      <name>s_</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>a38fa8d022d83a9d8f528aa479c809d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::list&lt; state_kripke * &gt;::const_iterator</type>
      <name>it_</name>
      <anchorfile>classspot_1_1kripke__explicit__succ__iterator.html</anchorfile>
      <anchor>aca5a8d8870ff2a17fe996911d1639589</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::kripke_explicit</name>
    <filename>classspot_1_1kripke__explicit.html</filename>
    <base>spot::kripke</base>
    <member kind="function">
      <type></type>
      <name>kripke_explicit</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a09dd8d97f585705edaec6f03c2396c95</anchor>
      <arglist>(bdd_dict *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kripke_explicit</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a0034a611f8e0b61295d1f6ac28e771f9</anchor>
      <arglist>(bdd_dict *, state_kripke *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~kripke_explicit</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a615b01daff80b42aea4d7c4c23b527bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>aa533c7b99b5accf9c51a038fdfe38a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_kripke *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a2f32e0d705e24ddf85697c740eeea2b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>kripke_explicit_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a9272837dfae76a266b2ede2339fa3142</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>state_condition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a01f1f2b3c6b2746cdacb23e46a700ecf</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>state_condition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a9677618bc46d79b4f7c1df503bf280c7</anchor>
      <arglist>(const std::string) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a643d1878bcc92522fd7bf0355e3baeae</anchor>
      <arglist>(const state *) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>acf94abbb44466ef441e4f6d4345e5c10</anchor>
      <arglist>(std::string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a0b2e7ecb1907191d14b91a8c40e19053</anchor>
      <arglist>(std::string source, std::string dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a0d6c1a8223752d522750ec37613d80a8</anchor>
      <arglist>(bdd add, std::string on_me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a0b674bd369693621924df050458dedf7</anchor>
      <arglist>(const ltl::formula *f, std::string on_me)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; const state_kripke *, std::string &gt; &amp;</type>
      <name>sn_get</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a6f75caf56ec57a94fbbbb71f399751da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>state_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a86e7dadbe7fc48e2dbaa95f15dda57f3</anchor>
      <arglist>(const state *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a6696401b19377b3ffbf9339e93e09c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1kripke.html</anchorfile>
      <anchor>a6fa3b564adacefa55542641b0d994f4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>a3b16acfa5d90c43b6086a3ed07be3959</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1fair__kripke.html</anchorfile>
      <anchor>ad7f0b0379bc951430835a079983c4587</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a621c1c833d0f306b73931e96f49ad29b</anchor>
      <arglist>(std::string, state_kripke *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>abcfd9e24a4cc69b1eccf55c888b1b09c</anchor>
      <arglist>(bdd add, state_kripke *on_me)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a33ecf14fd56f608f964169ae59494dcb</anchor>
      <arglist>(std::string source, const state_kripke *dest)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>ae88b9cf0f2ee8c3362a9724cca6e9566</anchor>
      <arglist>(state_kripke *source, const state_kripke *dest)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a9946fe3db41705798186f2021488ca45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state_kripke *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a01fa0fa929fc26ed1753a545bbdefc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; const std::string, state_kripke * &gt;</type>
      <name>ns_nodes_</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>aff9632b1a29ae87c4d766ef5faa0c871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; const state_kripke *, std::string &gt;</type>
      <name>sn_nodes_</name>
      <anchorfile>classspot_1_1kripke__explicit.html</anchorfile>
      <anchor>a95fdcb438deadb78bb56adef6e9d58fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::acc_compl</name>
    <filename>classspot_1_1acc__compl.html</filename>
    <member kind="function">
      <type></type>
      <name>acc_compl</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a933a9072b6dfc8df3b553d93b913b044</anchor>
      <arglist>(bdd all, bdd neg)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>complement</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a5ba398121c1e3549fb2f7fec43052079</anchor>
      <arglist>(const bdd acc)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>reverse_complement</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a981929b5319cb2101515a07559cb35e7</anchor>
      <arglist>(const bdd acc)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; bdd, bdd, bdd_hash &gt;</type>
      <name>bdd_cache_t</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a52ee350d93040ad38d6ee8263cacbfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a0df96524abc1f75325addb4c0c5d21df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a96614ed611d39540ed175a2f420a7054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_cache_t</type>
      <name>cache_</name>
      <anchorfile>classspot_1_1acc__compl.html</anchorfile>
      <anchor>a59f257a694cf482ab468f93671220c58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::acceptance_convertor</name>
    <filename>classspot_1_1acceptance__convertor.html</filename>
    <member kind="function">
      <type></type>
      <name>acceptance_convertor</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>a79304179a22bf95c20953a5afee21071</anchor>
      <arglist>(bdd allneg)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>as_positive_product</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>ac9f925ab119962c61e4b02a5ded36eb9</anchor>
      <arglist>(bdd acc)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>as_full_product</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>ab90ebbc89c53ec711fc0a583eeed21a9</anchor>
      <arglist>(bdd acc)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; bdd, bdd, bdd_hash &gt;</type>
      <name>bdd_cache_t</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>a27677bdd7a1d0f8c144bd7cc9ee01aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>allneg_</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>a500b7a6e9cba0fa576ae235dd7001b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_cache_t</type>
      <name>pos_prod_cache_</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>a980ec19c890d76d4fb6733f160cb94e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_cache_t</type>
      <name>full_prod_cache_</name>
      <anchorfile>classspot_1_1acceptance__convertor.html</anchorfile>
      <anchor>a1f39cde2d0dbbf00ab94748bed9d6712</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::bdd_allocator</name>
    <filename>classspot_1_1bdd__allocator.html</filename>
    <base protection="private">spot::free_list</base>
    <member kind="function">
      <type></type>
      <name>bdd_allocator</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a4b1a522cb8d4223fcdca2c6900741494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocate_variables</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a7b566c8e4046fe012d20e60ed4c058e9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_variables</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a12efeee5e8c5786d814996cab0ec3097</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a1ca5ce94f2ce0de339fc7f59f1d0c2ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lvarnum</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a3736ca5090949c9fb93745544b95daab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>initialized</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a3916225a141645c15fa4d53848ef4f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int, int &gt;</type>
      <name>pos_lenght_pair</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a2772e28510a1ad89342eeeb93a8fb9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; pos_lenght_pair &gt;</type>
      <name>free_list_type</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>af7e87c1c112d0e26b44396de9cc78843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extvarnum</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a396d46a37f327079e7217da8178579ba</anchor>
      <arglist>(int more)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual int</type>
      <name>extend</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a837f56b5f3d2347d915767b6105101dc</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a5e2485e960b7a0924c8801c19c7d9b43</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a970f34e2944cb3c6573d605c4d01859a</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_free_list</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a04eda5448cc79d16aefe8014ee95e097</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a0e9d104134e6db9feeb9a5ead1a4fe57</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>ab2ee6a3adeb1c8ae1a9bc062f3914349</anchor>
      <arglist>(int base, int n=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>aeac5a308e26bb6e6058e720da145bf5b</anchor>
      <arglist>(free_list_type::iterator i, int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_count</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a6837cabb4a7b847af6930462e75a57d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>free_list_type</type>
      <name>fl</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>afdaed42e797fc05cfab78c5450838b00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::bdd_less_than</name>
    <filename>structspot_1_1bdd__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1bdd__less__than.html</anchorfile>
      <anchor>ab37987e4084dfb9715775847ddb0d74c</anchor>
      <arglist>(const bdd &amp;left, const bdd &amp;right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::bdd_hash</name>
    <filename>structspot_1_1bdd__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1bdd__hash.html</anchorfile>
      <anchor>a407f199a05a0f402bc882ec55249cee6</anchor>
      <arglist>(const bdd &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::fixed_size_pool</name>
    <filename>classspot_1_1fixed__size__pool.html</filename>
    <class kind="struct">spot::fixed_size_pool::block_</class>
    <class kind="union">spot::fixed_size_pool::chunk_</class>
    <member kind="function">
      <type></type>
      <name>fixed_size_pool</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a6a4e2ff7241946bb41b10ad29016d415</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fixed_size_pool</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a186aa1b99e7caa7a8924dc5afae6c188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a12378ce82675d629e94180fe4a8d955d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a3d2cbc9689e5bb4a9c56573711787261</anchor>
      <arglist>(const void *ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a9d62efcc1cb00260204e4e4156e98f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct spot::fixed_size_pool::block_ *</type>
      <name>freelist_</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>ab27d147a7aa084eb054a724a628faad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>free_start_</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a66496316a7b2434b3c01964ad4f6a0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>free_end_</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>ac7d5484904937365815f5a48e3725544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>union spot::fixed_size_pool::chunk_ *</type>
      <name>chunklist_</name>
      <anchorfile>classspot_1_1fixed__size__pool.html</anchorfile>
      <anchor>a7d0755910ac432f8c797c3b63cbd9d1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::fixed_size_pool::block_</name>
    <filename>structspot_1_1fixed__size__pool_1_1block__.html</filename>
    <member kind="variable">
      <type>block_ *</type>
      <name>next</name>
      <anchorfile>structspot_1_1fixed__size__pool_1_1block__.html</anchorfile>
      <anchor>af1ed76608a5eebd5ea274a256fecaff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>spot::fixed_size_pool::chunk_</name>
    <filename>unionspot_1_1fixed__size__pool_1_1chunk__.html</filename>
    <member kind="variable">
      <type>chunk_ *</type>
      <name>prev</name>
      <anchorfile>unionspot_1_1fixed__size__pool_1_1chunk__.html</anchorfile>
      <anchor>a3b30fbc90c0ae2ac1c18de898ff16b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>data_</name>
      <anchorfile>unionspot_1_1fixed__size__pool_1_1chunk__.html</anchorfile>
      <anchor>a1e3177053d4634a5d82997b7e8526ce8</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::printable</name>
    <filename>classspot_1_1printable.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~printable</name>
      <anchorfile>classspot_1_1printable.html</anchorfile>
      <anchor>a5cd1a2d31b814905f47dc5e77db65f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classspot_1_1printable.html</anchorfile>
      <anchor>a7af140703430410b9ff723be3a2dcc48</anchor>
      <arglist>(std::ostream &amp;, const char *) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::printable_value</name>
    <filename>classspot_1_1printable__value.html</filename>
    <templarg>T</templarg>
    <base>spot::printable</base>
    <member kind="function">
      <type>const T &amp;</type>
      <name>val</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>acc843a6e7cb68136b2fa953a7c7c903d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>val</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>abd2cd01a26798e22d0fc3dddf2f41d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>ad237e9044fc47782c0374e7bda371352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>a1490ad89863e67e79541db0bd5f4c1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>printable_value &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>af777f031ba7f729ad49945a7cd3365cd</anchor>
      <arglist>(const T &amp;new_val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>a9a9dd78e7234f1852aba9da2713b0eaf</anchor>
      <arglist>(std::ostream &amp;os, const char *) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>val_</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>a9762cf71fc367d8237907fb87f34d78b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::printable_id</name>
    <filename>classspot_1_1printable__id.html</filename>
    <base>spot::printable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classspot_1_1printable__id.html</anchorfile>
      <anchor>aa79dfa3b6c2e5c09e17f1e9ef6f92e35</anchor>
      <arglist>(std::ostream &amp;os, const char *x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::printable_percent</name>
    <filename>classspot_1_1printable__percent.html</filename>
    <base>spot::printable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classspot_1_1printable__percent.html</anchorfile>
      <anchor>a409b6e787ebebc6bc231decfd7469b46</anchor>
      <arglist>(std::ostream &amp;os, const char *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::formater</name>
    <filename>classspot_1_1formater.html</filename>
    <member kind="function">
      <type></type>
      <name>formater</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a42ec2c37b66de418fef53891dc83615c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~formater</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a37e60f3fbc41005a706a3ba63a6edc0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prime</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>af760bacb505f4262d8ba966993b16253</anchor>
      <arglist>(const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prime</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>ad4519a348ab6df362c10dab6d3b60b35</anchor>
      <arglist>(const std::string &amp;fmt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a3ee523bf70b7d9ba9e350534334e2633</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a1fd3752a72f250ba8d73cbbede1d9868</anchor>
      <arglist>(char c, const printable *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_output</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a2d321a5ed339b3bf33869dc3c8933e2e</anchor>
      <arglist>(std::ostream &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a64b02cc1c3804b490463888757be35bb</anchor>
      <arglist>(const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a2aec18e8b23e0fff4e6641846e16d67d</anchor>
      <arglist>(std::ostream &amp;output, const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a5bae69390fc6e76ceea86eca57cbf888</anchor>
      <arglist>(const std::string &amp;fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>af6cabca4ec183a6fdf0827575516b43b</anchor>
      <arglist>(std::ostream &amp;output, const std::string &amp;fmt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>output_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>acacdc5366d3026ef162461e250c42fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>pos_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a1ea9b26762ef5b3abf5bc388b6a2a009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_id</type>
      <name>id</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a13b8e9fa4db49aebde1ec821d4b41122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_percent</type>
      <name>percent</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>ac8ba9e2cbb6770255e9056a07a9f8c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bool &gt;</type>
      <name>has_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>adb4b111c0489d4393d593f0bde188b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; const printable * &gt;</type>
      <name>call_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a482feda7e16d599563247ef76ccb5b8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::free_list</name>
    <filename>classspot_1_1free__list.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~free_list</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>aad22b51d38fb4e5ef3553fddcac227fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a5e2485e960b7a0924c8801c19c7d9b43</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a970f34e2944cb3c6573d605c4d01859a</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_free_list</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a04eda5448cc79d16aefe8014ee95e097</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a0e9d104134e6db9feeb9a5ead1a4fe57</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>ab2ee6a3adeb1c8ae1a9bc062f3914349</anchor>
      <arglist>(int base, int n=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_count</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a6837cabb4a7b847af6930462e75a57d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int, int &gt;</type>
      <name>pos_lenght_pair</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a2772e28510a1ad89342eeeb93a8fb9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; pos_lenght_pair &gt;</type>
      <name>free_list_type</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>af7e87c1c112d0e26b44396de9cc78843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>extend</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>af07cab38c8bde1e572c1c0418c9df068</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>aeac5a308e26bb6e6058e720da145bf5b</anchor>
      <arglist>(free_list_type::iterator i, int base, int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>free_list_type</type>
      <name>fl</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>afdaed42e797fc05cfab78c5450838b00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ptr_hash</name>
    <filename>structspot_1_1ptr__hash.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1ptr__hash.html</anchorfile>
      <anchor>a73e35d89d09f978af776f01603f0b6cc</anchor>
      <arglist>(const T *p) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::identity_hash</name>
    <filename>structspot_1_1identity__hash.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1identity__hash.html</anchorfile>
      <anchor>ade335b8a2aa016871038c221cb668ded</anchor>
      <arglist>(const T &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::char_ptr_less_than</name>
    <filename>structspot_1_1char__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1char__ptr__less__than.html</anchorfile>
      <anchor>a3e02bb1bbaeba15dd3f05dc765565b02</anchor>
      <arglist>(const char *left, const char *right) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::minato_isop</name>
    <filename>classspot_1_1minato__isop.html</filename>
    <class kind="struct">spot::minato_isop::local_vars</class>
    <member kind="function">
      <type></type>
      <name>minato_isop</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>a219911ee13dbbe288f7ec765bf4eab93</anchor>
      <arglist>(bdd input)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>minato_isop</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>a2962f8b4798aad61c41aa2e1124581f2</anchor>
      <arglist>(bdd input, bdd vars)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>next</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>af3b6eb9c04010f353116a38ed670b7e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::stack&lt; local_vars &gt;</type>
      <name>todo_</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>a2c912d2bea55998da6e9752a6257f8ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::stack&lt; bdd &gt;</type>
      <name>cube_</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>a34b35880b289790bc5d09f20c83cb68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>ret_</name>
      <anchorfile>classspot_1_1minato__isop.html</anchorfile>
      <anchor>a8d5254583eb16ceb3f317eeba5f76202</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::minato_isop::local_vars</name>
    <filename>structspot_1_1minato__isop_1_1local__vars.html</filename>
    <member kind="enumvalue">
      <name>FirstStep</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>ac3fa78bef0d7824763406a907ad76760a95e18361d18985760bc7919e01548b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SecondStep</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>ac3fa78bef0d7824763406a907ad76760ab0b480fe983530645b2a451ba2aceb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ThirdStep</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>ac3fa78bef0d7824763406a907ad76760ad5775ec96ccb562a51b7a35f334d2ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FourthStep</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>ac3fa78bef0d7824763406a907ad76760a89a96f6c0cfe2dd4c3f73659f63623be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>local_vars</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a5b0c1b615df9ff440727989d96107cb6</anchor>
      <arglist>(bdd f_min, bdd f_max, bdd vars)</arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f_min</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a05bb2eb9cffa94dd0dbfa83b4e3de2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f_max</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>aaa34af86121a8ad985a78f77739be007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum spot::minato_isop::local_vars::@3</type>
      <name>step</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>ab7d0519e813d44d741b37efe08801ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>vars</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>afd6f727c4e82bc00ce87b6e0cd8fb4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>v1</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a1a2e1004ad0ca070b95d9a2add2a89f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f0_min</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a207f3bbf4d05ab88288eb7a1f0576999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f0_max</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a50bd324b1bf592da76cd3c777e4659ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f1_min</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a2194c547aad267e834052da779bd21a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>f1_max</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a441321a81124470f302fe508f979521a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>g0</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a2cfa20ce2b1e344ae7676c1878ffb0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>g1</name>
      <anchorfile>structspot_1_1minato__isop_1_1local__vars.html</anchorfile>
      <anchor>a7123d84af84fa88a237c60e4214bff7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::loopless_modular_mixed_radix_gray_code</name>
    <filename>classspot_1_1loopless__modular__mixed__radix__gray__code.html</filename>
    <member kind="function">
      <type></type>
      <name>loopless_modular_mixed_radix_gray_code</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a565b6c52e7b37b83bb829095e11c69c9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~loopless_modular_mixed_radix_gray_code</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a53934ac1621f8bd1c55ef9ccbf9e4a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>a_first</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>af1aab585098500e6acb78675967ef530</anchor>
      <arglist>(int j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>a_next</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>ad2299afa2a00ff9cc5f202b9854bdf4d</anchor>
      <arglist>(int j)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>a_last</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>aed1aa03144c6dcb46e13c38b5c51a260</anchor>
      <arglist>(int j) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a9c918e8524bdeb3e3a80054becbd30df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>last</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a98269cadd64926b5cf408cc4ab0ed2a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a60dcf75008df5bbab91533ee6ac03297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>next</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a5ef37d3a269687be631a65769ad209b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>n_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a2551f357ca1be741bc5300d06a4c3b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>done_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a01d93ad137b3a2368270ec3779e32eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a68e9eea9d2632d66f2ef1042f2d27b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>f_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a6f86e8454e331df5b4aacf5eef3f41ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>m_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>aa8342a062c7d6845b4473c0617bb4552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>s_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a3dfc0ecaeaf71747a972ce8339d63e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int *</type>
      <name>non_one_radixes_</name>
      <anchorfile>classspot_1_1loopless__modular__mixed__radix__gray__code.html</anchorfile>
      <anchor>a7c8c0adbecfdb2060d4696cf2bbf799e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::multiple_size_pool</name>
    <filename>classspot_1_1multiple__size__pool.html</filename>
    <class kind="struct">spot::multiple_size_pool::block_</class>
    <class kind="union">spot::multiple_size_pool::chunk_</class>
    <member kind="function">
      <type></type>
      <name>multiple_size_pool</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>ae56659d9df67d2439688a685d4871588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~multiple_size_pool</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>a438325e77081406270ccfd860cec5ddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>fixsize</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>a213ba0de0747589955a329fa0822b475</anchor>
      <arglist>(size_t size) const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>a179d051d39ac6ac65b8d9688b421152c</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>ab4090c05e6a847fa02d6364e653b3d49</anchor>
      <arglist>(const void *ptr, size_t size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Sgi::hash_map&lt; size_t, block_ * &gt;</type>
      <name>freelist_</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>a2b5a1d94dac59422dc579500e6004914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>free_start_</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>ac6283f795c1f0ed6827b2e16fc97e349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char *</type>
      <name>free_end_</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>af64c5ea334648c96e619aad2c90c9ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>union spot::multiple_size_pool::chunk_ *</type>
      <name>chunklist_</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>abb5c4b1dd309d544b9a334a6fba635d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_t</type>
      <name>alignment_</name>
      <anchorfile>classspot_1_1multiple__size__pool.html</anchorfile>
      <anchor>ad3538057a7ef6fda2684010b8ae1881c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::multiple_size_pool::block_</name>
    <filename>structspot_1_1multiple__size__pool_1_1block__.html</filename>
    <member kind="variable">
      <type>block_ *</type>
      <name>next</name>
      <anchorfile>structspot_1_1multiple__size__pool_1_1block__.html</anchorfile>
      <anchor>a13e072523e05ce4eab88daac8377d508</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>spot::multiple_size_pool::chunk_</name>
    <filename>unionspot_1_1multiple__size__pool_1_1chunk__.html</filename>
    <member kind="variable">
      <type>chunk_ *</type>
      <name>prev</name>
      <anchorfile>unionspot_1_1multiple__size__pool_1_1chunk__.html</anchorfile>
      <anchor>ae3acc01d475b05219f8dd664f58e2bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>data_</name>
      <anchorfile>unionspot_1_1multiple__size__pool_1_1chunk__.html</anchorfile>
      <anchor>a673eca9f91e88bbde71d1662b027c64a</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::option_map</name>
    <filename>classspot_1_1option__map.html</filename>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>acb6b25bf19608a1927e5d8daaba72a05</anchor>
      <arglist>(const char *options)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>a9b3db963d1cca0285d320bf5ea616d8c</anchor>
      <arglist>(const char *option, int def=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator[]</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>adbe2aa8f513c8f4251b6f78f722c3cdf</anchor>
      <arglist>(const char *option) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>set</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>ad9fb6b43a106db55f9b84b59ed766646</anchor>
      <arglist>(const char *option, int val, int def=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>a54ca434ab0eec0f87e1b5bcf71f50785</anchor>
      <arglist>(const option_map &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>a6855a963741c87f0dcb89fe12f98e849</anchor>
      <arglist>(const char *option)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>options_</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>acffda8c6d21e00ac91edee8b146bd5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classspot_1_1option__map.html</anchorfile>
      <anchor>aff406edae234bc7fe98f6eea26adfbca</anchor>
      <arglist>(std::ostream &amp;os, const option_map &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::barand</name>
    <filename>classspot_1_1barand.html</filename>
    <templarg>gen</templarg>
    <member kind="function">
      <type></type>
      <name>barand</name>
      <anchorfile>classspot_1_1barand.html</anchorfile>
      <anchor>adf8fb378d8caedf22d3d352c012f46a2</anchor>
      <arglist>(int n, double p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rand</name>
      <anchorfile>classspot_1_1barand.html</anchorfile>
      <anchor>ae425424501fab863b0a7004ca362380f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>n_</name>
      <anchorfile>classspot_1_1barand.html</anchorfile>
      <anchor>a08495399bb40a9a9d0d3aabb1d6b1eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>m_</name>
      <anchorfile>classspot_1_1barand.html</anchorfile>
      <anchor>ac42907f5ffd782975fc988339a00a1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>s_</name>
      <anchorfile>classspot_1_1barand.html</anchorfile>
      <anchor>a7893988ee67877fbc356a4727c1596fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::time_info</name>
    <filename>structspot_1_1time__info.html</filename>
    <member kind="function">
      <type></type>
      <name>time_info</name>
      <anchorfile>structspot_1_1time__info.html</anchorfile>
      <anchor>aee80540e8f2bd804b5f34b799cd0531e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>clock_t</type>
      <name>utime</name>
      <anchorfile>structspot_1_1time__info.html</anchorfile>
      <anchor>af709012d05bb4594079496920490f4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>clock_t</type>
      <name>stime</name>
      <anchorfile>structspot_1_1time__info.html</anchorfile>
      <anchor>aed18079ee02fa17955f86ebda19146fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::timer</name>
    <filename>classspot_1_1timer.html</filename>
    <member kind="function">
      <type></type>
      <name>timer</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a3d2a692faa93ec0dcf88efda28de3e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a55c6674711dab0e67008dc378011e46d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a34330e7a7a879a13b2dfb60df84867cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>clock_t</type>
      <name>utime</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>aaab40549d862ebfbb7d07ccf0ba4a129</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>clock_t</type>
      <name>stime</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a87c8d0c9bed27d39846f0ec421daffbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a868bfb05189f521d08dfb274b93b459a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_info</type>
      <name>start_</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a8914fc2c0e6fa6efa8dd35337f9bd444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>time_info</type>
      <name>total_</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>a47049a64de0ec56cda21b852bf0a2436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>running</name>
      <anchorfile>classspot_1_1timer.html</anchorfile>
      <anchor>abe12535bc6417dba996956a6dc42cfab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::timer_map</name>
    <filename>classspot_1_1timer__map.html</filename>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a85d4bf24749d93be6dcbb5e66aacd249</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a709679565ddbc19293c6f63138367911</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>ab35d7a8e21cc87716039cecd5040856e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const spot::timer &amp;</type>
      <name>timer</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a0b2786417c063a93c851174df0ef2071</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>spot::timer &amp;</type>
      <name>timer</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a02d67150c7c115d2f06ae49ef1dadc19</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a60fd945cfdc64df8e7ca1bc3a975c346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>afafd3d361715574ade84ffd0fc74c15e</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_all</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>af2293403679d234d686f650ba564cf35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; spot::timer, int &gt;</type>
      <name>item_type</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a5764ba323cbec13c5d05e3b937712eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, item_type &gt;</type>
      <name>tm_type</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>af265166b19b710115f871afb8216d611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tm_type</type>
      <name>tm</name>
      <anchorfile>classspot_1_1timer__map.html</anchorfile>
      <anchor>a99b0e1440918586eb75c0528bfc63169</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::unique_ptr</name>
    <filename>classspot_1_1unique__ptr.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>unique_ptr</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>a8fbf54c497dcff71e279481c96b0b7c8</anchor>
      <arglist>(pointer ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~unique_ptr</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>a9f3f391bb09edfc66bb3361e4665cc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator pointer</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>ac8a7c3ebd8e1cb2bd1dc8019d0ccd188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>ace530ee888905c775d09eca476b5e5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>a4b1a7bdc88e11b4457bb94a206d6a864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>unique_ptr</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>a292f9aa3a58db4f78edf273cfcb8e605</anchor>
      <arglist>(const unique_ptr &amp;up)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>unique_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>a20bd0e6c6c7aefc44c59c42b82d4419c</anchor>
      <arglist>(const unique_ptr &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pointer</type>
      <name>ptr_</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>ab8556d4fac85d9fee885bb4acd7d4f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend unique_ptr&lt; V &gt;</type>
      <name>make_unique</name>
      <anchorfile>classspot_1_1unique__ptr.html</anchorfile>
      <anchor>aa413e39edb12e646bfd9c28f6433f454</anchor>
      <arglist>(V *ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_state_conjunction</name>
    <filename>classspot_1_1explicit__state__conjunction.html</filename>
    <base>spot::saba_state_conjunction</base>
    <member kind="function">
      <type></type>
      <name>explicit_state_conjunction</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a647af99ebcf4ae3adbfad44275ad16e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>explicit_state_conjunction</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>ad4643d2438a094e5f5ff266fa490fd4e</anchor>
      <arglist>(const explicit_state_conjunction *other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~explicit_state_conjunction</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a5e7382128217e4eb0af49b2156b27587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>explicit_state_conjunction *</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>abbdc771e1bce4f797712df3686075143</anchor>
      <arglist>(const explicit_state_conjunction &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>ae40ff6fa0a676c7360d6fd9abbd9be5c</anchor>
      <arglist>(saba_state *state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a68bcdde7f9916cd9e4dc48c4aa9d0bb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a9570e7ccb81a33698c5f218f2b798405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>acd528a15232bdb1723c1486ea30b1d35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>explicit_state_conjunction *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a7bc58079a529be56845df71ab10a90b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual saba_state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a3e7336394301c23d637b3fc6edc3a661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_set&lt; shared_saba_state, spot::saba_state_shared_ptr_hash, spot::saba_state_shared_ptr_equal &gt;</type>
      <name>saba_state_set_t</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>ad1f47f5fd4ccf9f7b46d123445cc55f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>saba_state_set_t</type>
      <name>set_</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>aac562fa6fb2b555e372f3a1e765a4ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>saba_state_set_t::iterator</type>
      <name>it_</name>
      <anchorfile>classspot_1_1explicit__state__conjunction.html</anchorfile>
      <anchor>a02ecc6b04ba789081e514b24177d566a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba</name>
    <filename>classspot_1_1saba.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a945b1d98754fcdfa51d4185becbf7ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a7a79f6031065065e9b3cb043d127ed04</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a0909c9f4122c977e0be1511cfc4139f0</anchor>
      <arglist>(const saba_state *local_state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a37e27e9273d98fc5efadda40bea65c0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a2ab04c3225cd11f91c8117370ac659de</anchor>
      <arglist>(const saba_state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>a69cdd40dc78534ba73cd6b32e668e51c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>aa6896ae07574d91d22594620ac2cd9f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>saba</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>ac91d149da9c4122d20e0d52cb640aea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>num_acc_</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>addc90c9943adabf3483b2b8663292d1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_complement_tgba</name>
    <filename>classspot_1_1saba__complement__tgba.html</filename>
    <base>spot::saba</base>
    <member kind="function">
      <type></type>
      <name>saba_complement_tgba</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>abf99ead204f8b0807fc7ab499e308974</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba_complement_tgba</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a1295c23f88a156f4465020a1d40955dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual saba_state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>af3b28bc0db80637feb358a4d1e37c1ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual saba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a6cf49fb61448deb14622876973435d95</anchor>
      <arglist>(const saba_state *local_state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>aa5b9bae059ccb7f1bb48f54f8ceb6f61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>adfcb58a95bb7252329fac02a717a5b0c</anchor>
      <arglist>(const saba_state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a40289b127286faa04f894aa0fdd2b5af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1saba.html</anchorfile>
      <anchor>aa6896ae07574d91d22594620ac2cd9f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba_sba_proxy *</type>
      <name>automaton_</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a4aeb266ec972b9ad416bb2a075a6dd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>the_acceptance_cond_</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a8aa3aaf2b0df164baac62d8829abd09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nb_states_</name>
      <anchorfile>classspot_1_1saba__complement__tgba.html</anchorfile>
      <anchor>a827581baa0efc70cfe551abbdb472996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_state</name>
    <filename>classspot_1_1saba__state.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1saba__state.html</anchorfile>
      <anchor>a53a2cc4c8220a68d07c27280013cf25d</anchor>
      <arglist>(const saba_state *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1saba__state.html</anchorfile>
      <anchor>ae0de4ee7704984f2e38f0a06353c01a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_state *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1saba__state.html</anchorfile>
      <anchor>a72b71aba5cabdf27396e17df479986be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>acceptance_conditions</name>
      <anchorfile>classspot_1_1saba__state.html</anchorfile>
      <anchor>a0e454880406b23c2199d5d44b4236f80</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba_state</name>
      <anchorfile>classspot_1_1saba__state.html</anchorfile>
      <anchor>a79282255ad5be70a0169bfb0e4ce3b70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_ptr_less_than</name>
    <filename>structspot_1_1saba__state__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__ptr__less__than.html</anchorfile>
      <anchor>a5f889e722ad5a050409c5e9f65ce0eb7</anchor>
      <arglist>(const saba_state *left, const saba_state *right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_ptr_equal</name>
    <filename>structspot_1_1saba__state__ptr__equal.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__ptr__equal.html</anchorfile>
      <anchor>a1365adcb22a6bdfde87a847a50da9f8e</anchor>
      <arglist>(const saba_state *left, const saba_state *right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_ptr_hash</name>
    <filename>structspot_1_1saba__state__ptr__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__ptr__hash.html</anchorfile>
      <anchor>a95b97fb94b4f26df8763913ccf1cebfa</anchor>
      <arglist>(const saba_state *that) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_shared_ptr_less_than</name>
    <filename>structspot_1_1saba__state__shared__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__shared__ptr__less__than.html</anchorfile>
      <anchor>a6361697440de685a5d31807a446df35b</anchor>
      <arglist>(shared_saba_state left, shared_saba_state right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_shared_ptr_equal</name>
    <filename>structspot_1_1saba__state__shared__ptr__equal.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__shared__ptr__equal.html</anchorfile>
      <anchor>a075845abe948059e6b5ef4ea6123936b</anchor>
      <arglist>(shared_saba_state left, shared_saba_state right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::saba_state_shared_ptr_hash</name>
    <filename>structspot_1_1saba__state__shared__ptr__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1saba__state__shared__ptr__hash.html</anchorfile>
      <anchor>a80b091c9c767824182211e734caf8474</anchor>
      <arglist>(shared_saba_state that) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_state_conjunction</name>
    <filename>classspot_1_1saba__state__conjunction.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba_state_conjunction</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>a1fb95d6c86c07cc0fe067fbb0c7dfee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_state_conjunction *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>ab2c0c3a6016144fce75f5b3b223d05ef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>a30c8a6a7d907d6821e45338c039d5051</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>afa5dbbd47bc162049f3bd812b2bd1da3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>a3bb0025ea04da3734859bd5faa8e7924</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1saba__state__conjunction.html</anchorfile>
      <anchor>a5dd1612bb002d1e30485eb51b5014aea</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_succ_iterator</name>
    <filename>classspot_1_1saba__succ__iterator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba_succ_iterator</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>aabf2cde13dd0fb0635d85594fffa8d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>a5232a8a98c3f8d7979d33dd19224991c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>a145523b3177344034ccdc43ec2edfaa3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>a60cff9fe2e50305156ebb6555bebae44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual saba_state_conjunction *</type>
      <name>current_conjunction</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>a7b209ea564fc88cea087cce05fa062ef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1saba__succ__iterator.html</anchorfile>
      <anchor>a30ab665fc84e48ba0f6e2e25cd9249a2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_reachable_iterator</name>
    <filename>classspot_1_1saba__reachable__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>saba_reachable_iterator</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ab222cb6040881434b4ca3468253e438a</anchor>
      <arglist>(const saba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~saba_reachable_iterator</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ab21fd6019c5a80eb95a411834bb82975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a83bb08834e1df8c0cf51becb0677778f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad695645c0219f28c8f94ae40902489a8</anchor>
      <arglist>(const saba_state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a5d1fdcb00ea6ba79619c141f0364535a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a7b731e4b4e556bb2f1f81c784c0a1172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a4982ba8d7555c5cf37680acb4f730268</anchor>
      <arglist>(const saba_state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state_conjunction</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ab7cf7239a3894091161263b42f87aa54</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a78ae18637c807677f775199751667d36</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state *out_s, int out, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>aac909f07f0d6894128bdeb85b08b6ce5</anchor>
      <arglist>(const saba_state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const saba_state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a9f02dc856075bb007231bfd79fcce73c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const saba_state *, int, saba_state_ptr_hash, saba_state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a6336533ab86f8fb752ebc0d12f4b1c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const saba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a164226a027f744ec5a8e7153f5536ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad12a2f1017b6e2fd3bee4018e973b0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_reachable_iterator_depth_first</name>
    <filename>classspot_1_1saba__reachable__iterator__depth__first.html</filename>
    <base>spot::saba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>saba_reachable_iterator_depth_first</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>a4078b13529af27f739a30be0f7375ffc</anchor>
      <arglist>(const saba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>aac87ede556d373fa4752c15342637b83</anchor>
      <arglist>(const saba_state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const saba_state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>aaba1262b77f4fbdf46b7252148872a99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a83bb08834e1df8c0cf51becb0677778f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad695645c0219f28c8f94ae40902489a8</anchor>
      <arglist>(const saba_state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a5d1fdcb00ea6ba79619c141f0364535a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a7b731e4b4e556bb2f1f81c784c0a1172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a4982ba8d7555c5cf37680acb4f730268</anchor>
      <arglist>(const saba_state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state_conjunction</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ab7cf7239a3894091161263b42f87aa54</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a78ae18637c807677f775199751667d36</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state *out_s, int out, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const saba_state *, int, saba_state_ptr_hash, saba_state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a6336533ab86f8fb752ebc0d12f4b1c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; const saba_state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>acff021580162fa03cf12e733ac076a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const saba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a164226a027f744ec5a8e7153f5536ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad12a2f1017b6e2fd3bee4018e973b0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::saba_reachable_iterator_breadth_first</name>
    <filename>classspot_1_1saba__reachable__iterator__breadth__first.html</filename>
    <base>spot::saba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>saba_reachable_iterator_breadth_first</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a175c1da65c3f2168a89703300138063f</anchor>
      <arglist>(const saba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a6522fac4a15fdb017ffcc65bd8a2447d</anchor>
      <arglist>(const saba_state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const saba_state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>aa86f4576b5151845471cd7320b5af0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a83bb08834e1df8c0cf51becb0677778f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad695645c0219f28c8f94ae40902489a8</anchor>
      <arglist>(const saba_state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a5d1fdcb00ea6ba79619c141f0364535a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a7b731e4b4e556bb2f1f81c784c0a1172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a4982ba8d7555c5cf37680acb4f730268</anchor>
      <arglist>(const saba_state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state_conjunction</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ab7cf7239a3894091161263b42f87aa54</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a78ae18637c807677f775199751667d36</anchor>
      <arglist>(const saba_state *in_s, int in, const saba_state *out_s, int out, const saba_state_conjunction *sc, int sc_id, const saba_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const saba_state *, int, saba_state_ptr_hash, saba_state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a6336533ab86f8fb752ebc0d12f4b1c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; const saba_state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1saba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a0822727f5fab702c3bd172a714fc0407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const saba *</type>
      <name>automata_</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>a164226a027f744ec5a8e7153f5536ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1saba__reachable__iterator.html</anchorfile>
      <anchor>ad12a2f1017b6e2fd3bee4018e973b0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta</name>
    <filename>classspot_1_1ta.html</filename>
    <member kind="typedef">
      <type>std::set&lt; state *, state_ptr_less_than &gt;</type>
      <name>states_set_t</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>af1bc68c8c3cd3f18de560546ff624ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>ab78717a66d12c3d11a1d6cee90d71f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const states_set_t</type>
      <name>get_initial_states_set</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>ae847e1d2f986db3bbc7a0d7535155677</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_artificial_initial_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a5cbd41f6c0e19af83d55816a5fbb2321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ta_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>af0b2f71c85c0dd17b850197537a383bc</anchor>
      <arglist>(const spot::state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ta_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>af9ebc32d6cc33044f538c25b07eb09bd</anchor>
      <arglist>(const spot::state *state, bdd changeset) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a5b1cf7537d0702b2acc136578895d926</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a075f7fdb44428659a16484170477e77e</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_accepting_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a05398307c3e98a177f7f182b2becb6ee</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_livelock_accepting_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a5e2b5e5f1ad31adbc157571d88007b01</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>is_initial_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a9291b601b2c32aa38c04feeb5f48a703</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>get_state_condition</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a807b62b44071746902e7d5e76b7fefad</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a83fe8227b08e5d5ae575fddec620d85c</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a06639adf20622dcafaa7a9a3e7f6417f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_succ_iterator</name>
    <filename>classspot_1_1ta__succ__iterator.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_succ_iterator</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>ad0de5a92222b1de02b5f017c27b6ab8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>a4fdbe3595410319007bd02c7587ef15e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>aa7802616a4978be0fdd1a75e6df6c02d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>a5b18bd5ca7d46de3fffad641641f2d9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>a6fadb6179fd5d88cb5d55a167a7257c9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>a9b31683f32aecc86ecaaee404d201af7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__succ__iterator.html</anchorfile>
      <anchor>aaebcce590d0375ac43d221bb1b5dbc34</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::scc_stack_ta</name>
    <filename>classspot_1_1scc__stack__ta.html</filename>
    <class kind="struct">spot::scc_stack_ta::connected_component</class>
    <member kind="typedef">
      <type>std::list&lt; connected_component &gt;</type>
      <name>stack_type</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a1fcc02601b9aed6cb84db9c9782ef0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a728b9f4a4c7e88f62f6b7ca873cdabb7</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>connected_component &amp;</type>
      <name>top</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a7890d4b313efcdb53a6581d2b0f453dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const connected_component &amp;</type>
      <name>top</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a200119230a7af3a3c5b5bb7ed1eba567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a60865fb164be8b7fe75f8bf772992ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a5c80fb3fafd706a720fcd00b2b838493</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; state * &gt; &amp;</type>
      <name>rem</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>afde37c79a58a4a9ea7e1487c94e42642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>a595d6e7699cd03fcf8e2127f2b9c6ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>stack_type</type>
      <name>s</name>
      <anchorfile>classspot_1_1scc__stack__ta.html</anchorfile>
      <anchor>ad7b9d8751add58727a0f0408283c7cc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::scc_stack_ta::connected_component</name>
    <filename>structspot_1_1scc__stack__ta_1_1connected__component.html</filename>
    <member kind="function">
      <type></type>
      <name>connected_component</name>
      <anchorfile>structspot_1_1scc__stack__ta_1_1connected__component.html</anchorfile>
      <anchor>a8be85d2455a819c584b5dcaaaeb6a12f</anchor>
      <arglist>(int index=-1)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structspot_1_1scc__stack__ta_1_1connected__component.html</anchorfile>
      <anchor>a8b831f37dc942f8f33d4a48376161e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_accepting</name>
      <anchorfile>structspot_1_1scc__stack__ta_1_1connected__component.html</anchorfile>
      <anchor>a02e891bcdaa1d9f00f489eb3c6cf6f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1scc__stack__ta_1_1connected__component.html</anchorfile>
      <anchor>a7d5d3e5f5562d146745d036dcc795072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; state * &gt;</type>
      <name>rem</name>
      <anchorfile>structspot_1_1scc__stack__ta_1_1connected__component.html</anchorfile>
      <anchor>ada1d7baf6e036277001a2efb2dbfe91d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_explicit</name>
    <filename>classspot_1_1ta__explicit.html</filename>
    <base>spot::ta</base>
    <member kind="typedef">
      <type>std::set&lt; state *, state_ptr_less_than &gt;</type>
      <name>states_set_t</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>af1bc68c8c3cd3f18de560546ff624ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ta_explicit</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a13f7c7b73d900f0cae107bf38ecdf443</anchor>
      <arglist>(const tgba *tgba, bdd all_acceptance_conditions, state_ta_explicit *artificial_initial_state=0, bool own_tgba=false)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>get_tgba</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a63460eac2315781aefcacc8707d2f65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_ta_explicit *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a0da605a671217aeac5124d7b89bc6854</anchor>
      <arglist>(state_ta_explicit *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_initial_states_set</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a3d52664f1353f4f9fb419f3be6d3bf01</anchor>
      <arglist>(state *s, bdd condition=bddfalse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a1642257587084c97ce5d39da70d501a8</anchor>
      <arglist>(state_ta_explicit *source, bdd condition, bdd acceptance_conditions, state_ta_explicit *dest, bool add_at_beginning=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_stuttering_transitions</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a0302fe9864a2de9b3589e4789830e158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_explicit</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a0505e3e48870a6898efa701b3e452529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const states_set_t</type>
      <name>get_initial_states_set</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a829c195d324bf9fd80cabdb883f1beb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ta_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a56ff22eacfb314076c3795e29c51bd45</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ta_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>ae63d26c7687ae408133aeb95c793a4d5</anchor>
      <arglist>(const spot::state *s, bdd condition) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a2d9f1b65d258892c253750376a758213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a75d9f86c25fd4a7cd6ababa7467846d2</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_accepting_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a908627a9e60708a3c1f5a63f641ff5da</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_livelock_accepting_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a6de8fc9f373578cbc436af5f1d58fa97</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_initial_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a1d914fc0d7f5aed14ab92befcda2d668</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>get_state_condition</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a696a3fcfbe853754a3d6402a8ec16f56</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>aa7879d15aae1adf6d25386d381f894f3</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function">
      <type>spot::state *</type>
      <name>get_artificial_initial_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a7f13f19527ada113bb7748d6f79597f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_artificial_initial_state</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a2cddd9377c3ffe29e90f8471ac73b91f</anchor>
      <arglist>(state_ta_explicit *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>delete_stuttering_and_hole_successors</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a1411684a30a4a7ce1c39cdddc09afa70</anchor>
      <arglist>(spot::state *s)</arglist>
    </member>
    <member kind="function">
      <type>ta::states_set_t</type>
      <name>get_states_set</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>ab88290e5a002f7c5d9ea3e2cb67a8738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a0a4f238c1876d503352f15e80940721c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ta_explicit</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a70646483e6848665b68b4e22e92c6c79</anchor>
      <arglist>(const ta_explicit &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ta_explicit &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a164a5f9c79a0e8b16aae297442233947</anchor>
      <arglist>(const ta_explicit &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba *</type>
      <name>tgba_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>aa950f9c3015473c975a8afcc41b5d6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>ada4df287a5547e14a185387acd9cc083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state_ta_explicit *</type>
      <name>artificial_initial_state_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>aa47c1b8e44854afe5fd2dedbf365d724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ta::states_set_t</type>
      <name>states_set_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a87df9c3659ae73dcbd60ec43a7f7cd75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ta::states_set_t</type>
      <name>initial_states_set_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>ad735dfe30ccb0d8b0a735349f383bfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>own_tgba_</name>
      <anchorfile>classspot_1_1ta__explicit.html</anchorfile>
      <anchor>a2d63de8cfac477c9676845c98872feb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_ta_explicit</name>
    <filename>classspot_1_1state__ta__explicit.html</filename>
    <base>spot::state</base>
    <class kind="struct">spot::state_ta_explicit::transition</class>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>transitions</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a8bcae3e2f4379af607956f07208a372f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_ta_explicit</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>aa0690153cd5e3aff7e541d6fec5a30ed</anchor>
      <arglist>(const state *tgba_state, const bdd tgba_condition, bool is_initial_state=false, bool is_accepting_state=false, bool is_livelock_accepting_state=false, transitions *trans=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a24f7ac446cc6c4a93ebc6f0760116743</anchor>
      <arglist>(const spot::state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a5abbce9b917e118c458652b04c933b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_ta_explicit *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a9f640f51840272f41f0b1c0a0a1cb463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a288d7b70dce99263bc0b640cd7939cb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_ta_explicit</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a2fc181d997ab46711a0d9cb7e4c0baf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>transitions *</type>
      <name>get_transitions</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a85ba486952063e08d82f411c61d62cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>transitions *</type>
      <name>get_transitions</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a46f3a4e4a0cb732e92b2cf2d4dcbd8a9</anchor>
      <arglist>(bdd condition) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a7dd7e9d29b8e3e94337a0cdc96ac9132</anchor>
      <arglist>(transition *t, bool add_at_beginning=false)</arglist>
    </member>
    <member kind="function">
      <type>const state *</type>
      <name>get_tgba_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a269973e3c40b5a16643baa9f5085aedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const bdd</type>
      <name>get_tgba_condition</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a2d56ef9fc2261cbec6c85a3068391146</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_accepting_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a7a86a5d171494af8a86800a9feaba2c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_accepting_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a047f1e77dbc937b3b75dfff1cedf5962</anchor>
      <arglist>(bool is_accepting_state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_livelock_accepting_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a9e5b4b36e05dfc8ee13e77b52bcf8ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_livelock_accepting_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a3910f8823ebe0cab1e2fd7ac75f0ab34</anchor>
      <arglist>(bool is_livelock_accepting_state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initial_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a052b0faf2826d24e7c0a9d45cce8a9f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_initial_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a4f7de401e0041551a86596528a4d5955</anchor>
      <arglist>(bool is_initial_state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_hole_state</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a3437056558cd4120fe240ff794cf959c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_stuttering_and_hole_successors</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a9f61e901935f09e3c2118a0e3df7a364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free_transitions</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a1147c9ade29fda46c877b6dda3a63f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>state_ta_explicit *</type>
      <name>stuttering_reachable_livelock</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a7cf3e5f1121b0cdbf60e815238ff1ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const state *</type>
      <name>tgba_state_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a5d350b137e103411e2cc549cf902c654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bdd</type>
      <name>tgba_condition_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>ad72bb7521d1b95e39406abc4fc8f02a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_initial_state_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a1d8cc226d11bc8ec920072d003a65fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_accepting_state_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a66369f3fd0ac8c2e46668f9a150089cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>is_livelock_accepting_state_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a16e99f6cabc13d188f943e220ae8dc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>transitions *</type>
      <name>transitions_</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>a981524c80b088c8cbe904e549863b01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Sgi::hash_map&lt; int, transitions *, Sgi::hash&lt; int &gt; &gt;</type>
      <name>transitions_by_condition</name>
      <anchorfile>classspot_1_1state__ta__explicit.html</anchorfile>
      <anchor>aca75e3028a17ff93ed1f875a06a5b324</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_ta_explicit::transition</name>
    <filename>structspot_1_1state__ta__explicit_1_1transition.html</filename>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1state__ta__explicit_1_1transition.html</anchorfile>
      <anchor>a0aba96ae2db7fe611f6c99691a765153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acceptance_conditions</name>
      <anchorfile>structspot_1_1state__ta__explicit_1_1transition.html</anchorfile>
      <anchor>aae210893274f52d726ab3017ebc3fce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>state_ta_explicit *</type>
      <name>dest</name>
      <anchorfile>structspot_1_1state__ta__explicit_1_1transition.html</anchorfile>
      <anchor>aa07b39f66957ab605c36f895a1cbe545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_explicit_succ_iterator</name>
    <filename>classspot_1_1ta__explicit__succ__iterator.html</filename>
    <base>spot::ta_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>ta_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a243770bb55fb3f22b3d4c9aaee193156</anchor>
      <arglist>(const state_ta_explicit *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ta_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a63630e67f9f7e7f27e8af5219da0d05a</anchor>
      <arglist>(const state_ta_explicit *s, bdd condition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>ac0d5ceb2a3d1a22e934945b9689f8905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a3e1fd56a1755a304d546b5e7ef2e637d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a3f5c76f93540ee8719f0687eb8763b34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a0d43ac04a314abf7780333b5a816f440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a12179921eeda385c5330948048960eef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>a1eae6200980284f383233c3530cab698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state_ta_explicit::transitions *</type>
      <name>transitions_</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>ac0826b3167799f310d9d0d314f064060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state_ta_explicit::transitions::const_iterator</type>
      <name>i_</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>abb858c983f104ec15849eb757d8b5b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const state_ta_explicit *</type>
      <name>source_</name>
      <anchorfile>classspot_1_1ta__explicit__succ__iterator.html</anchorfile>
      <anchor>af506c5ce06fd625fdff363cc56dfc7ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_ta_product</name>
    <filename>classspot_1_1state__ta__product.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_ta_product</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>add2973f1d94df019f45e300f3ce95aa4</anchor>
      <arglist>(state *ta_state, state *kripke_state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_ta_product</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a9556804b0a24a9122fa193234aaf4909</anchor>
      <arglist>(const state_ta_product &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_ta_product</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a9e4b77dc8d90fa2601b514479ffa7d82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>get_ta_state</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a5a1df6fe0127f1b5a398600301f7251b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>get_kripke_state</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a2de3a3bda82486b361eb7299ae8f236c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a763222974c10ce97f8680fa34ac6aeda</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>ad9373db991061709fa603d42dadbef5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_ta_product *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>aba4ae4b71c6227e5c660c12c181875be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>ta_state_</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>a88bf0616b1ae4b975be7ee00b8904c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>kripke_state_</name>
      <anchorfile>classspot_1_1state__ta__product.html</anchorfile>
      <anchor>af6f12a1c0f5e0887f673d9e0d204a54d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_succ_iterator_product</name>
    <filename>classspot_1_1ta__succ__iterator__product.html</filename>
    <base>spot::ta_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>ta_succ_iterator_product</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a0a8591e125c6a3fc5049167323695d2c</anchor>
      <arglist>(const state_ta_product *s, const ta *t, const kripke *k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_succ_iterator_product</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a7442edb335335f77c024fc5fff1d2812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aec89aff7b04f79714e930ab797b1d62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aff3d99ed74053abf76a86a7cac96275b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>addc916cde3929080edb12ddb73abb5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_ta_product *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>addfb653dad3aa7ee382d4cbe90e41709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aad65165e4b41c130fda1d2941f07e2e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a07f5f22f2deccee429e2f727990163b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stuttering_transition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a64ce6c7b3838bca19775335083ed224b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>step_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ab6ab78f0e28cd4ed299b823e87b894ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_non_stuttering_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a8ff107aeef3d17fda1564de53413ea42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_kripke_dest</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aa9a5b882202a3dbc21fafe551d4d5b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state_ta_product *</type>
      <name>source_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>af11771263692b3986a227bf21b4b7cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta *</type>
      <name>ta_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a1966385155f6945e2db04d58111a930d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const kripke *</type>
      <name>kripke_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a2563805a51dffe1ce871a45a35e8a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ta_succ_iterator *</type>
      <name>ta_succ_it_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a11ff4ba17798041c92246531054b4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>kripke_succ_it_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ad2055f67b5936807a568be27cae9f9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state_ta_product *</type>
      <name>current_state_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>adf693decee0116dcd834008b9daa8dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_condition_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a47496aed5fd568f8eed2f911df8f90b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_acceptance_conditions_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>af3e84f8fe6a3fcf71b043ebcaf6b0f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_stuttering_transition_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a6a6c697cd0a51b45f934cf5dd50b66ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>kripke_source_condition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ac127b256ec79eb4193e99b954efde690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state *</type>
      <name>kripke_current_dest_state</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a67ee4dbfb9d6e16621cee875f673da8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_product</name>
    <filename>classspot_1_1ta__product.html</filename>
    <base>spot::ta</base>
    <member kind="typedef">
      <type>std::set&lt; state *, state_ptr_less_than &gt;</type>
      <name>states_set_t</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>af1bc68c8c3cd3f18de560546ff624ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ta_product</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a6903e7ee92887d20047fcca6d6c5d80a</anchor>
      <arglist>(const ta *testing_automaton, const kripke *kripke_structure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_product</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a31b4c2f1b02917cb2e9cdd478ef7fbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::set&lt; state *, state_ptr_less_than &gt;</type>
      <name>get_initial_states_set</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>abb252ecb9029cfddfcad6bc4e9e98bb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ta_succ_iterator_product *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>aba95be080867af93d7c3cd4f3e8ffedb</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ta_succ_iterator_product *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a700b77deec59337ac426796f2f94c453</anchor>
      <arglist>(const spot::state *s, bdd changeset) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>acea792a98272b138671d47dfbef04805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a4e33014ad5446206c2d213daaf86ef9a</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_accepting_state</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>ab9c5f0fbc7c6ce5f721c280537386c75</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_livelock_accepting_state</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>af6a40ce841dbb319f5ee9d6467344943</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_initial_state</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>abefe2a449db42357241e2aefd8b52934</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_hole_state_in_ta_component</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>affbe07cbfda5c7994319b19a8d579252</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>get_state_condition</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a60defd29b185e0042c197f732c4e25c6</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a92e05f856dea6407fb13a385bc41e202</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free_state</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>ab5d98a9265409d846c8ac85fde9f2ff2</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function">
      <type>const ta *</type>
      <name>get_ta</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a7820e3bf64bba2d62ef9d8c119717f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const kripke *</type>
      <name>get_kripke</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>acf001e22dbb33a1ba68583810b07da65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_artificial_initial_state</name>
      <anchorfile>classspot_1_1ta.html</anchorfile>
      <anchor>a5cbd41f6c0e19af83d55816a5fbb2321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ta_product</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a585c90f9f9c92f74a99b5b46c632eed6</anchor>
      <arglist>(const ta_product &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ta_product &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a6200077243989bfd73e4b90640f9d872</anchor>
      <arglist>(const ta_product &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>a273c68a302e92d24caa0288c293fe365</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ta *</type>
      <name>ta_</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>afb56ed5651bd6235145ff4374e652e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const kripke *</type>
      <name>kripke_</name>
      <anchorfile>classspot_1_1ta__product.html</anchorfile>
      <anchor>aab701564951724ca36e04858d89aaf45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_succ_iterator_product_by_changeset</name>
    <filename>classspot_1_1ta__succ__iterator__product__by__changeset.html</filename>
    <base>spot::ta_succ_iterator_product</base>
    <member kind="function">
      <type></type>
      <name>ta_succ_iterator_product_by_changeset</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product__by__changeset.html</anchorfile>
      <anchor>ae3bad4981bb3a24e23e5c43c7e41c393</anchor>
      <arglist>(const state_ta_product *s, const ta *t, const kripke *k, bdd changeset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_kripke_dest</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product__by__changeset.html</anchorfile>
      <anchor>a449b12f79b48528fc82f29d390daac32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aec89aff7b04f79714e930ab797b1d62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aff3d99ed74053abf76a86a7cac96275b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>addc916cde3929080edb12ddb73abb5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_ta_product *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>addfb653dad3aa7ee382d4cbe90e41709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>aad65165e4b41c130fda1d2941f07e2e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a07f5f22f2deccee429e2f727990163b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_stuttering_transition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a64ce6c7b3838bca19775335083ed224b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>step_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ab6ab78f0e28cd4ed299b823e87b894ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>next_non_stuttering_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a8ff107aeef3d17fda1564de53413ea42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state_ta_product *</type>
      <name>source_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>af11771263692b3986a227bf21b4b7cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta *</type>
      <name>ta_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a1966385155f6945e2db04d58111a930d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const kripke *</type>
      <name>kripke_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a2563805a51dffe1ce871a45a35e8a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ta_succ_iterator *</type>
      <name>ta_succ_it_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a11ff4ba17798041c92246531054b4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>kripke_succ_it_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ad2055f67b5936807a568be27cae9f9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state_ta_product *</type>
      <name>current_state_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>adf693decee0116dcd834008b9daa8dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_condition_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a47496aed5fd568f8eed2f911df8f90b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_acceptance_conditions_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>af3e84f8fe6a3fcf71b043ebcaf6b0f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_stuttering_transition_</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a6a6c697cd0a51b45f934cf5dd50b66ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>kripke_source_condition</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>ac127b256ec79eb4193e99b954efde690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state *</type>
      <name>kripke_current_dest_state</name>
      <anchorfile>classspot_1_1ta__succ__iterator__product.html</anchorfile>
      <anchor>a67ee4dbfb9d6e16621cee875f673da8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgta</name>
    <filename>classspot_1_1tgta.html</filename>
    <base>spot::tgba</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgta</name>
      <anchorfile>classspot_1_1tgta.html</anchorfile>
      <anchor>af2e7bbe7112ffaa38bc100d67d119ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter_by_changeset</name>
      <anchorfile>classspot_1_1tgta.html</anchorfile>
      <anchor>a41348ca3d04225703fb1e3b898292da9</anchor>
      <arglist>(const spot::state *s, bdd change_set) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a3455011d3860bbd101a7f75ae2aad009</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a372b5a1582f8cb9fccd91c413350c8b8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a5a52dc9090be87bf46c59d487bf84f42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a2700b9f829bf2a884e29df8394ee2521</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a752a730728601d572f5147dd8811316d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a4d531428cb11fe9be3ddbf1928eb3657</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tgta</name>
      <anchorfile>classspot_1_1tgta.html</anchorfile>
      <anchor>a6123fe3418266f3fc33720a3049d574e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a917f0b1310e4838626cd3de923642356</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ae9128398fd3001b3e0b76f43d0c7b4aa</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgta_explicit</name>
    <filename>classspot_1_1tgta__explicit.html</filename>
    <base>spot::tgta</base>
    <member kind="function">
      <type></type>
      <name>tgta_explicit</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>ababddd8bddf3dde449dac2935be38fcc</anchor>
      <arglist>(const tgba *tgba, bdd all_acceptance_conditions, state_ta_explicit *artificial_initial_state, bool own_tgba=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a6b4f5267b01307e5b802659da3b26c68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a7fd7a9d77067730695eb89c4f2c73c9e</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a849588ba6f1b486e6407a1869e31b928</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ta_explicit *</type>
      <name>get_ta</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>ae12286fc32c765bf241f87b08c3a0458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ta_explicit *</type>
      <name>get_ta</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>ade847780e77c776706dea13dfddca3e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a903e916243d044ffd6b07f094dba17aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a003dc363fcb87cd1a23a0f0ababbb40b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>afb05742c1a7bdd4fbcccd4eaeb5e348c</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter_by_changeset</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a392a5ff63bc1aa863de865d0229b54eb</anchor>
      <arglist>(const spot::state *s, bdd change_set) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a28d52eaae738d103fb6082d0383a7602</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>ae67407ee85848efdd35b04dbf0139123</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ta_explicit</type>
      <name>ta_</name>
      <anchorfile>classspot_1_1tgta__explicit.html</anchorfile>
      <anchor>a497bb3474668eace6816a9372a5fba01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgta_product</name>
    <filename>classspot_1_1tgta__product.html</filename>
    <base>spot::tgba_product</base>
    <member kind="function">
      <type></type>
      <name>tgta_product</name>
      <anchorfile>classspot_1_1tgta__product.html</anchorfile>
      <anchor>ab9de1d5e8ca3deafc39e62a474030ba8</anchor>
      <arglist>(const kripke *left, const tgta *right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgta__product.html</anchorfile>
      <anchor>a4c48930222a773d7908bb2423e6dcc19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgta__product.html</anchorfile>
      <anchor>afbe58448d24d4aab81209ba0a19e8420</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a98be76c9a1c99c98d3d98b922e6754c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a253991f4680be4b9b6cc4ea2b58f0f1e</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a5bd9816b75446546f7ab22f1f08a4b7f</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a63415db59de0198957b8db61e68b2d25</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a588b3078a18b0d9073c1d06a8ec5429c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>acc05aeb22baf7ca5a3c0ca415767bafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4a46399685445cc7b0ce81e507f1d14c</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a900940457e4d9ecfa27cbac423730471</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8048054ed2d511fb8d42634b5695979e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>aed415f850f93de54fbd9b4d03a5b3ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8e5c0b58b51f8dce0c89678e8f08be60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>left_kripke_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ab42b53208c598c0e20d0b35a4ca822e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>left_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0606c9cb0323788eb93a06feff3b5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>right_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4f7ea0afd907310b04127e2ad424c66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ad203a496c27b0ef4ab8d553987768be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ac50b0170453065edc2e8986062180f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bddPair *</type>
      <name>right_common_acc_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0a0e9c103aa6b363b200bed070787000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fixed_size_pool</type>
      <name>pool_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>af52b0f4f788177a18cc1c89db7ff3b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgta_succ_iterator_product</name>
    <filename>classspot_1_1tgta__succ__iterator__product.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgta_succ_iterator_product</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a18178c4da65b838beb20f67e71d41ac5</anchor>
      <arglist>(const state_product *s, const kripke *k, const tgta *tgta, fixed_size_pool *pool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgta_succ_iterator_product</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>af22c10a0d3790e942c8b3d3f5bd88779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ad09eaa0f0ea0e73d7998a63be77fdb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>af9620384d8083e951bf82c16cd523b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ace194cdbd1a206aca561fb633f9d0338</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_product *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a5f5272e3748e9608a1e6cd14052287a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a51f34affd9ec9bda6ba970cdc5315d65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ae40c88b932beb7901c4a6bbc8f6af23d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state_product *</type>
      <name>source_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>adf957671424c5b6763806e0a5bd64eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgta *</type>
      <name>tgta_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a07042481aeddf4c549e319e469c38b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const kripke *</type>
      <name>kripke_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>aecf280479422d5cb4804ac33405d2fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fixed_size_pool *</type>
      <name>pool_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>aeaa38f2f21c2f9d7093671febd77457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>tgta_succ_it_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ae5ce54ce659d731e5974334a1caa7d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>kripke_succ_it_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a5995a42c031d418baf4810d68298f710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state_product *</type>
      <name>current_state_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a625ef319e263a43e1c3ae8f07a3c1369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_condition_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a544cb412bdd72ee6f6152fd9c480fab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a4af734686656a1afc4a950a59d9bb71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>kripke_source_condition</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>aac6e4afc0600a10dd812b060a6855f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>state *</type>
      <name>kripke_current_dest_state</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>a7e4eeaf147747a775c59c48655e4ef36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>step_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ae1c45590870ce4b5bd00a143eba36310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>find_next_succ_</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>ab65206ac04bf01b6981bf5c4b5e8092f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>next_kripke_dest</name>
      <anchorfile>classspot_1_1tgta__succ__iterator__product.html</anchorfile>
      <anchor>aaefff3c7fad64278b366f3b598730b33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_check</name>
    <filename>classspot_1_1ta__check.html</filename>
    <base>spot::ec_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_check</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>aac90f9776b594b0f6e2e1afa78e2c70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>af27b9b5667dc9fe644be52b0481212e3</anchor>
      <arglist>(bool disable_second_pass=false, bool disable_heuristic_for_livelock_detection=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>livelock_detection</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>ac2dfba4a283f022d68d03f44d1b5345e</anchor>
      <arglist>(const ta_product *t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a0ef38b3394854ceea97d4332839626b7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a81d1156d35135a920f17d22765e07724</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a779baacabc1e56f583dd07ab9cc693af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a36673e3fb88feefbb1097b5cadd01327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>ade5ca49fc87a2bc9ce9414fc3a96c56b</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dec_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>acb78038e2e0be1a3d5761cf5b5bdcae9</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a74399636ac58843b888fd4dcd4663b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a3d4621663efb6371dd17961d990a7447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a4578aa6ab8cc01648e66698074813c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>aaadc5f995de05d1e1c835e0e49419524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type></type>
      <name>ta_check</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a3cf1a8e12f15fc665e37ba04a6640071</anchor>
      <arglist>(const ta_product *a, option_map o=option_map())</arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a4fb0f058d747462369897bebf27e5ac7</anchor>
      <arglist>(numbered_state_heap *h, std::stack&lt; pair_state_iter &gt; todo, std::queue&lt; spot::state * &gt; init_set)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a5a8f791b2b5944684fd18367f802e25c</anchor>
      <arglist>(numbered_state_heap *h, std::stack&lt; pair_state_iter &gt; todo, spot::ta_succ_iterator *init_states_it)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>heuristic_livelock_detection</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a1f47e6f536ad188608d1360e49a43d9f</anchor>
      <arglist>(const state *stuttering_succ, numbered_state_heap *h, int h_livelock_root, std::set&lt; const state *, state_ptr_less_than &gt; liveset_curr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta_product *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a3439fece5dd2da06b6a95f35be5424a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>ac07d98b416c4f77f9ef9a33688d09e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_full_2_pass_</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>ae0dbe313b2cd7fead23ffb77e0f96043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scc_stack_ta</type>
      <name>scc</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a78664c01d308b612b7daf47aa7df7da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scc_stack_ta</type>
      <name>sscc</name>
      <anchorfile>classspot_1_1ta__check.html</anchorfile>
      <anchor>a4e5dd19b299bfda9ea0d54fa5d6a577c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_reachable_iterator</name>
    <filename>classspot_1_1ta__reachable__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ta_reachable_iterator</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a5b4f560626da4e5dd6b9aac4884c8bc7</anchor>
      <arglist>(const ta *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ta_reachable_iterator</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>aaad746918d5d1be8a761a89352dca071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a454e2ac517cf0d7e95512e227672b2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>aa680ef6988f48589b2e702895698a144</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af891fcf3bba10f78aecf301ad2235cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>afd74b5f21e08ed690fc4a765494652c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>ab9c235e497cef942c159a98ebb0da95b</anchor>
      <arglist>(const state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af7cad569c3866860816852f186959c0f</anchor>
      <arglist>(int in, int out, const ta_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a5aaf7153ecc48357214f22977e4e0e1a</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>aeb2902e9e8c6e5770de07543fbeb4a19</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a796dacfaaeff854866aa8ae770ec4a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta *</type>
      <name>t_automata_</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a8c47d2b850a6ccdcc378225ee7612e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af98a37b38855a26480567ea9074ee9eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_reachable_iterator_depth_first</name>
    <filename>classspot_1_1ta__reachable__iterator__depth__first.html</filename>
    <base>spot::ta_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>ta_reachable_iterator_depth_first</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__depth__first.html</anchorfile>
      <anchor>a7c52684dc496961d60f4f0d1ec181732</anchor>
      <arglist>(const ta *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__depth__first.html</anchorfile>
      <anchor>aeac6f56aed617a968c5f3b7ffca48c03</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__depth__first.html</anchorfile>
      <anchor>a7ac0ebe14d4362ba582ffbdf672b6880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a454e2ac517cf0d7e95512e227672b2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>aa680ef6988f48589b2e702895698a144</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af891fcf3bba10f78aecf301ad2235cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>afd74b5f21e08ed690fc4a765494652c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>ab9c235e497cef942c159a98ebb0da95b</anchor>
      <arglist>(const state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af7cad569c3866860816852f186959c0f</anchor>
      <arglist>(int in, int out, const ta_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a796dacfaaeff854866aa8ae770ec4a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__depth__first.html</anchorfile>
      <anchor>a5cdfa0bc2aafdc0a09dd9098df181581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta *</type>
      <name>t_automata_</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a8c47d2b850a6ccdcc378225ee7612e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af98a37b38855a26480567ea9074ee9eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ta_reachable_iterator_breadth_first</name>
    <filename>classspot_1_1ta__reachable__iterator__breadth__first.html</filename>
    <base>spot::ta_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>ta_reachable_iterator_breadth_first</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>af9d0be63cf3e317f1e8c5f857fdfc642</anchor>
      <arglist>(const ta *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a95c865b53250e0d870c9cc058a97ab55</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>ac37ea09bde036fd6e97356aecf8e8f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a454e2ac517cf0d7e95512e227672b2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>aa680ef6988f48589b2e702895698a144</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af891fcf3bba10f78aecf301ad2235cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>afd74b5f21e08ed690fc4a765494652c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>ab9c235e497cef942c159a98ebb0da95b</anchor>
      <arglist>(const state *s, int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af7cad569c3866860816852f186959c0f</anchor>
      <arglist>(int in, int out, const ta_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a796dacfaaeff854866aa8ae770ec4a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1ta__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>ad5d8d1df09d1b416f000d7501db45621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ta *</type>
      <name>t_automata_</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>a8c47d2b850a6ccdcc378225ee7612e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1ta__reachable__iterator.html</anchorfile>
      <anchor>af98a37b38855a26480567ea9074ee9eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ta_statistics</name>
    <filename>structspot_1_1ta__statistics.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>structspot_1_1ta__statistics.html</anchorfile>
      <anchor>ac7afd66e6684bd5b497b0b750c769571</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>structspot_1_1ta__statistics.html</anchorfile>
      <anchor>a75d3c69b84b3426c6d9ce713f765a892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>structspot_1_1ta__statistics.html</anchorfile>
      <anchor>a0ebb26b396e958848fc1f49f56851e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>acceptance_states</name>
      <anchorfile>structspot_1_1ta__statistics.html</anchorfile>
      <anchor>a7052bd5476a5fdad87d0e3e16de954a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::bdd_dict</name>
    <filename>classspot_1_1bdd__dict.html</filename>
    <base>spot::bdd_allocator</base>
    <class kind="class">spot::bdd_dict::anon_free_list</class>
    <class kind="struct">spot::bdd_dict::bdd_info</class>
    <member kind="enumeration">
      <name>var_type</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>anon</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6a3f82e03445f8367a00259465b12c6139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>now</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6a47ba5912c7d3b8f51ea03cc885c26d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>next</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6a480d3c059c89672bc5f6d48fb1335e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>var</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6aa7285afea37b218e4a0e33609101fd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>acc</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc6a898f172c6e90a19c4a85da9bbff6aba32cf3601484b8e31e7012534d7a089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const ltl::formula *, int &gt;</type>
      <name>fv_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a5bd5f592056f364fdd862a3e0de9fd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, const ltl::formula * &gt;</type>
      <name>vf_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ad0b9e89c7a60caad9e5786c82a15e0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; const void * &gt;</type>
      <name>ref_set</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a015d330da101dd646875b8ed1613a2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bdd_info &gt;</type>
      <name>bdd_info_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>aae899f4798d4177a007304f8cb6a7967</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bdd_dict</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ad2076425544919476f16812e2c9cc242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~bdd_dict</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>af6f03983c2f4647cf0a192d5868c1b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_proposition</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a6095afcbbb4fbe67066d51169e80d333</anchor>
      <arglist>(const ltl::formula *f, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_propositions</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>abb99eed0b49ffba5229af45ef7c1e05f</anchor>
      <arglist>(bdd f, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_state</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ac5b0d292aafacbfbbd233080fe4a4ad0</anchor>
      <arglist>(const ltl::formula *f, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_acceptance_variable</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>abb27e26e93d99e046dbe9e9d0cb21485</anchor>
      <arglist>(const ltl::formula *f, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_clone_acc</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>abebfcb644db70ac9368ff316317059a3</anchor>
      <arglist>(int var, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_acceptance_variables</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ac4e496809f4027831aed7457fc8b7f3a</anchor>
      <arglist>(bdd f, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>const ltl::formula *</type>
      <name>oneacc_to_formula</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ae9584f1914c0f5dad897e60f5d560bb9</anchor>
      <arglist>(bdd oneacc) const </arglist>
    </member>
    <member kind="function">
      <type>const ltl::formula *</type>
      <name>oneacc_to_formula</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ad1f021480a019e739c54c8e107b27939</anchor>
      <arglist>(int var) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_anonymous_variables</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a7075f190e5d3a4face68a7a6e129eb95</anchor>
      <arglist>(int n, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_all_variables_of</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>af7e1e37179f390322da4d4cbf134b282</anchor>
      <arglist>(const void *from_other, const void *for_me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_all_my_variables</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a64b9d9dcc789312a700519388faf40e8</anchor>
      <arglist>(const void *me)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregister_variable</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>aa502521a61d81107e8c7ce5fab09ed7c</anchor>
      <arglist>(int var, const void *me)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ad5ce6572f9b85f7996f391276ea024f0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assert_emptiness</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a24d18da7cfd50865e23c32195e13f4d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allocate_variables</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a7b566c8e4046fe012d20e60ed4c058e9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_variables</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a12efeee5e8c5786d814996cab0ec3097</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_registered_proposition</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a0676f051e8333759c46e01e8a602eeaf</anchor>
      <arglist>(const ltl::formula *f, const void *by_me)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_registered_state</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a91c13eeb02e0bddcbe0360a05f3dec05</anchor>
      <arglist>(const ltl::formula *f, const void *by_me)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_registered_acceptance_variable</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a42a9f018f9b52e89b383b9dd722f80d1</anchor>
      <arglist>(const ltl::formula *f, const void *by_me)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a1ca5ce94f2ce0de339fc7f59f1d0c2ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>fv_map</type>
      <name>now_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>af654f827c195d9a47fb733a7c6341aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fv_map</type>
      <name>var_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a9f47535b3c6ca438bb58975a240d783f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fv_map</type>
      <name>acc_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>adea537e22c5889d908170b17ab8e8fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd_info_map</type>
      <name>bdd_map</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a8358c623b5fe26e74d167e10d2033a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bddPair *</type>
      <name>next_to_now</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a1ecc1ea5dd6b7cf1d89d7add2cd056de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bddPair *</type>
      <name>now_to_next</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a27dd24fcedeb14ccc72df82be8588a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; const void *, anon_free_list &gt;</type>
      <name>free_anonymous_list_of_type</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>ac2fa5711429e22d62e36d2298b8662c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>free_anonymous_list_of_type</type>
      <name>free_anonymous_list_of</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>afc4bf1881835873c99827d4d42d63dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lvarnum</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a3736ca5090949c9fb93745544b95daab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>initialized</name>
      <anchorfile>classspot_1_1bdd__allocator.html</anchorfile>
      <anchor>a3916225a141645c15fa4d53848ef4f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>bdd_dict</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>a0b647287ae4a25e1d72273a289eedbe6</anchor>
      <arglist>(const bdd_dict &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bdd_dict &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1bdd__dict.html</anchorfile>
      <anchor>adc2ce6e1df9d89f44c51a2430d61270a</anchor>
      <arglist>(const bdd_dict &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::bdd_dict::anon_free_list</name>
    <filename>classspot_1_1bdd__dict_1_1anon__free__list.html</filename>
    <base>spot::free_list</base>
    <member kind="function">
      <type></type>
      <name>anon_free_list</name>
      <anchorfile>classspot_1_1bdd__dict_1_1anon__free__list.html</anchorfile>
      <anchor>a765044d895b9c611fa2e239c2f42fdba</anchor>
      <arglist>(bdd_dict *d=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>extend</name>
      <anchorfile>classspot_1_1bdd__dict_1_1anon__free__list.html</anchorfile>
      <anchor>ae2ae1a14e2aad12f7c82d8415fb4f8b6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>register_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a5e2485e960b7a0924c8801c19c7d9b43</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_n</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a970f34e2944cb3c6573d605c4d01859a</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_free_list</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a04eda5448cc79d16aefe8014ee95e097</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a0e9d104134e6db9feeb9a5ead1a4fe57</anchor>
      <arglist>(int base, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>ab2ee6a3adeb1c8ae1a9bc062f3914349</anchor>
      <arglist>(int base, int n=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>free_count</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a6837cabb4a7b847af6930462e75a57d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int, int &gt;</type>
      <name>pos_lenght_pair</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>a2772e28510a1ad89342eeeb93a8fb9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; pos_lenght_pair &gt;</type>
      <name>free_list_type</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>af7e87c1c112d0e26b44396de9cc78843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>aeac5a308e26bb6e6058e720da145bf5b</anchor>
      <arglist>(free_list_type::iterator i, int base, int n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>free_list_type</type>
      <name>fl</name>
      <anchorfile>classspot_1_1free__list.html</anchorfile>
      <anchor>afdaed42e797fc05cfab78c5450838b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1bdd__dict_1_1anon__free__list.html</anchorfile>
      <anchor>a977e889d44c17faeb12e4b65feff314a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::bdd_dict::bdd_info</name>
    <filename>structspot_1_1bdd__dict_1_1bdd__info.html</filename>
    <member kind="function">
      <type></type>
      <name>bdd_info</name>
      <anchorfile>structspot_1_1bdd__dict_1_1bdd__info.html</anchorfile>
      <anchor>ae2398d7781de30b056bbc96c8d6b509e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>var_type</type>
      <name>type</name>
      <anchorfile>structspot_1_1bdd__dict_1_1bdd__info.html</anchorfile>
      <anchor>afefb37b0f4a103f6ab68753516116819</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ltl::formula *</type>
      <name>f</name>
      <anchorfile>structspot_1_1bdd__dict_1_1bdd__info.html</anchorfile>
      <anchor>a97bc53a60e5f608900cc0758dc9aaa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ref_set</type>
      <name>refs</name>
      <anchorfile>structspot_1_1bdd__dict_1_1bdd__info.html</anchorfile>
      <anchor>a02cee2587b4de84e7c6b76cca9735eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>clone_counts</name>
      <anchorfile>structspot_1_1bdd__dict_1_1bdd__info.html</anchorfile>
      <anchor>a471fa39b9e7c0a1f452dfe95e6132fe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::future_conditions_collector</name>
    <filename>classspot_1_1future__conditions__collector.html</filename>
    <base>spot::tgba_scc</base>
    <member kind="typedef">
      <type>scc_map::cond_set</type>
      <name>cond_set</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>a0a4d6a9b3c298a63ec31ba53f176f0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; cond_set &gt;</type>
      <name>fc_map</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>ad71adbd68bd9d1c715b1dfe433ee9b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>future_conditions_collector</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>affad02b39992b437787963d8058bc8d0</anchor>
      <arglist>(const tgba *aut, bool show=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~future_conditions_collector</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>ab78f0e856c80ffa0a3e64a52246eda6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const cond_set &amp;</type>
      <name>future_conditions</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>a9417271a5ecac3517205108fbcf1e638</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>abacda9a16684c85c38d4facae91b7fe4</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>scc_of_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a0710f2fdfd1d418eef39b96f03b21d68</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a6600532f73f9304621e549c376f37df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>aeaf6d30f608df4268ea24c53b90c3bc8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a869636920f00191acf639fe8915f29dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>af7c36cfb1aae3bfc5b8d8aa19ab406b6</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a8ba8488fdfb38d40e195ff5d401efbf0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>ae498ad52cc2dfca08b9ecc71093be05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a3556e6082858d044414259716d91d494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a2ce1ad3317b1e2bb28e62eef910956f2</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a4300be39b5499a988e993ed07024ff86</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>map_builder_</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>aa0a6820055f43c4f30fc1a18d8c5f60a</anchor>
      <arglist>(unsigned s)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fc_map</type>
      <name>future_conds_</name>
      <anchorfile>classspot_1_1future__conditions__collector.html</anchorfile>
      <anchor>a1046c1069d81be83e2fbeb518ec64a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a4ad09f78f47f597ab2a990629c82d0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scc_map</type>
      <name>scc_map_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a61bfc7853d41442acd8bce8f157b2f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>show_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>ae7417c0aa6f8ae27a7b20fbb2b7f12e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::sba</name>
    <filename>classspot_1_1sba.html</filename>
    <base>spot::tgba</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>state_is_accepting</name>
      <anchorfile>classspot_1_1sba.html</anchorfile>
      <anchor>a9c406600cd4e363d5d6be8812f28495a</anchor>
      <arglist>(const spot::state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a3455011d3860bbd101a7f75ae2aad009</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a372b5a1582f8cb9fccd91c413350c8b8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a5a52dc9090be87bf46c59d487bf84f42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a2700b9f829bf2a884e29df8394ee2521</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a752a730728601d572f5147dd8811316d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a4d531428cb11fe9be3ddbf1928eb3657</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a917f0b1310e4838626cd3de923642356</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ae9128398fd3001b3e0b76f43d0c7b4aa</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state</name>
    <filename>classspot_1_1state.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>af3a06cae8daa3aa622f83873e983b75c</anchor>
      <arglist>(const state *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>a453665382e0f590fab7d6608e690729f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>a761dcaab0d082dd18db5f6ebf7c38ce0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~state</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>a93b28d1aa2200cccdb4159bcf3e7b761</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_ptr_less_than</name>
    <filename>structspot_1_1state__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__ptr__less__than.html</anchorfile>
      <anchor>a7dce3bc903eb3de2b1397f2dfb835193</anchor>
      <arglist>(const state *left, const state *right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_ptr_equal</name>
    <filename>structspot_1_1state__ptr__equal.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__ptr__equal.html</anchorfile>
      <anchor>a843b5a1df9dcf975e981dc7aa808fa63</anchor>
      <arglist>(const state *left, const state *right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_ptr_hash</name>
    <filename>structspot_1_1state__ptr__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__ptr__hash.html</anchorfile>
      <anchor>adc946e59a50471529eceb60087dc2513</anchor>
      <arglist>(const state *that) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_shared_ptr_less_than</name>
    <filename>structspot_1_1state__shared__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__shared__ptr__less__than.html</anchorfile>
      <anchor>a9dc6d22b7663a1a71c7d1b0930906864</anchor>
      <arglist>(shared_state left, shared_state right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_shared_ptr_equal</name>
    <filename>structspot_1_1state__shared__ptr__equal.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__shared__ptr__equal.html</anchorfile>
      <anchor>a3a93799e387d7307017f39d3e5dabd66</anchor>
      <arglist>(shared_state left, shared_state right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_shared_ptr_hash</name>
    <filename>structspot_1_1state__shared__ptr__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1state__shared__ptr__hash.html</anchorfile>
      <anchor>a580ae807d4549910435a6ae8fe542279</anchor>
      <arglist>(shared_state that) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_bdd</name>
    <filename>classspot_1_1state__bdd.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_bdd</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>ad08aef515653b85eded1634f1ed59978</anchor>
      <arglist>(bdd s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>as_bdd</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>a5bfc19408e3ddf2e8322466efc17f04d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>a1cef7f8917a422071bfc919e3a16fbb8</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>af8b5f391533201596c6aab7693dd274c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_bdd *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>adfa6f9e17caed53e128b2b83b368ae47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>state_</name>
      <anchorfile>classspot_1_1state__bdd.html</anchorfile>
      <anchor>a90b4a51248aa8218ed633e54258bb1da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_succ_iterator</name>
    <filename>classspot_1_1tgba__succ__iterator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_succ_iterator</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>ae21dcf415efaa9b59e6cadc2490c3263</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a09901d8bb1addc2512f99ea2d47dc70a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>aad7914dae3d29f19e3d48c628a4e2da1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a8e5b92f684fad0d93c49a85342cad192</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>ac2e83755c24ac845e3dc88a371bbd50c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a6498ab0e8ad7af781876f5c09a23b6a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__succ__iterator.html</anchorfile>
      <anchor>a00f20efb3ef4741c65069adb4cfb5ae6</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_succ_iterator_concrete</name>
    <filename>classspot_1_1tgba__succ__iterator__concrete.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgba_succ_iterator_concrete</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>aa364e35af0138d35f7f705f551c740e2</anchor>
      <arglist>(const tgba_bdd_core_data &amp;d, bdd successors)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_succ_iterator_concrete</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a4886d7e62d648a8f549c2b8202c1d6c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a5896f9fb5b8f9cbd8f6605978363bda3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>afade7f08aab50c91d14497714c03ddb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a0005c2c8adec1858a9c6ab2505c4f5fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_bdd *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>aeb9162fccaa85bdc5a71282908d0cc04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a5384ea3288ddfc065e46987c2a2c4813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>aec308caa9f3dbca3d5d14e13d809f274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba_bdd_core_data &amp;</type>
      <name>data_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>accdb6af8456d8257479936ed2b4614ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>succ_set_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>af0b6b667b577a7e596a17f07d6ff6c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>succ_set_left_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>aeaabadd39f6633b4dabf956fa08e6bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>current_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a7fabd0bcbfa9a1dddeef032a3bec0974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>current_state_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a664ef009f693b541ab8b8e7101a1ea73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>current_acc_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__concrete.html</anchorfile>
      <anchor>a51eef158ce8bb526a7ac32b7188d9381</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::taa_tgba</name>
    <filename>classspot_1_1taa__tgba.html</filename>
    <base>spot::tgba</base>
    <class kind="struct">spot::taa_tgba::transition</class>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac08e7b3b074e8bad71a7e965b2308977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; state * &gt;</type>
      <name>state_set</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a73cffaf83ac5f937919c09309836dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>taa_tgba</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>afc04c5e8692153026d7d1b16656685c5</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a154d952f8bc58ea57903207252d4a7a4</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~taa_tgba</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ab6956a578c9071cc0bd0b052529b800a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a13f3d623845bf96854e276a85ad1d18f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>aa77fd6a112f5992c9a4407f8475254d2</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a500cee2eac8f394345fcca6c50ee9645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ae34b7b1535fc4b5a7f00ce4c381df8c7</anchor>
      <arglist>(const spot::state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a58443bde21da3ab6b5ad97185b849cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a6519608142b9e2f8735859bed8db7d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; taa_tgba::state_set * &gt;</type>
      <name>ss_vec</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a9fd75508bf590fb7351e33a50a376238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a7c7f646be7454e09edb7e28bb4a30123</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a54eedc3021c0cf124288f81674a94ec1</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a3e0df6be590fbae4e55ddd1add8b76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3f9cce5f60cc5b8121ab4b8903bd6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a01502b7532e79fe29cb302feb766faec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3ed5462cbda3dfe812e99856db02792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>taa_tgba::state_set *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a4bf8d7fc63fe8256a84b48e2c2d49bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ss_vec</type>
      <name>state_set_vec_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>abcd0e55c9b656ebfd4150ff398ce02de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>taa_tgba</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ab7b1140eb422b1f4bd2a54dd7f1a188d</anchor>
      <arglist>(const taa_tgba &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>taa_tgba &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a0f90e0cf0595dcaa976e3ce7c08c57b2</anchor>
      <arglist>(const taa_tgba &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::taa_tgba::transition</name>
    <filename>structspot_1_1taa__tgba_1_1transition.html</filename>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1taa__tgba_1_1transition.html</anchorfile>
      <anchor>a1b1be69814307d32a9648cf8eb320f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acceptance_conditions</name>
      <anchorfile>structspot_1_1taa__tgba_1_1transition.html</anchorfile>
      <anchor>aeb3e67a14f56ae3726e427af36fde27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const state_set *</type>
      <name>dst</name>
      <anchorfile>structspot_1_1taa__tgba_1_1transition.html</anchorfile>
      <anchor>a71a350fd597f5de942d15680ca089aa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_set</name>
    <filename>classspot_1_1state__set.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_set</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>ae9095d73d6267df83fe9b9978f84eece</anchor>
      <arglist>(const taa_tgba::state_set *s, bool delete_me=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>ac5ba93913d43625429af23bbc3d25b1c</anchor>
      <arglist>(const spot::state *) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>a4a9379322ffae2f796aab2b76f2a15ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_set *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>a65798f8696827dec3c840ed93015652d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_set</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>a89dce97704cd01732facd67adbf4eadb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const taa_tgba::state_set *</type>
      <name>get_state</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>abd0075782eb0eab5ae5b5ec954263198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const taa_tgba::state_set *</type>
      <name>s_</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>a5ac27b8364319a925e9904a300344fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>delete_me_</name>
      <anchorfile>classspot_1_1state__set.html</anchorfile>
      <anchor>a54d502b290fbc722bce80dcc2fa94aa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::taa_succ_iterator</name>
    <filename>classspot_1_1taa__succ__iterator.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <class kind="struct">spot::taa_succ_iterator::distance_sort</class>
    <member kind="function">
      <type></type>
      <name>taa_succ_iterator</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>aff4975afe68907e3847f18285610c1b5</anchor>
      <arglist>(const taa_tgba::state_set *s, bdd all_acc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~taa_succ_iterator</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a2d3a0c9bbdbecf08ed56c2e4d366a2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a504c0ec0282beb6a7c2d2f1183d20f1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>ac59717005fd43ce818d7d272d1118ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a0d9ebba037a889c465a135f0021a4bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_set *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>ab4483a2732fe76c4875f6dfaf0fc76c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a61631dcc09e9c3fed33b4239d8cd81cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a23c600f1b51389fc2beefae2a780a775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>taa_tgba::state::const_iterator</type>
      <name>iterator</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a62555bb91838c0665a096bf76fa86be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; iterator, iterator &gt;</type>
      <name>iterator_pair</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a32f69a6c5c5a9f17183a951488a971d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; iterator_pair &gt;</type>
      <name>bounds_t</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a0341857459a6e79688fc8d58ffad1c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const spot::state_set *, std::vector&lt; taa_tgba::transition * &gt;, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a5b15928e55a45504024203eedc140a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; taa_tgba::transition * &gt;::const_iterator</type>
      <name>i_</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a634e74806db4b500d159bea0fa55e734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; taa_tgba::transition * &gt;</type>
      <name>succ_</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a96c6aa1efb5402494fea557a181e14cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>ae2fe9469d1e5620738fb20ce989be442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>seen_map</type>
      <name>seen_</name>
      <anchorfile>classspot_1_1taa__succ__iterator.html</anchorfile>
      <anchor>a15720fdcb808ceba72cea7fb49c5efb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::taa_succ_iterator::distance_sort</name>
    <filename>structspot_1_1taa__succ__iterator_1_1distance__sort.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1taa__succ__iterator_1_1distance__sort.html</anchorfile>
      <anchor>a5b0d6c9459bdd6a400c8b8a928525c16</anchor>
      <arglist>(const iterator_pair &amp;lhs, const iterator_pair &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::taa_tgba_labelled</name>
    <filename>classspot_1_1taa__tgba__labelled.html</filename>
    <templarg>label</templarg>
    <templarg>label_hash</templarg>
    <base>spot::taa_tgba</base>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac08e7b3b074e8bad71a7e965b2308977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; state * &gt;</type>
      <name>state_set</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a73cffaf83ac5f937919c09309836dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>taa_tgba_labelled</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a57a8bab8eeb147f401cffce597de8e81</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ab6425c36d55c28e32665abafe3f1db35</anchor>
      <arglist>(const label &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ae07d0c03fb09a202b8ed7789d255b685</anchor>
      <arglist>(const std::vector&lt; label &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a20baa4999f27fccabac4101996e69fe7</anchor>
      <arglist>(const label &amp;s, const std::vector&lt; label &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a2004066d8d5d28aa8acffd0888d35a23</anchor>
      <arglist>(const label &amp;s, const label &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad0950b337cb8d754cca4cea51a6cee26</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a3fb77cd8594b8c8d896210c753a01135</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad80d9a727fccd44fa76abdb05fc2b063</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a154d952f8bc58ea57903207252d4a7a4</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a13f3d623845bf96854e276a85ad1d18f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>aa77fd6a112f5992c9a4407f8475254d2</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a500cee2eac8f394345fcca6c50ee9645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a58443bde21da3ab6b5ad97185b849cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a6519608142b9e2f8735859bed8db7d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>label</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>aacffb4232c7b325729d0f6deebc44cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const label, taa_tgba::state *, label_hash &gt;</type>
      <name>ns_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a5dfcd05a88ee86415a2b28d949410f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const taa_tgba::state *, label, ptr_hash&lt; taa_tgba::state &gt; &gt;</type>
      <name>sn_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a240ca6894401be53e54442788f170c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; taa_tgba::state_set * &gt;</type>
      <name>ss_vec</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a9fd75508bf590fb7351e33a50a376238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::string</type>
      <name>label_to_string</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad5a245025d4623607818a2369908e900</anchor>
      <arglist>(const label_t &amp;lbl) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual label_t</type>
      <name>clone_if</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a75b77437ad8a684f575125c16e914985</anchor>
      <arglist>(const label_t &amp;lbl) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a7c7f646be7454e09edb7e28bb4a30123</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a54eedc3021c0cf124288f81674a94ec1</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ns_map</type>
      <name>name_state_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a0851533f1e39047508a2db63e17f9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sn_map</type>
      <name>state_name_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a74693c4860d98baa27824787b0add0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a3e0df6be590fbae4e55ddd1add8b76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3f9cce5f60cc5b8121ab4b8903bd6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a01502b7532e79fe29cb302feb766faec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3ed5462cbda3dfe812e99856db02792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>taa_tgba::state_set *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a4bf8d7fc63fe8256a84b48e2c2d49bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ss_vec</type>
      <name>state_set_vec_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>abcd0e55c9b656ebfd4150ff398ce02de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>taa_tgba::state *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a86825eec5b04d05dc2e0a52e6335ba39</anchor>
      <arglist>(const label &amp;name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>taa_tgba::state_set *</type>
      <name>add_state_set</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>aad76a6ee99e467f46c84b7a01b29bdb6</anchor>
      <arglist>(const std::vector&lt; label &gt; &amp;names)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>std::string</type>
      <name>format_state_set</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>aa6aa5e0d541d4b66b9f1de611c0d2689</anchor>
      <arglist>(const taa_tgba::state_set *ss) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::taa_tgba_string</name>
    <filename>classspot_1_1taa__tgba__string.html</filename>
    <base>taa_tgba_labelled&lt; std::string, string_hash &gt;</base>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac08e7b3b074e8bad71a7e965b2308977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; state * &gt;</type>
      <name>state_set</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a73cffaf83ac5f937919c09309836dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>taa_tgba_string</name>
      <anchorfile>classspot_1_1taa__tgba__string.html</anchorfile>
      <anchor>a434588310442f43cfc0fddc09ee31b86</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~taa_tgba_string</name>
      <anchorfile>classspot_1_1taa__tgba__string.html</anchorfile>
      <anchor>a6018edcbdc7619ebd919ba19c6a46faa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ab6425c36d55c28e32665abafe3f1db35</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ae07d0c03fb09a202b8ed7789d255b685</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a20baa4999f27fccabac4101996e69fe7</anchor>
      <arglist>(const std::string &amp;s, const std::vector&lt; std::string &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a2004066d8d5d28aa8acffd0888d35a23</anchor>
      <arglist>(const std::string &amp;s, const std::string &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad0950b337cb8d754cca4cea51a6cee26</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a3fb77cd8594b8c8d896210c753a01135</anchor>
      <arglist>(const spot::state *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad80d9a727fccd44fa76abdb05fc2b063</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a154d952f8bc58ea57903207252d4a7a4</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a13f3d623845bf96854e276a85ad1d18f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>aa77fd6a112f5992c9a4407f8475254d2</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a500cee2eac8f394345fcca6c50ee9645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a58443bde21da3ab6b5ad97185b849cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a6519608142b9e2f8735859bed8db7d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::string</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>aacffb4232c7b325729d0f6deebc44cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const std::string, taa_tgba::state *, string_hash &gt;</type>
      <name>ns_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a5dfcd05a88ee86415a2b28d949410f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const taa_tgba::state *, std::string, ptr_hash&lt; taa_tgba::state &gt; &gt;</type>
      <name>sn_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a240ca6894401be53e54442788f170c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; taa_tgba::state_set * &gt;</type>
      <name>ss_vec</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a9fd75508bf590fb7351e33a50a376238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>label_to_string</name>
      <anchorfile>classspot_1_1taa__tgba__string.html</anchorfile>
      <anchor>a8899ed75f067bbaa4d959e2d5b8f982a</anchor>
      <arglist>(const std::string &amp;label) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>clone_if</name>
      <anchorfile>classspot_1_1taa__tgba__string.html</anchorfile>
      <anchor>a12895103adb6c7f520f21ca9769be50a</anchor>
      <arglist>(const std::string &amp;label) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a7c7f646be7454e09edb7e28bb4a30123</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a54eedc3021c0cf124288f81674a94ec1</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ns_map</type>
      <name>name_state_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a0851533f1e39047508a2db63e17f9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sn_map</type>
      <name>state_name_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a74693c4860d98baa27824787b0add0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a3e0df6be590fbae4e55ddd1add8b76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3f9cce5f60cc5b8121ab4b8903bd6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a01502b7532e79fe29cb302feb766faec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3ed5462cbda3dfe812e99856db02792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>taa_tgba::state_set *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a4bf8d7fc63fe8256a84b48e2c2d49bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ss_vec</type>
      <name>state_set_vec_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>abcd0e55c9b656ebfd4150ff398ce02de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::taa_tgba_formula</name>
    <filename>classspot_1_1taa__tgba__formula.html</filename>
    <base>taa_tgba_labelled&lt; const ltl::formula *, ltl::formula_ptr_hash &gt;</base>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac08e7b3b074e8bad71a7e965b2308977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; state * &gt;</type>
      <name>state_set</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a73cffaf83ac5f937919c09309836dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>taa_tgba_formula</name>
      <anchorfile>classspot_1_1taa__tgba__formula.html</anchorfile>
      <anchor>af44b8923752768de2ea8af43a5447de6</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~taa_tgba_formula</name>
      <anchorfile>classspot_1_1taa__tgba__formula.html</anchorfile>
      <anchor>aab24891e88947f8673dbc4e650902bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ab6425c36d55c28e32665abafe3f1db35</anchor>
      <arglist>(const const ltl::formula *&amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ae07d0c03fb09a202b8ed7789d255b685</anchor>
      <arglist>(const std::vector&lt; const ltl::formula * &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a20baa4999f27fccabac4101996e69fe7</anchor>
      <arglist>(const const ltl::formula *&amp;s, const std::vector&lt; const ltl::formula * &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a2004066d8d5d28aa8acffd0888d35a23</anchor>
      <arglist>(const const ltl::formula *&amp;s, const const ltl::formula *&amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad0950b337cb8d754cca4cea51a6cee26</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a3fb77cd8594b8c8d896210c753a01135</anchor>
      <arglist>(const spot::state *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>output</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>ad80d9a727fccd44fa76abdb05fc2b063</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a154d952f8bc58ea57903207252d4a7a4</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual spot::state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a13f3d623845bf96854e276a85ad1d18f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>aa77fd6a112f5992c9a4407f8475254d2</anchor>
      <arglist>(const spot::state *local_state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a500cee2eac8f394345fcca6c50ee9645</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a58443bde21da3ab6b5ad97185b849cf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a6519608142b9e2f8735859bed8db7d95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const ltl::formula *</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>aacffb4232c7b325729d0f6deebc44cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const const ltl::formula *, taa_tgba::state *, ltl::formula_ptr_hash &gt;</type>
      <name>ns_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a5dfcd05a88ee86415a2b28d949410f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const taa_tgba::state *, const ltl::formula *, ptr_hash&lt; taa_tgba::state &gt; &gt;</type>
      <name>sn_map</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a240ca6894401be53e54442788f170c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; taa_tgba::state_set * &gt;</type>
      <name>ss_vec</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a9fd75508bf590fb7351e33a50a376238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::string</type>
      <name>label_to_string</name>
      <anchorfile>classspot_1_1taa__tgba__formula.html</anchorfile>
      <anchor>a9bdf42bc781816427afa434e19cd9ef8</anchor>
      <arglist>(const label_t &amp;label) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const ltl::formula *</type>
      <name>clone_if</name>
      <anchorfile>classspot_1_1taa__tgba__formula.html</anchorfile>
      <anchor>a9a852208441c31e096c7b0ede61917a7</anchor>
      <arglist>(const label_t &amp;label) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a7c7f646be7454e09edb7e28bb4a30123</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a54eedc3021c0cf124288f81674a94ec1</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ns_map</type>
      <name>name_state_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a0851533f1e39047508a2db63e17f9e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sn_map</type>
      <name>state_name_map_</name>
      <anchorfile>classspot_1_1taa__tgba__labelled.html</anchorfile>
      <anchor>a74693c4860d98baa27824787b0add0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a3e0df6be590fbae4e55ddd1add8b76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3f9cce5f60cc5b8121ab4b8903bd6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a01502b7532e79fe29cb302feb766faec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>ac3ed5462cbda3dfe812e99856db02792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>taa_tgba::state_set *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>a4bf8d7fc63fe8256a84b48e2c2d49bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ss_vec</type>
      <name>state_set_vec_</name>
      <anchorfile>classspot_1_1taa__tgba.html</anchorfile>
      <anchor>abcd0e55c9b656ebfd4150ff398ce02de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba</name>
    <filename>classspot_1_1tgba.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ae87e13c65699a7c1a801bc0eb1285718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a3455011d3860bbd101a7f75ae2aad009</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a372b5a1582f8cb9fccd91c413350c8b8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const =0</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a5a52dc9090be87bf46c59d487bf84f42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a2700b9f829bf2a884e29df8394ee2521</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a752a730728601d572f5147dd8811316d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a4d531428cb11fe9be3ddbf1928eb3657</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>tgba</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>aa606dc20990f4fb0c779d6e7c1b6a1fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a917f0b1310e4838626cd3de923642356</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ae9128398fd3001b3e0b76f43d0c7b4aa</anchor>
      <arglist>(const state *state) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>last_support_conditions_output_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a938c95ad89acd77b4a4ffa06aac1b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>last_support_variables_output_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>af05d20866a1a1a84fde7773410da6a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>num_acc_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ad23432e675c5b406da4b7395e0729a8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_bdd_concrete</name>
    <filename>classspot_1_1tgba__bdd__concrete.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_concrete</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a38abffd64eeecace04ed61471370f759</anchor>
      <arglist>(const tgba_bdd_factory &amp;fact)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_concrete</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a5daeb83641ac0a3edf39d16dd27d2a0f</anchor>
      <arglist>(const tgba_bdd_factory &amp;fact, bdd init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_bdd_concrete</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a3c0bc2e64d4e78890079d7e7be401078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>afa8e0f6c33006b3b3afb997a1a570ed2</anchor>
      <arglist>(bdd s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_bdd *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a90ba591caf7752240e11cfc7c30d8e65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>get_init_bdd</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a76d420c40bc8cd4ee2f0e0269134d7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator_concrete *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>ae1a905bd60233fd94c8a693519239308</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>aabe8293cf460853659bae84283f07895</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>ae6efdd09761a0c8f62f17ce88f237527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tgba_bdd_core_data &amp;</type>
      <name>get_core_data</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>af6a5daf37a38e1496e04af6766a2524e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>afada031707788ff70a99c7c1b5c23476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a64575d12a09c13735d161d7c1bd0313d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_unaccepting_scc</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>ae812c7452c83cc608bbfb5485c52d599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a882cd2a26d0fa9d5da1273fb205d6b37</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a654b132604cc4001bca8050f7e47bbf7</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_bdd_core_data</type>
      <name>data_</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>ae9f128a7964713decc50a18934691e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>init_</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a7e99671d794c73c99d29b2c744e4d5f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_bdd_concrete</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>ae9ba9cc354015f6ee349129bf0e52168</anchor>
      <arglist>(const tgba_bdd_concrete &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_bdd_concrete &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete.html</anchorfile>
      <anchor>a4530aade4f23f653c574f22be9408df5</anchor>
      <arglist>(const tgba_bdd_concrete &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_bdd_concrete_factory</name>
    <filename>classspot_1_1tgba__bdd__concrete__factory.html</filename>
    <base>spot::tgba_bdd_factory</base>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_concrete_factory</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a830df7027d719cc3574e89d8a383e722</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_bdd_concrete_factory</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a91d49d7d7b98ae8483c9437cd3a12d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create_state</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>ac6cf312ceb992728e78e37bdc4ed0336</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create_anonymous_state</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a27b93af55fd747d17e8c85b74b195975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>create_atomic_prop</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>aeec16411072546e89dc612ef139b19a9</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>aa83197dccba164a208cf22b1c643d5a6</anchor>
      <arglist>(bdd b, const ltl::formula *a)</arglist>
    </member>
    <member kind="function">
      <type>const tgba_bdd_core_data &amp;</type>
      <name>get_core_data</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a6a7f60a1e8e45d43cac26516795a98fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>ab7f8425a041e300129ff0a44e232ab46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constrain_relation</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>aedb7c77666bfad9ee507254b8b382571</anchor>
      <arglist>(bdd new_rel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a8c575ec7e41eafc29c7fb4ca439b67c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const ltl::formula *, bdd, ltl::formula_ptr_hash &gt;</type>
      <name>acc_map_</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>aead802a201c4b50aae323ae176be07d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tgba_bdd_core_data</type>
      <name>data_</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a07b3e3b8e7b06e2f38165daa0609585f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>acc_map_</type>
      <name>acc_</name>
      <anchorfile>classspot_1_1tgba__bdd__concrete__factory.html</anchorfile>
      <anchor>a9f8c68bc5956364f77c4f610f467fa45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::tgba_bdd_core_data</name>
    <filename>structspot_1_1tgba__bdd__core__data.html</filename>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_core_data</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>ac4d1e835b96ab8264aac2a2ed50f73df</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_core_data</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>ac236f34dee1ce44a31ca7199cad9face</anchor>
      <arglist>(const tgba_bdd_core_data &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_bdd_core_data</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a0a49ac42ea3111e3e14df59a0350ee33</anchor>
      <arglist>(const tgba_bdd_core_data &amp;left, const tgba_bdd_core_data &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>const tgba_bdd_core_data &amp;</type>
      <name>operator=</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a48cb178a36be852106a3f5a2c500e2aa</anchor>
      <arglist>(const tgba_bdd_core_data &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_now_next</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>ae9804355c508876e8bd04d6b119c0e4a</anchor>
      <arglist>(bdd now, bdd next)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_atomic_prop</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>ade918f045d34a51e000158f73c698072</anchor>
      <arglist>(bdd var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a668e6bbc7dfc65d231db6694fe256b4a</anchor>
      <arglist>(bdd prom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delete_unaccepting_scc</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a5d207815a5512733ae0cfaf2febe86e3</anchor>
      <arglist>(bdd init)</arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>relation</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>aa304f53084eadf2a73b2ed16fd63eeb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acceptance_conditions</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a8a693bbcaa794d1503c667bb56905a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acceptance_conditions_support</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a86c46e456ca25f64684550acc5262ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>aabee4b6acc70a6a9dd7c4193cf70b648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>now_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a57f5083712b3f2ff3bbc05236df0ba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>next_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a3ced731d0d9eeaf380b681fae44c3dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>nownext_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>aeb96c7c0d8901082c3ee7af12cd1b0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>notnow_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a3f647bc2217a35cd5b41ea442b5f0fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>notnext_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a95d4747f62d7ef1348d89b370318b02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>var_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>aa1bc747a58e8d64bbb94c735a66548c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>notvar_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a2e83403899aa907ac4c3e3b90749a252</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>varandnext_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a40e40af7150cc431d3f17c71d157f452</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acc_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a997858217ebc0cbc304258fe53d5c990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>notacc_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a12e79ba7db251dd24bac7849bcc840fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>negacc_set</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a27ea4bcb390c7b2c54b547444d67ae56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd_dict *</type>
      <name>dict</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a06a48a4843cbec690ad5ef99d12eb1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bdd</type>
      <name>infinitely_often</name>
      <anchorfile>structspot_1_1tgba__bdd__core__data.html</anchorfile>
      <anchor>a621438cdb9e02a0441f65b72cd538e09</anchor>
      <arglist>(bdd s, bdd acc, bdd er)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_bdd_factory</name>
    <filename>classspot_1_1tgba__bdd__factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_bdd_factory</name>
      <anchorfile>classspot_1_1tgba__bdd__factory.html</anchorfile>
      <anchor>a07d4fe635eb0c52f15953a51ff5d2ea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const tgba_bdd_core_data &amp;</type>
      <name>get_core_data</name>
      <anchorfile>classspot_1_1tgba__bdd__factory.html</anchorfile>
      <anchor>ae219a33c2fb16b4c4bb7080581d083dc</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::destroy_key</name>
    <filename>structspot_1_1destroy__key.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>structspot_1_1destroy__key.html</anchorfile>
      <anchor>a7ac10e5d3efbf800fb28985a5ad7fb8a</anchor>
      <arglist>(T t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::destroy_key&lt; const ltl::formula * &gt;</name>
    <filename>structspot_1_1destroy__key_3_01const_01ltl_1_1formula_01_5_01_4.html</filename>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>structspot_1_1destroy__key_3_01const_01ltl_1_1formula_01_5_01_4.html</anchorfile>
      <anchor>a57908e441a92737a161005d17749145d</anchor>
      <arglist>(const ltl::formula *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_explicit</name>
    <filename>classspot_1_1state__explicit.html</filename>
    <templarg>Label</templarg>
    <templarg>label_hash</templarg>
    <base>spot::state</base>
    <class kind="struct">spot::state_explicit::transition</class>
    <member kind="typedef">
      <type>Label</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ab2a44ec7154ba19d7d271b21ec1814ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>label_hash</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a3480349a09ece4c34fe47942953ba7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; transition &gt;</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae921607b9ce091194eb3462e0f378190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>aad7a76872ce53eefeaed48eb6f91a051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ab0ca14b3ba903249dabcee9af7e13309</anchor>
      <arglist>(const Label &amp;l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_explicit</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>aa04a42f2d0d0bbef615aa67dde0fe15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>acfaec036581d609b822c3098641b2340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Label &amp;</type>
      <name>label</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a4a6670c0f43b3fee76fab3e606b2b13b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a91c744e7fa06aa4884facbda0d642d5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a1fc57e536139259c0cb12a2ec360c6a4</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a011b10e996795c993c02666803ab2a06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_explicit&lt; Label, label_hash &gt; *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>afecf9b6317b0729e40c7d4a03437bafe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>transitions_t</type>
      <name>successors</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae8dcd02475b401e6fb2295f6f817b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Label</type>
      <name>label_</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a19bf982134fa41608942599ac2999e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::state_explicit::transition</name>
    <filename>structspot_1_1state__explicit_1_1transition.html</filename>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1state__explicit_1_1transition.html</anchorfile>
      <anchor>a569f9a5a0d0d5604332113349de7a22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acceptance_conditions</name>
      <anchorfile>structspot_1_1state__explicit_1_1transition.html</anchorfile>
      <anchor>abaeef79431406c2f1fda1e7497d296da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const state_explicit&lt; Label, label_hash &gt; *</type>
      <name>dest</name>
      <anchorfile>structspot_1_1state__explicit_1_1transition.html</anchorfile>
      <anchor>a009cc525129eee365fd9891df98a5f43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_explicit_number</name>
    <filename>classspot_1_1state__explicit__number.html</filename>
    <base>state_explicit&lt; int, identity_hash&lt; int &gt; &gt;</base>
    <member kind="typedef">
      <type>int</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ab2a44ec7154ba19d7d271b21ec1814ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>identity_hash&lt; int &gt;</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a3480349a09ece4c34fe47942953ba7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; transition &gt;</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae921607b9ce091194eb3462e0f378190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_number</name>
      <anchorfile>classspot_1_1state__explicit__number.html</anchorfile>
      <anchor>a6f9a89ee9d90061c8c2f4c7e7ce0c48e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_number</name>
      <anchorfile>classspot_1_1state__explicit__number.html</anchorfile>
      <anchor>a6c7a2d0c3c2c34edd8d4d3278a57972f</anchor>
      <arglist>(int label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>acfaec036581d609b822c3098641b2340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>label</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a4a6670c0f43b3fee76fab3e606b2b13b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a91c744e7fa06aa4884facbda0d642d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a1fc57e536139259c0cb12a2ec360c6a4</anchor>
      <arglist>(const state *other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a011b10e996795c993c02666803ab2a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_explicit&lt; int, identity_hash&lt; int &gt; &gt; *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>afecf9b6317b0729e40c7d4a03437bafe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>transitions_t</type>
      <name>successors</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae8dcd02475b401e6fb2295f6f817b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>default_val</name>
      <anchorfile>classspot_1_1state__explicit__number.html</anchorfile>
      <anchor>a9b73c61724dd9413c80439ada58dc670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>label_</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a19bf982134fa41608942599ac2999e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_explicit_string</name>
    <filename>classspot_1_1state__explicit__string.html</filename>
    <base>state_explicit&lt; std::string, string_hash &gt;</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ab2a44ec7154ba19d7d271b21ec1814ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>string_hash</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a3480349a09ece4c34fe47942953ba7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; transition &gt;</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae921607b9ce091194eb3462e0f378190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_string</name>
      <anchorfile>classspot_1_1state__explicit__string.html</anchorfile>
      <anchor>a908bcf3678a1d397956d30c85982d600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_string</name>
      <anchorfile>classspot_1_1state__explicit__string.html</anchorfile>
      <anchor>a870f8586a52edb095305cd03271f2bfe</anchor>
      <arglist>(const std::string &amp;label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>acfaec036581d609b822c3098641b2340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>label</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a4a6670c0f43b3fee76fab3e606b2b13b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a91c744e7fa06aa4884facbda0d642d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a1fc57e536139259c0cb12a2ec360c6a4</anchor>
      <arglist>(const state *other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a011b10e996795c993c02666803ab2a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_explicit&lt; std::string, string_hash &gt; *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>afecf9b6317b0729e40c7d4a03437bafe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>transitions_t</type>
      <name>successors</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae8dcd02475b401e6fb2295f6f817b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>default_val</name>
      <anchorfile>classspot_1_1state__explicit__string.html</anchorfile>
      <anchor>affac3d99bd228909758d7ce9abf15a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>label_</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a19bf982134fa41608942599ac2999e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_explicit_formula</name>
    <filename>classspot_1_1state__explicit__formula.html</filename>
    <base>state_explicit&lt; const ltl::formula *, ltl::formula_ptr_hash &gt;</base>
    <member kind="typedef">
      <type>const ltl::formula *</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ab2a44ec7154ba19d7d271b21ec1814ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ltl::formula_ptr_hash</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a3480349a09ece4c34fe47942953ba7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; transition &gt;</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae921607b9ce091194eb3462e0f378190</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_formula</name>
      <anchorfile>classspot_1_1state__explicit__formula.html</anchorfile>
      <anchor>a1fcebd6b54d301dfb2280ea07cabe8ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_explicit_formula</name>
      <anchorfile>classspot_1_1state__explicit__formula.html</anchorfile>
      <anchor>a74f66dc804b3725ed456e2ebf43816e5</anchor>
      <arglist>(const ltl::formula *label)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>acfaec036581d609b822c3098641b2340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const const ltl::formula *&amp;</type>
      <name>label</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a4a6670c0f43b3fee76fab3e606b2b13b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a91c744e7fa06aa4884facbda0d642d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a1fc57e536139259c0cb12a2ec360c6a4</anchor>
      <arglist>(const state *other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a011b10e996795c993c02666803ab2a06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_explicit&lt; const ltl::formula *, ltl::formula_ptr_hash &gt; *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>afecf9b6317b0729e40c7d4a03437bafe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>transitions_t</type>
      <name>successors</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>ae8dcd02475b401e6fb2295f6f817b570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ltl::formula *</type>
      <name>default_val</name>
      <anchorfile>classspot_1_1state__explicit__formula.html</anchorfile>
      <anchor>a1c441990859e1583a678aff53461238a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ltl::formula *</type>
      <name>label_</name>
      <anchorfile>classspot_1_1state__explicit.html</anchorfile>
      <anchor>a19bf982134fa41608942599ac2999e67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_explicit_succ_iterator</name>
    <filename>classspot_1_1tgba__explicit__succ__iterator.html</filename>
    <templarg>State</templarg>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgba_explicit_succ_iterator</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a9394a59a2a039d159fb2e77a7ad8b9fb</anchor>
      <arglist>(const State *start, bdd all_acc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>aba7320445c30a4c73847d8ca9eecf86b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a3fde92223e7fed5149ca9369acd4765b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a9154acf28bc1fdbfa703ad640276d1ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a5aecac9f99eb3c8c485100f9c30e22b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a690faff50371bd40a9f34c40ea14f5c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a65f16bf982246123ea7c51e2ec914cd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State::transitions_t::const_iterator</type>
      <name>get_iterator</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a516050bf2c75b3a8b1a6aaac45c1ae90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const State *</type>
      <name>start_</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>a916ed5a9dab58bca32c5f8da7ba742b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State::transitions_t::const_iterator</type>
      <name>it_</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>afbc96f44e44c9dd78b132df2ac7e174b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__explicit__succ__iterator.html</anchorfile>
      <anchor>af5b916737f43c347c0fa144986fe4978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_graph</name>
    <filename>classspot_1_1explicit__graph.html</filename>
    <templarg>State</templarg>
    <templarg>Type</templarg>
    <member kind="typedef">
      <type>State::label_t</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a82055d0bde847fb446d0995361055f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::label_hash_t</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aeb41d45e3d6526bd29c24ef0afbb1f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transitions_t</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3310003b70c5addc25e14e7b665501f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transition</type>
      <name>transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a10aa18e86b2fd579a0ad94564406b6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State</type>
      <name>state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a7824da278a84378d0a73b74cf098e512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string(*</type>
      <name>to_string_func_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aab2aac6966e1c1d082d469bbfccdda15</anchor>
      <arglist>)(const label_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>explicit_graph</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a7f62ad689ddf0d5661ad17e623eb1530</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_default_init</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af25ac9d1bd568c1444b3e812d6a8765f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_states</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a72f71b982083de4f574d595307ef2e14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab0f8fadb16a3eeeafc90a76c6b18b036</anchor>
      <arglist>(State *source, const State *dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a218056dbb70a6ad74c4ae8cd2aa73965</anchor>
      <arglist>(const label_t &amp;source, const label_t &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>get_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a25aef88706de06fa239c362cf550afd5</anchor>
      <arglist>(const tgba_explicit_succ_iterator&lt; State &gt; *si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a03bc3ff272a27d629976a99d6e5ff925</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>abc0817f65d9694dea39dde4f87a05808</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad008dd540c46610a706e4d69fbe72ba1</anchor>
      <arglist>(const ltl::formula *f) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab228cec27f8b9d7c92c4d44c8197d276</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>afd076915c543fe1cc74e2a006c434baf</anchor>
      <arglist>(const State *s) const </arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af7e3341ee712419c1e0b682050eacefe</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement_all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a226a9d362398e3151bdb7eebec5def36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_transitions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a36cea71a6c3bf8a09e9d0fc9f3c6bdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a812a6dca9bde6bd5283dfe0ac05386f2</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac56864316ef788936c69dd6a80a84efb</anchor>
      <arglist>(const label_t &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~explicit_graph</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a686bf7e2dc9bcbedc143df5ba2968140</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2f6e3d2b079c8474a5b983daaecae4e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_explicit_succ_iterator&lt; State &gt; *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a88af0576b9f76d446859457ef208fbf0</anchor>
      <arglist>(const spot::state *state, const spot::state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6cb8a2ffc1cc249b477d649da899a6f3</anchor>
      <arglist>(to_string_func_t f)</arglist>
    </member>
    <member kind="function">
      <type>to_string_func_t</type>
      <name>get_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a58bf304f4ed1aefd29501849134f3762</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4ef7a93b669854ae730276d17975ec83</anchor>
      <arglist>(const spot::state *state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_state_alias</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a56b9a9e1c99b3ddf0117c1092a5d8641</anchor>
      <arglist>(const label_t &amp;alias, const label_t &amp;real)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_acceptance_conditions_of</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6ed023d767a97f41836787123cd82dce</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8237bac44dabf3ced482b99a65f72530</anchor>
      <arglist>(bdd acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3d209f19895e2a899ce4b4644b49e4eb</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad36ec6dd37dbbb1b1f64ad6b9d22e35f</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a08df7e758b2f74a3327b2fa580522938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac0704a347572e4ff4c7e74f6111c906b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>acbe4b7b24f685b178b61dff17bf72173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a0de8362b0ac23b5989550b2ea16ce43e</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>get_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aecfd009b99ef9476ae1632383bc85e91</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State, label_hash_t &gt;</type>
      <name>ls_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ae386b47f81352e444d7af6f5f0c5636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State *, label_hash_t &gt;</type>
      <name>alias_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a184f3daed85e3c1fddfc31fe324414bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const State *, label_t, ptr_hash&lt; State &gt; &gt;</type>
      <name>sl_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3b6fd5d3df506354ce18b822620aa179</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4647afa3d767bb859f4066fedec52ef9</anchor>
      <arglist>(const spot::state *in) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2131373431dd5f4792cecd18b7249a9f</anchor>
      <arglist>(const spot::state *in) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ls_map</type>
      <name>ls_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a38468f4a7d5f241e12f46dd3627556e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alias_map</type>
      <name>alias_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad6c14ed500dc8e12c2345bf6ea6a7a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sl_map</type>
      <name>sl_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a608aa3da757a0669cf7338f7ac71536a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af4c06aefa450cb98ea67973631c32738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3ced372d2f66fd5451022fcaa8a2ad5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8aecd66e102fb3e891591c57d357b0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aa6ee18a868766793cee1254aef3a0ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab20125f73251264e226274140489bc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>to_string_func_t</type>
      <name>to_string_func_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab587196936e7a0f56f56e781297f962f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_explicit</name>
    <filename>classspot_1_1tgba__explicit.html</filename>
    <templarg>State</templarg>
    <base>explicit_graph&lt; State, tgba &gt;</base>
    <member kind="typedef">
      <type>State::label_t</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a82055d0bde847fb446d0995361055f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::label_hash_t</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aeb41d45e3d6526bd29c24ef0afbb1f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transitions_t</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3310003b70c5addc25e14e7b665501f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transition</type>
      <name>transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a10aa18e86b2fd579a0ad94564406b6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State</type>
      <name>state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a7824da278a84378d0a73b74cf098e512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string(*</type>
      <name>to_string_func_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aab2aac6966e1c1d082d469bbfccdda15</anchor>
      <arglist>)(const label_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_explicit</name>
      <anchorfile>classspot_1_1tgba__explicit.html</anchorfile>
      <anchor>ae8565c485487ab9c0a2ddb2653602fad</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_explicit</name>
      <anchorfile>classspot_1_1tgba__explicit.html</anchorfile>
      <anchor>aadf69b5aa98ea9d59a0956bc5fc17bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_default_init</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af25ac9d1bd568c1444b3e812d6a8765f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_states</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a72f71b982083de4f574d595307ef2e14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab0f8fadb16a3eeeafc90a76c6b18b036</anchor>
      <arglist>(State *source, const State *dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a218056dbb70a6ad74c4ae8cd2aa73965</anchor>
      <arglist>(const label_t &amp;source, const label_t &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>get_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a25aef88706de06fa239c362cf550afd5</anchor>
      <arglist>(const tgba_explicit_succ_iterator&lt; State &gt; *si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a03bc3ff272a27d629976a99d6e5ff925</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>abc0817f65d9694dea39dde4f87a05808</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad008dd540c46610a706e4d69fbe72ba1</anchor>
      <arglist>(const ltl::formula *f) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab228cec27f8b9d7c92c4d44c8197d276</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>afd076915c543fe1cc74e2a006c434baf</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af7e3341ee712419c1e0b682050eacefe</anchor>
      <arglist>(const spot::state *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement_all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a226a9d362398e3151bdb7eebec5def36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_transitions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a36cea71a6c3bf8a09e9d0fc9f3c6bdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a812a6dca9bde6bd5283dfe0ac05386f2</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac56864316ef788936c69dd6a80a84efb</anchor>
      <arglist>(const label_t &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2f6e3d2b079c8474a5b983daaecae4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_explicit_succ_iterator&lt; State &gt; *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a88af0576b9f76d446859457ef208fbf0</anchor>
      <arglist>(const spot::state *state, const spot::state *global_state=0, const tgba *global_automaton=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6cb8a2ffc1cc249b477d649da899a6f3</anchor>
      <arglist>(to_string_func_t f)</arglist>
    </member>
    <member kind="function">
      <type>to_string_func_t</type>
      <name>get_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a58bf304f4ed1aefd29501849134f3762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4ef7a93b669854ae730276d17975ec83</anchor>
      <arglist>(const spot::state *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_state_alias</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a56b9a9e1c99b3ddf0117c1092a5d8641</anchor>
      <arglist>(const label_t &amp;alias, const label_t &amp;real)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_acceptance_conditions_of</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6ed023d767a97f41836787123cd82dce</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8237bac44dabf3ced482b99a65f72530</anchor>
      <arglist>(bdd acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3d209f19895e2a899ce4b4644b49e4eb</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad36ec6dd37dbbb1b1f64ad6b9d22e35f</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a08df7e758b2f74a3327b2fa580522938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac0704a347572e4ff4c7e74f6111c906b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>acbe4b7b24f685b178b61dff17bf72173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a0de8362b0ac23b5989550b2ea16ce43e</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>get_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aecfd009b99ef9476ae1632383bc85e91</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State, label_hash_t &gt;</type>
      <name>ls_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ae386b47f81352e444d7af6f5f0c5636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State *, label_hash_t &gt;</type>
      <name>alias_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a184f3daed85e3c1fddfc31fe324414bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const State *, label_t, ptr_hash&lt; State &gt; &gt;</type>
      <name>sl_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3b6fd5d3df506354ce18b822620aa179</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4647afa3d767bb859f4066fedec52ef9</anchor>
      <arglist>(const spot::state *in) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2131373431dd5f4792cecd18b7249a9f</anchor>
      <arglist>(const spot::state *in) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ls_map</type>
      <name>ls_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a38468f4a7d5f241e12f46dd3627556e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alias_map</type>
      <name>alias_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad6c14ed500dc8e12c2345bf6ea6a7a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sl_map</type>
      <name>sl_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a608aa3da757a0669cf7338f7ac71536a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af4c06aefa450cb98ea67973631c32738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3ced372d2f66fd5451022fcaa8a2ad5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8aecd66e102fb3e891591c57d357b0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aa6ee18a868766793cee1254aef3a0ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab20125f73251264e226274140489bc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>to_string_func_t</type>
      <name>to_string_func_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab587196936e7a0f56f56e781297f962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_explicit</name>
      <anchorfile>classspot_1_1tgba__explicit.html</anchorfile>
      <anchor>a5b71f27b0fdc96418945898d86059efc</anchor>
      <arglist>(const tgba_explicit&lt; State &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_explicit &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__explicit.html</anchorfile>
      <anchor>a8c8df3fbca1253ad84395b35e2857f5c</anchor>
      <arglist>(const tgba_explicit &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::sba_explicit</name>
    <filename>classspot_1_1sba__explicit.html</filename>
    <templarg>State</templarg>
    <base>explicit_graph&lt; State, sba &gt;</base>
    <member kind="typedef">
      <type>State::label_t</type>
      <name>label_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a82055d0bde847fb446d0995361055f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::label_hash_t</type>
      <name>label_hash_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aeb41d45e3d6526bd29c24ef0afbb1f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transitions_t</type>
      <name>transitions_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3310003b70c5addc25e14e7b665501f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State::transition</type>
      <name>transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a10aa18e86b2fd579a0ad94564406b6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>State</type>
      <name>state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a7824da278a84378d0a73b74cf098e512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string(*</type>
      <name>to_string_func_t</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aab2aac6966e1c1d082d469bbfccdda15</anchor>
      <arglist>)(const label_t &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sba_explicit</name>
      <anchorfile>classspot_1_1sba__explicit.html</anchorfile>
      <anchor>a2d8ca777a0ebf3c55ee9869f65096e2c</anchor>
      <arglist>(bdd_dict *dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sba_explicit</name>
      <anchorfile>classspot_1_1sba__explicit.html</anchorfile>
      <anchor>a70d8329c40c92bc7c8f97f7d60c1753e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>state_is_accepting</name>
      <anchorfile>classspot_1_1sba__explicit.html</anchorfile>
      <anchor>a7e36b17d6cfb4925b834e5aa25303be0</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_default_init</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af25ac9d1bd568c1444b3e812d6a8765f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>num_states</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a72f71b982083de4f574d595307ef2e14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab0f8fadb16a3eeeafc90a76c6b18b036</anchor>
      <arglist>(State *source, const State *dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>create_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a218056dbb70a6ad74c4ae8cd2aa73965</anchor>
      <arglist>(const label_t &amp;source, const label_t &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>transition *</type>
      <name>get_transition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a25aef88706de06fa239c362cf550afd5</anchor>
      <arglist>(const tgba_explicit_succ_iterator&lt; State &gt; *si)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a03bc3ff272a27d629976a99d6e5ff925</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>abc0817f65d9694dea39dde4f87a05808</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad008dd540c46610a706e4d69fbe72ba1</anchor>
      <arglist>(const ltl::formula *f) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab228cec27f8b9d7c92c4d44c8197d276</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>afd076915c543fe1cc74e2a006c434baf</anchor>
      <arglist>(const State *s) const</arglist>
    </member>
    <member kind="function">
      <type>const label_t &amp;</type>
      <name>get_label</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af7e3341ee712419c1e0b682050eacefe</anchor>
      <arglist>(const spot::state *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complement_all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a226a9d362398e3151bdb7eebec5def36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge_transitions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a36cea71a6c3bf8a09e9d0fc9f3c6bdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a812a6dca9bde6bd5283dfe0ac05386f2</anchor>
      <arglist>(const label_t &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>State *</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac56864316ef788936c69dd6a80a84efb</anchor>
      <arglist>(const label_t &amp;state)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual State *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2f6e3d2b079c8474a5b983daaecae4e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_explicit_succ_iterator&lt; State &gt; *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a88af0576b9f76d446859457ef208fbf0</anchor>
      <arglist>(const spot::state *state, const spot::state *global_state=0, const tgba *global_automaton=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6cb8a2ffc1cc249b477d649da899a6f3</anchor>
      <arglist>(to_string_func_t f)</arglist>
    </member>
    <member kind="function">
      <type>to_string_func_t</type>
      <name>get_to_string_func</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a58bf304f4ed1aefd29501849134f3762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4ef7a93b669854ae730276d17975ec83</anchor>
      <arglist>(const spot::state *state) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_state_alias</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a56b9a9e1c99b3ddf0117c1092a5d8641</anchor>
      <arglist>(const label_t &amp;alias, const label_t &amp;real)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_acceptance_conditions_of</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a6ed023d767a97f41836787123cd82dce</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8237bac44dabf3ced482b99a65f72530</anchor>
      <arglist>(bdd acc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3d209f19895e2a899ce4b4644b49e4eb</anchor>
      <arglist>(transition *t, const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad36ec6dd37dbbb1b1f64ad6b9d22e35f</anchor>
      <arglist>(transition *t, bdd f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a08df7e758b2f74a3327b2fa580522938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ac0704a347572e4ff4c7e74f6111c906b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>acbe4b7b24f685b178b61dff17bf72173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a0de8362b0ac23b5989550b2ea16ce43e</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>get_acceptance_condition</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aecfd009b99ef9476ae1632383bc85e91</anchor>
      <arglist>(const ltl::formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State, label_hash_t &gt;</type>
      <name>ls_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ae386b47f81352e444d7af6f5f0c5636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; label_t, State *, label_hash_t &gt;</type>
      <name>alias_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a184f3daed85e3c1fddfc31fe324414bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const State *, label_t, ptr_hash&lt; State &gt; &gt;</type>
      <name>sl_map</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3b6fd5d3df506354ce18b822620aa179</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a4647afa3d767bb859f4066fedec52ef9</anchor>
      <arglist>(const spot::state *in) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a2131373431dd5f4792cecd18b7249a9f</anchor>
      <arglist>(const spot::state *in) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ls_map</type>
      <name>ls_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a38468f4a7d5f241e12f46dd3627556e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alias_map</type>
      <name>alias_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ad6c14ed500dc8e12c2345bf6ea6a7a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sl_map</type>
      <name>sl_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a608aa3da757a0669cf7338f7ac71536a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>State *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>af4c06aefa450cb98ea67973631c32738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a3ced372d2f66fd5451022fcaa8a2ad5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>a8aecd66e102fb3e891591c57d357b0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>all_acceptance_conditions_computed_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>aa6ee18a868766793cee1254aef3a0ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab20125f73251264e226274140489bc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>to_string_func_t</type>
      <name>to_string_func_</name>
      <anchorfile>classspot_1_1explicit__graph.html</anchorfile>
      <anchor>ab587196936e7a0f56f56e781297f962f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>sba_explicit</name>
      <anchorfile>classspot_1_1sba__explicit.html</anchorfile>
      <anchor>ac67cc7815857573a1f9075af1c040efa</anchor>
      <arglist>(const sba_explicit&lt; State &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>sba_explicit &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1sba__explicit.html</anchorfile>
      <anchor>a42987ece94c2cc894c902d8ca4b0dbda</anchor>
      <arglist>(const sba_explicit &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_conf</name>
    <filename>classspot_1_1explicit__conf.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>explicit_conf</name>
      <anchorfile>classspot_1_1explicit__conf.html</anchorfile>
      <anchor>a7d6a2245b96f71f35ad87988d4a027c0</anchor>
      <arglist>(bdd_dict *d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>to_string</name>
      <anchorfile>classspot_1_1explicit__conf.html</anchorfile>
      <anchor>a91532f443bd8bba6a713ee5df48d9df5</anchor>
      <arglist>(const typename Type::label_t &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_conf&lt; graph, state_explicit_string &gt;</name>
    <filename>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__string_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>explicit_conf</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__string_01_4.html</anchorfile>
      <anchor>a1db3b2883b22e80403e81efa64e19efe</anchor>
      <arglist>(bdd_dict *d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>to_string</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__string_01_4.html</anchorfile>
      <anchor>adf5ffa634cdf03f3305f39b18294f711</anchor>
      <arglist>(const std::string &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_conf&lt; graph, state_explicit_formula &gt;</name>
    <filename>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__formula_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>explicit_conf</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__formula_01_4.html</anchorfile>
      <anchor>a995c9038b5090220bf6887256bf54d3a</anchor>
      <arglist>(bdd_dict *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_utf8</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__formula_01_4.html</anchorfile>
      <anchor>ad54c02290b86799682eb2a92ab47d98f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>to_string</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__formula_01_4.html</anchorfile>
      <anchor>a3d64593e211788d1747e2cab71e4213e</anchor>
      <arglist>(const ltl::formula *const &amp;l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>to_utf8_string</name>
      <anchorfile>classspot_1_1explicit__conf_3_01graph_00_01state__explicit__formula_01_4.html</anchorfile>
      <anchor>ad7b05501a9eb3b5ed6ab7fad73d32b7f</anchor>
      <arglist>(const ltl::formula *const &amp;l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::bdd_ordered</name>
    <filename>classspot_1_1bdd__ordered.html</filename>
    <member kind="function">
      <type></type>
      <name>bdd_ordered</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>ad5310a44d0bf67235f3bad4ef708a438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bdd_ordered</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>ab7a9a5033f9f14fdf01deb05a75e6e18</anchor>
      <arglist>(int bdd_, unsigned order_)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>order</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>a593862519e0c82f326862c44252d5e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned &amp;</type>
      <name>order</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>ab907609aaf211fcb585c13bc34fd2895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>get_bdd</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>adc65c93dea1b8cd9f9c93a1d3725ce55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>bdd_</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>a536fe11f016bad179ef2620ed90b834c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>order_</name>
      <anchorfile>classspot_1_1bdd__ordered.html</anchorfile>
      <anchor>aaee0b71376e630b3a2f3cdd42d95ba1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_kv_complement</name>
    <filename>classspot_1_1tgba__kv__complement.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_kv_complement</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a09240c570c832e915b73c853be3e3012</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_kv_complement</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a9c7bea5d928c9847fe1bbc5ee1db801b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a1cfed0a3f4f91aa9d2bc1303f3518658</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a972b4c688c8546ff84aefdbe9fdfadb6</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a37d82b9f490cbca4c97e9d15dc84ead9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a60fc666c9815caac2baf6d694007dc9d</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a788bd1b846a0ade82a804e32da243670</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>af56a4f915209d8d2c7e55da9645cb9df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a4914a7a0bf431001a095eaf53390a0da</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a2cfbecf00af6c5b698d0f140c6b248d1</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>get_acc_list</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a19e6cbf066df6fdf5a8cd3abe5d2f904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba_sgba_proxy *</type>
      <name>automaton_</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>adff0f7f2bdc16027058a8fed0fc36176</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>the_acceptance_cond_</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a81da228d387d918ba6cfd8c6e8ea3a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>nb_states_</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>a3e9bcb6d097fcb3963dea92d47485c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>acc_list_t</type>
      <name>acc_list_</name>
      <anchorfile>classspot_1_1tgba__kv__complement.html</anchorfile>
      <anchor>aaf1b873f4b8d22c44e10e4a8540c3db4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_product</name>
    <filename>classspot_1_1state__product.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_product</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>ae87b3a01f724267993ab53d9a3c11907</anchor>
      <arglist>(state *left, state *right, fixed_size_pool *pool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a15b1df31022f8ac8a14f8db13c8fb0bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>left</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>afdd6062cfccb909b0a1e730faa9fe995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>right</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a93351a53ededa94f9d8ee3d750622219</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a1ff87a76c6f956b027f6191cac8c462e</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a4a3ad4053c86d85c02faad1f3ee229eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_product *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>aa42c2234459b1b60b14782b1a209f9b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~state_product</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a6a3821df5f1ff42234d3d31f394f36a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>state_product</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a482aa4b3471b307c1bafa016d313249a</anchor>
      <arglist>(const state_product &amp;o)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>accfa4c6250d58869f7b41a88182ac112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a1a73a9b421d4cccf7d9429e435b6b298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>count_</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a1c41996f3b63f1c3a90cafd8b497bb4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>fixed_size_pool *</type>
      <name>pool_</name>
      <anchorfile>classspot_1_1state__product.html</anchorfile>
      <anchor>a871008ed7f75dc9bc3bef2396bd5d201</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_product</name>
    <filename>classspot_1_1tgba__product.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_product</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ac87cc8973de290dfb03e4af05b6f18aa</anchor>
      <arglist>(const tgba *left, const tgba *right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_product</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8de0dee13a1255a76c1900a40c0a0f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a7c82db48b43c65e11637cc4e7608298b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a3619b6770ca99f736db1d22e424f93e4</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a98be76c9a1c99c98d3d98b922e6754c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a253991f4680be4b9b6cc4ea2b58f0f1e</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a5bd9816b75446546f7ab22f1f08a4b7f</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a63415db59de0198957b8db61e68b2d25</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a588b3078a18b0d9073c1d06a8ec5429c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>acc05aeb22baf7ca5a3c0ca415767bafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4a46399685445cc7b0ce81e507f1d14c</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a900940457e4d9ecfa27cbac423730471</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8048054ed2d511fb8d42634b5695979e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>aed415f850f93de54fbd9b4d03a5b3ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8e5c0b58b51f8dce0c89678e8f08be60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>left_kripke_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ab42b53208c598c0e20d0b35a4ca822e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>left_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0606c9cb0323788eb93a06feff3b5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>right_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4f7ea0afd907310b04127e2ad424c66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ad203a496c27b0ef4ab8d553987768be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ac50b0170453065edc2e8986062180f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bddPair *</type>
      <name>right_common_acc_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0a0e9c103aa6b363b200bed070787000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fixed_size_pool</type>
      <name>pool_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>af52b0f4f788177a18cc1c89db7ff3b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_product</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>af311dd3e7e44c3af92bb5f7fe4047f71</anchor>
      <arglist>(const tgba_product &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_product &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>aee07ebfc8aef8111c3923dd72f0ed80f</anchor>
      <arglist>(const tgba_product &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_product_init</name>
    <filename>classspot_1_1tgba__product__init.html</filename>
    <base>spot::tgba_product</base>
    <member kind="function">
      <type></type>
      <name>tgba_product_init</name>
      <anchorfile>classspot_1_1tgba__product__init.html</anchorfile>
      <anchor>a66f122194c13c62e7d717708f2687b3a</anchor>
      <arglist>(const tgba *left, const tgba *right, const state *left_init, const state *right_init)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__product__init.html</anchorfile>
      <anchor>a2ff20add5355ec8b4334236652c22d2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a3619b6770ca99f736db1d22e424f93e4</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a98be76c9a1c99c98d3d98b922e6754c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a253991f4680be4b9b6cc4ea2b58f0f1e</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a5bd9816b75446546f7ab22f1f08a4b7f</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a63415db59de0198957b8db61e68b2d25</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a588b3078a18b0d9073c1d06a8ec5429c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>acc05aeb22baf7ca5a3c0ca415767bafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4a46399685445cc7b0ce81e507f1d14c</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a900940457e4d9ecfa27cbac423730471</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>left_init_</name>
      <anchorfile>classspot_1_1tgba__product__init.html</anchorfile>
      <anchor>a300c37adc00b87ed47750c3695752308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>right_init_</name>
      <anchorfile>classspot_1_1tgba__product__init.html</anchorfile>
      <anchor>a5a782bcb44d02e9b7fec6c520572f085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8048054ed2d511fb8d42634b5695979e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>aed415f850f93de54fbd9b4d03a5b3ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a8e5c0b58b51f8dce0c89678e8f08be60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>left_kripke_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ab42b53208c598c0e20d0b35a4ca822e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>left_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0606c9cb0323788eb93a06feff3b5591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>right_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a4f7ea0afd907310b04127e2ad424c66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ad203a496c27b0ef4ab8d553987768be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>ac50b0170453065edc2e8986062180f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bddPair *</type>
      <name>right_common_acc_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>a0a0e9c103aa6b363b200bed070787000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fixed_size_pool</type>
      <name>pool_</name>
      <anchorfile>classspot_1_1tgba__product.html</anchorfile>
      <anchor>af52b0f4f788177a18cc1c89db7ff3b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_safra_complement</name>
    <filename>classspot_1_1tgba__safra__complement.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_safra_complement</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>afcbfcdba74ccc395295969c636110121</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_safra_complement</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a650d0d8c35ae228d5a27473e6e8b2958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a4416dc1a96843c9748f40c8f4e740e6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>ab7d78122fa470aeef3f84e98f0598429</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a1806070d03e6ffd340f3015ba5843ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a59271880c56bcd5b8b9eedb78687f4d0</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a77029bbc877ac88dbbee8876f986a914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a0e217a50bab2a0f988ec88ce774637f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_safra</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a266323fef1b5e7459375e6a449cd8dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>ab31d07db53c668fda1f62033046eadaf</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>abdc51afd4833e415ade77e38e95a5bd3</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba *</type>
      <name>automaton_</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a98b19e96156c6bd8868ed9919398bb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>safra_</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a70bcee13cf59e109d44d95da7afc6c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>all_acceptance_cond_</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a05ab23c97857d0a7e7acccfcbb6fcc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>neg_acceptance_cond_</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>a571bbd1c0aee1ae9e78c3f1c68a22b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; bdd &gt;</type>
      <name>acceptance_cond_vec_</name>
      <anchorfile>classspot_1_1tgba__safra__complement.html</anchorfile>
      <anchor>aa423deb85ff47928a121098ae3112c81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_scc</name>
    <filename>classspot_1_1tgba__scc.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_scc</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a86791ac78a572450d0715536f3cb2d2b</anchor>
      <arglist>(const tgba *aut, bool show=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_scc</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a88cbfd1d7996e5b878d733031b58ea5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>scc_of_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a0710f2fdfd1d418eef39b96f03b21d68</anchor>
      <arglist>(const spot::state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a9f3d7b929852fc1aec87e37d728b8ac1</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a6600532f73f9304621e549c376f37df4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>aeaf6d30f608df4268ea24c53b90c3bc8</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a869636920f00191acf639fe8915f29dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>af7c36cfb1aae3bfc5b8d8aa19ab406b6</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a8ba8488fdfb38d40e195ff5d401efbf0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>ae498ad52cc2dfca08b9ecc71093be05e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a3556e6082858d044414259716d91d494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a2ce1ad3317b1e2bb28e62eef910956f2</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a4300be39b5499a988e993ed07024ff86</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a4ad09f78f47f597ab2a990629c82d0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scc_map</type>
      <name>scc_map_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>a61bfc7853d41442acd8bce8f157b2f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>show_</name>
      <anchorfile>classspot_1_1tgba__scc.html</anchorfile>
      <anchor>ae7417c0aa6f8ae27a7b20fbb2b7f12e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_sgba_proxy</name>
    <filename>classspot_1_1tgba__sgba__proxy.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_sgba_proxy</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a3e7448c3a066c74573a1be6a83564773</anchor>
      <arglist>(const tgba *a, bool no_zero_acc=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_sgba_proxy</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a96c5d361ef4185d92dfa055e5edd7a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a18bc8545601817b1fdf071f8748972f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a285e748dd6b46066b18529cb244e2167</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>aa4813fb6f7f34a829c6a53d11c01557e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>ab429ebb43292fdb39f624ca63bc2e357</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a56288756cbbf248be79c18a0b0d9c78a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>ac5fa8b86dbf32d2d63949c40a749b608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>state_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a3b140a4fa421103c915f4f23ca7d7e6e</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>ab411601915aacf07dd0a9035fd5eebe0</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a96254fd6f5a1265b4af49d6e907a1025</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a43ba1721edcd8d1082b6a3b4d0aaedf4</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_sgba_proxy</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>afe272854db3f38589c48d78d58031359</anchor>
      <arglist>(const tgba_sgba_proxy &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_sgba_proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a62b4051809da358f18eef70921b8282a</anchor>
      <arglist>(const tgba_sgba_proxy &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>a5e8214a97070694b749a888f7b4a830c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>emulate_acc_cond_</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>aa6bac8478e37ee86e3b715a0e3c43703</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>acceptance_condition_</name>
      <anchorfile>classspot_1_1tgba__sgba__proxy.html</anchorfile>
      <anchor>aadc0b03d85e8bc869b82d61e22d114ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_tba_proxy</name>
    <filename>classspot_1_1tgba__tba__proxy.html</filename>
    <base>spot::tgba</base>
    <member kind="typedef">
      <type>std::list&lt; bdd &gt;</type>
      <name>cycle_list</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>af96a338414230a500e1552de4e163090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_tba_proxy</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a46c5d3860618e80fd220e2b1989f08b6</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_tba_proxy</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>af350cdd1c403cddb11470b2bbaeeec77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a68713d24694ec70ed477dc145a550e78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad2a2082d9686c77b5aae8b236a6d8479</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a2582a3298c12e384640bed93a7dd90ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a61d88f823e3d1eabd35f45ae57975d1c</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad4bba2f97a28446d59e83a37ddfde1be</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a21a2975a60ede4b62748e685dcc8d1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad3275433431b1995354a801d2a66feac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>common_acceptance_conditions_of_original_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a89b554fc92de63ac6dd93af84e38e06d</anchor>
      <arglist>(const state *ostate) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>union_acceptance_conditions_of_original_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a5ebc7c65d11e01d0c951f3fef70a9c1b</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>create_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a8734bd9164142721c8eb5fd9037d4dc8</anchor>
      <arglist>(state *s, cycle_list::const_iterator acc) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a273341ec958163d8548709673ebe6077</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a52e9928cbc1230d566abfc55c1eb7619</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cycle_list</type>
      <name>acc_cycle_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a29df378cea35f367a95d2343e3bc8416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>adb2b18182613b1df0be98af1119d10b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const state *, bdd, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>accmap_t</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a80b97655cb18530d2706e16acec9b475</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_tba_proxy</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a44590e974cf794ca89349f154ca9950a</anchor>
      <arglist>(const tgba_tba_proxy &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_tba_proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a97aaa47e4f112fa6269704953e08cc13</anchor>
      <arglist>(const tgba_tba_proxy &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>the_acceptance_cond_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a1623fc95cc5b30af9ef4baec68555e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>accmap_t</type>
      <name>accmap_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a689a84e8c65e67b1cc41fbbf71e13807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>accmap_t</type>
      <name>accmapu_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a9bf6a6e2cf38216ec1f931c0143ae5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>uniq_map_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a4b2ad9e2dae5cdb03ebdaf46b979555b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_sba_proxy</name>
    <filename>classspot_1_1tgba__sba__proxy.html</filename>
    <base>spot::tgba_tba_proxy</base>
    <member kind="typedef">
      <type>std::list&lt; bdd &gt;</type>
      <name>cycle_list</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>af96a338414230a500e1552de4e163090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_sba_proxy</name>
      <anchorfile>classspot_1_1tgba__sba__proxy.html</anchorfile>
      <anchor>a7711ebb0fc29220e2473db20148d32ba</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>state_is_accepting</name>
      <anchorfile>classspot_1_1tgba__sba__proxy.html</anchorfile>
      <anchor>a722f8b8480c44ede6318ccb8642c75df</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__sba__proxy.html</anchorfile>
      <anchor>a9c3b5e8f7b60839c13e7698b19759c94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad2a2082d9686c77b5aae8b236a6d8479</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a2582a3298c12e384640bed93a7dd90ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a61d88f823e3d1eabd35f45ae57975d1c</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad4bba2f97a28446d59e83a37ddfde1be</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a21a2975a60ede4b62748e685dcc8d1af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>ad3275433431b1995354a801d2a66feac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>common_acceptance_conditions_of_original_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a89b554fc92de63ac6dd93af84e38e06d</anchor>
      <arglist>(const state *ostate) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>union_acceptance_conditions_of_original_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a5ebc7c65d11e01d0c951f3fef70a9c1b</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>create_state</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a8734bd9164142721c8eb5fd9037d4dc8</anchor>
      <arglist>(state *s, cycle_list::const_iterator acc) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a273341ec958163d8548709673ebe6077</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a52e9928cbc1230d566abfc55c1eb7619</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cycle_list::iterator</type>
      <name>cycle_start_</name>
      <anchorfile>classspot_1_1tgba__sba__proxy.html</anchorfile>
      <anchor>a1cfc31a1f7da0de7e923e28ca30512ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cycle_list</type>
      <name>acc_cycle_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>a29df378cea35f367a95d2343e3bc8416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1tgba__tba__proxy.html</anchorfile>
      <anchor>adb2b18182613b1df0be98af1119d10b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::state_union</name>
    <filename>classspot_1_1state__union.html</filename>
    <base>spot::state</base>
    <member kind="function">
      <type></type>
      <name>state_union</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a78c94aaadc1e1b18f3e91ae8eb8ef2c4</anchor>
      <arglist>(state *left, state *right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>state_union</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a897ecfa75be60bea2c05ea3cdc70cb03</anchor>
      <arglist>(const state_union &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~state_union</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a9c7ec7af29bdf918db3f58fa535c05db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>left</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a571c0397afa3d5b4cf5eecd13714a77e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state *</type>
      <name>right</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>ad494858dee5bb27a438f742eccc4182b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a5d0e3a98f2d32cfce0c42c666cb941f3</anchor>
      <arglist>(const state *other) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>ae0daf8ce6d65d4df80f47587fee73739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_union *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>aaaba05ebd3c387a259e0c448e61e53d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1state.html</anchorfile>
      <anchor>afa00fb3e8019389e2b6fbec0b5e40ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>ae6821ef1135a9a3474e2e527bad5e640</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1state__union.html</anchorfile>
      <anchor>a463ecdc366dd5445e7a53b0f57e9ae95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_succ_iterator_union</name>
    <filename>classspot_1_1tgba__succ__iterator__union.html</filename>
    <base>spot::tgba_succ_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgba_succ_iterator_union</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>aef877a025f369178a7a0edc5189899a5</anchor>
      <arglist>(tgba_succ_iterator *left, tgba_succ_iterator *right, bdd left_missing, bdd right_missing, bdd left_var, bdd right_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_succ_iterator_union</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a5051642f5c31dc82f6cc37cecd5262b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>ad732eabed9ca5a8e3b12756b33284dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>aeefd5a6bec455088541bac5bcc1852f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>abd82caae4abf6d1e3b9aa72ad59e3970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>state_union *</type>
      <name>current_state</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a91f4afdb55eebfad06514098f93322f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_condition</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a9f712d0a04142c0466d30ddd42f0cca3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>current_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>abb4481a52e5384ee45956086c29703f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a20141aede4c153a532ed4a75d19d34b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tgba_succ_iterator *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>ac6f4eeb686487ea8e9bb013c598fd3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>current_cond_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>aeb8f58c54581b1c43a563ee4c5cf6ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>left_missing_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a53aca7c7615ab0d189f50d3a0a8c8e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>right_missing_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a0e100d6c7affbb762026336fc3f027a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>left_neg_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a5ac7a05086ac6025e77f4f8847071058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd</type>
      <name>right_neg_</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>a17d8e0577b1cc75c1a06a56fac289b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>tgba_union</name>
      <anchorfile>classspot_1_1tgba__succ__iterator__union.html</anchorfile>
      <anchor>abf2c18033f3cb099df2428a0a40d28b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_union</name>
    <filename>classspot_1_1tgba__union.html</filename>
    <base>spot::tgba</base>
    <member kind="function">
      <type></type>
      <name>tgba_union</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a6d45afa2fa0f93463aa7a6f0134fcd92</anchor>
      <arglist>(const tgba *left, const tgba *right)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_union</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a1e474e5297fe1ea9922c791cb42d5acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a8bfdf237574f4f35f91babef0135499d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_succ_iterator_union *</type>
      <name>succ_iter</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aab204c7193332dd43f4f193d081f127e</anchor>
      <arglist>(const state *local_state, const state *global_state=0, const tgba *global_automaton=0) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a57b3a6adfae3d13c2a86a119f13dd434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a1a3d0e84a4c7d7c60f9fd3616951551d</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state *</type>
      <name>project_state</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>ac0c4daabbb8989ff5930937b7db513fa</anchor>
      <arglist>(const state *s, const tgba *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>all_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a524a1240c56f28f6e8e660c1f412970a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bdd</type>
      <name>neg_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>ad143fa255e6913368a7f41d961d4eb0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a48c5b7c324749e8228815142b25cc201</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>support_variables</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>afff8afc89af772ae288106cda2f5d951</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>transition_annotation</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a00272efd8025be669d827658dc121c82</anchor>
      <arglist>(const tgba_succ_iterator *t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>number_of_acceptance_conditions</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a6645d4206b82ef4773781924b30dc502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_conditions</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a1763a39ed0119ecf7d6b1490eb57b257</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bdd</type>
      <name>compute_support_variables</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>af37d0c292e9c3f97ddcacdc321dd5d86</anchor>
      <arglist>(const state *state) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_conditions_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a1f02d752dfc5206c7d23352d762f8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const state *</type>
      <name>last_support_variables_input_</name>
      <anchorfile>classspot_1_1tgba.html</anchorfile>
      <anchor>a876022eeefbdf3d3558227fbb9e5f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>tgba_union</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>ad190e7554e5743a2c79a61e00c2ab8ad</anchor>
      <arglist>(const tgba_union &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>tgba_union &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a699f88b70e583d06c089bf6a20915d02</anchor>
      <arglist>(const tgba_union &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a215656e13ff550f4d6d2d9d72daa29f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba *</type>
      <name>left_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>af94e435a8e274f88dcf3af78b0936e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba *</type>
      <name>right_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a03658e12ced0a4fdfaeda12750a19ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>left_acc_missing_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aa95e3daddb5868d36e85abd2474201c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>right_acc_missing_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a1bbc1c914188d251a7db67c6fde463c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>left_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aa08c4a36944f7e26953bdf16c58da13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>right_acc_complement_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a1149f0787ce633ae5620cc22f5779128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>left_var_missing_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a13f3184e527f93a56f7d09cd320d0efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>right_var_missing_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aed67c9d760026feaa21e33b6f6f98f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>all_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>a6a8af2a795b0ff52ebbfe97ce7843a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>neg_acceptance_conditions_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aa3bdf25ea8c90d874a44410d2edd74d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bddPair *</type>
      <name>right_common_acc_</name>
      <anchorfile>classspot_1_1tgba__union.html</anchorfile>
      <anchor>aab8b6ed437a355b4306b33940cabb4c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::bfs_steps</name>
    <filename>classspot_1_1bfs__steps.html</filename>
    <member kind="function">
      <type></type>
      <name>bfs_steps</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>acf02b9b32a4061bfcd9816d69eefdc5c</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~bfs_steps</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>ad04e5b2c808b0106da37b5b75bf36937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const state *</type>
      <name>search</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>a6efc199a86fc9ad53c2220964facd53a</anchor>
      <arglist>(const state *start, tgba_run::steps &amp;l)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>filter</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>a12319da13fb0fde22376522fc416e833</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>match</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>ad94ee7be9b944e52d4def759eb559868</anchor>
      <arglist>(tgba_run::step &amp;step, const state *dest)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>aaef31a86c98ad2ead6e4cf4aac5ed8b2</anchor>
      <arglist>(const std::map&lt; const state *, tgba_run::step, state_ptr_less_than &gt; &amp;father, const tgba_run::step &amp;s, const state *start, tgba_run::steps &amp;l)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1bfs__steps.html</anchorfile>
      <anchor>a2340b458a0f9af2da0e5b74120e7f3b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::sccs_set</name>
    <filename>structspot_1_1sccs__set.html</filename>
    <member kind="variable">
      <type>std::set&lt; unsigned &gt;</type>
      <name>sccs</name>
      <anchorfile>structspot_1_1sccs__set.html</anchorfile>
      <anchor>a53c812a963586654dfc2166400ef3876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>structspot_1_1sccs__set.html</anchorfile>
      <anchor>aa3a0a8055ab55e4809d50b707136f395</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::enumerate_cycles</name>
    <filename>classspot_1_1enumerate__cycles.html</filename>
    <class kind="struct">spot::enumerate_cycles::dfs_entry</class>
    <class kind="struct">spot::enumerate_cycles::state_info</class>
    <member kind="function">
      <type></type>
      <name>enumerate_cycles</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a061fe15891be3d56d01e14c0918132d7</anchor>
      <arglist>(const scc_map &amp;map)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~enumerate_cycles</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a11d2c899b1062359fdb8f195c967517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a8183feda2fb77c100c3b5ec23701ab44</anchor>
      <arglist>(unsigned scc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>cycle_found</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>adac22e51f24e114a87f87e00df7679d0</anchor>
      <arglist>(const state *start)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_set&lt; const state *, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>set_type</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>afb63ca0e9e26d89a9b7588a53c4a48d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, state_info, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>hash_type</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a86bbd61c654d0ca00bae586ecb3b3281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>hash_type::iterator</type>
      <name>tagged_state</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>ab4ce8a152c941e50d74b323f125ac3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::deque&lt; dfs_entry &gt;</type>
      <name>dfs_stack</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a0bedc31171b4bdeaa384cab424d082a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hash_type</type>
      <name>tags_</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>ac0532377c22578b3b746cc387655c73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>ad0c5d1685661335c5434fdd5f4be4941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const scc_map &amp;</type>
      <name>sm_</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>afae75697d7e699c14ddcd78a00b9dae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dfs_stack</type>
      <name>dfs_</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a3e8514d26f7515786c3001f006c6560b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>tagged_state</type>
      <name>tag_state</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a180bcbdc525eb980115e6aba59038cc1</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>push_state</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>a1439768c92b7877fc500f61a792a8b36</anchor>
      <arglist>(tagged_state ts)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>nocycle</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>af9f2f9ce05dfad34b094c9934f70146f</anchor>
      <arglist>(tagged_state x, tagged_state y)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unmark</name>
      <anchorfile>classspot_1_1enumerate__cycles.html</anchorfile>
      <anchor>aa823dc89b91b8d0010b1e7b2e2b24cd2</anchor>
      <arglist>(tagged_state y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::enumerate_cycles::dfs_entry</name>
    <filename>structspot_1_1enumerate__cycles_1_1dfs__entry.html</filename>
    <member kind="variable">
      <type>tagged_state</type>
      <name>ts</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1dfs__entry.html</anchorfile>
      <anchor>acbf845958a36b33bd14e8b6654a6ef88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tgba_succ_iterator *</type>
      <name>succ</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1dfs__entry.html</anchorfile>
      <anchor>a2b9643355c8bba28f5b373f3c6032699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>f</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1dfs__entry.html</anchorfile>
      <anchor>ac2665bc712d01fa853cd47fe515af153</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::enumerate_cycles::state_info</name>
    <filename>structspot_1_1enumerate__cycles_1_1state__info.html</filename>
    <member kind="function">
      <type></type>
      <name>state_info</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1state__info.html</anchorfile>
      <anchor>a2b2f03d4aca2864b7f6149071247976d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reach</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1state__info.html</anchorfile>
      <anchor>a39879eb68d7f1350cf28f03e33f23eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1state__info.html</anchorfile>
      <anchor>a91dd5804a5d5368d10eb814b290d5ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set_type</type>
      <name>del</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1state__info.html</anchorfile>
      <anchor>a5137ae9d643b38ac61081a375d4c12c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>set_type</type>
      <name>b</name>
      <anchorfile>structspot_1_1enumerate__cycles_1_1state__info.html</anchorfile>
      <anchor>a3ac55bfc7ec05b7f56107c9e894bc58f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::dotty_decorator</name>
    <filename>classspot_1_1dotty__decorator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~dotty_decorator</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>ac6843387d3f254b503db260e88a721b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>state_decl</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>ab39acdd2d4dc5c5e5fa04e1154cf3209</anchor>
      <arglist>(const tgba *a, const state *s, int n, tgba_succ_iterator *si, const std::string &amp;label, bool accepting)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>link_decl</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>aab4c4e8f63648c09469be5145098af91</anchor>
      <arglist>(const tgba *a, const state *in_s, int in, const state *out_s, int out, const tgba_succ_iterator *si, const std::string &amp;label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static dotty_decorator *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>a3f65ca9c0c1a37d7aba531c243f52c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>dotty_decorator</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>a1e68819d430b782d8693aa07d34a0aaa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::emptiness_check_result</name>
    <filename>classspot_1_1emptiness__check__result.html</filename>
    <member kind="function">
      <type></type>
      <name>emptiness_check_result</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a3dcdb828a0a7d6b184ed25b49f9b9bb8</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~emptiness_check_result</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a8953757641fa48a979ec6b14a5647248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_run *</type>
      <name>accepting_run</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a909ae24b5e8454cb966d320e997570ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a36de02afca3bba529baaf091af8d2575</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a5480637d90d73e3e67e2891cb7468d20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a66f0c4f9074073e8d26ac764d6103d9f</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const unsigned_statistics *</type>
      <name>statistics</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a0d0bebd88677d1a0221f8263692f1b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>options_updated</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a3ed3330145ca9d988eeca2e5bf773dad</anchor>
      <arglist>(const option_map &amp;old)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a87ce44800ef5cb67e181f186f3d3dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a42a0ad82518ab92ce6ea2166c119e4cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::emptiness_check</name>
    <filename>classspot_1_1emptiness__check.html</filename>
    <member kind="function">
      <type></type>
      <name>emptiness_check</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>abd84a2695a4a7613b6b328fb956500bb</anchor>
      <arglist>(const tgba *a, option_map o=option_map())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~emptiness_check</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a1defb939b69b2ab87280937631005d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a54c8f2e6ba519944e19f75e74d6d93da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a892ab07ce172c1d6deda9f0802b9eaa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>ad0e61dab3b4593d493da86ee625a25c3</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>safe</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a217e667676d60e9f6f4fa7ba923925c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual emptiness_check_result *</type>
      <name>check</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>ad573f9d7402dfdc44959cd183ae81774</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const unsigned_statistics *</type>
      <name>statistics</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a35f1119514acb36b217a7701bbf4b6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a67a72e44b2fa859aef3c23c052512924</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>options_updated</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>aac525dce9e038b424a1f680b797e2639</anchor>
      <arglist>(const option_map &amp;old)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a315fb003ae56a13d26dc8ffb03a34ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a2bf27940474ed0e6ea39a6f8b6c7fcc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::emptiness_check_instantiator</name>
    <filename>classspot_1_1emptiness__check__instantiator.html</filename>
    <member kind="function">
      <type>emptiness_check *</type>
      <name>instantiate</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a4af6350795c509ae155159fa08200fd3</anchor>
      <arglist>(const tgba *a) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>min_acceptance_conditions</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a356319c9ddc0116d0fb528abcd1d751f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>max_acceptance_conditions</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>ae7172afd92e323421cf34e80ee767b58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a795a1701f756da2019925528248697e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a94c541281a8ddc037242ebc1c1621710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static emptiness_check_instantiator *</type>
      <name>construct</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>ad454d1d69ca258b2fc68222436eb62a3</anchor>
      <arglist>(const char *name, const char **err)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>emptiness_check_instantiator</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a86275bcf54360bac8329abaad9179bdc</anchor>
      <arglist>(option_map o, void *i)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a9505cb9fbf29a97dccadf419b59587e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>info_</name>
      <anchorfile>classspot_1_1emptiness__check__instantiator.html</anchorfile>
      <anchor>a8d79069be90cdfe8feab162df09ea0b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::tgba_run</name>
    <filename>structspot_1_1tgba__run.html</filename>
    <class kind="struct">spot::tgba_run::step</class>
    <member kind="typedef">
      <type>std::list&lt; step &gt;</type>
      <name>steps</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a992869805fc5a8c3146e77309be61312</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~tgba_run</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a62f1b2824bbc74b7163321da7541978e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_run</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a6aaba1570a621ee9b0c8978363a26735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tgba_run</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a46d2f9e56cb61e77c10be5cbe8a37209</anchor>
      <arglist>(const tgba_run &amp;run)</arglist>
    </member>
    <member kind="function">
      <type>tgba_run &amp;</type>
      <name>operator=</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a1943b571944e9027aaf49e5e1535a17d</anchor>
      <arglist>(const tgba_run &amp;run)</arglist>
    </member>
    <member kind="variable">
      <type>steps</type>
      <name>prefix</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a18d04f72b2050764fb8d7394c8f03548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>steps</type>
      <name>cycle</name>
      <anchorfile>structspot_1_1tgba__run.html</anchorfile>
      <anchor>a7ac206474ee5a1ecb9be7239a63d178c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::tgba_run::step</name>
    <filename>structspot_1_1tgba__run_1_1step.html</filename>
    <member kind="variable">
      <type>const state *</type>
      <name>s</name>
      <anchorfile>structspot_1_1tgba__run_1_1step.html</anchorfile>
      <anchor>ae61b3c22a558f14d65de9a1a0e97f229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>label</name>
      <anchorfile>structspot_1_1tgba__run_1_1step.html</anchorfile>
      <anchor>adb117550f1dd40c893c4f1e1a4cfb66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acc</name>
      <anchorfile>structspot_1_1tgba__run_1_1step.html</anchorfile>
      <anchor>ae5d5c9c4955433c0cd151c68155e2eff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::unsigned_statistics</name>
    <filename>structspot_1_1unsigned__statistics.html</filename>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~unsigned_statistics</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a95aa4c42b92cd3ad870863faf1a56dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::unsigned_statistics_copy</name>
    <filename>classspot_1_1unsigned__statistics__copy.html</filename>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>af822f09fe592215c426a3c8700e27454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unsigned_statistics_copy</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>a5ea4d2e95260fdf38498065a85c33ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unsigned_statistics_copy</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>ac86ebc8dff41dba3e86f9156ad376b8a</anchor>
      <arglist>(const unsigned_statistics &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seteq</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>a5e27e164d6506e7232285c04f4c9fb2f</anchor>
      <arglist>(const unsigned_statistics &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>a576a52e014a088121b319477e6c64ed8</anchor>
      <arglist>(const unsigned_statistics_copy &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>af58bde6ddc089ee547bae26bad2cf2c4</anchor>
      <arglist>(const unsigned_statistics_copy &amp;o) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>ada02e8d891e755de82cdb5b207418dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>set</name>
      <anchorfile>classspot_1_1unsigned__statistics__copy.html</anchorfile>
      <anchor>ad07714972847e22c9a3af4308fdb6b6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ec_statistics</name>
    <filename>classspot_1_1ec__statistics.html</filename>
    <base>spot::unsigned_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ec_statistics</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a8cded4229f7b8471a9fe18d7c58f1aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a81d1156d35135a920f17d22765e07724</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a779baacabc1e56f583dd07ab9cc693af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a36673e3fb88feefbb1097b5cadd01327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>ade5ca49fc87a2bc9ce9414fc3a96c56b</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dec_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>acb78038e2e0be1a3d5761cf5b5bdcae9</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a74399636ac58843b888fd4dcd4663b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a3d4621663efb6371dd17961d990a7447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a4578aa6ab8cc01648e66698074813c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>aaadc5f995de05d1e1c835e0e49419524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>states_</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a351989d328fe32a2c841ca4c759f2fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>transitions_</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a09a8f1cd2fa661f9301c9b9fb35ed724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>depth_</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>aaf92679f9a66c811adcfdbc08587678a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_depth_</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a0c9bc3c5d707fce78db849b85c570466</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ars_statistics</name>
    <filename>classspot_1_1ars__statistics.html</filename>
    <base>spot::unsigned_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ars_statistics</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a2e3da45cfc7310ee3108f6a219b66578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a61014af68a3e62e3fee1a473515b27bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>acc190e2c3a0e69c8a87b9c585ac06b60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>af8d364ef84d0299f7b2e6294b500b274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a2484740c7d5d23282800ff2ada5db8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>prefix_states_</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a4493449d446199bb3174671090382095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>cycle_states_</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>af57e0d79e7066fa6fe32dacc371cf179</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::acss_statistics</name>
    <filename>classspot_1_1acss__statistics.html</filename>
    <base>spot::ars_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>acss_statistics</name>
      <anchorfile>classspot_1_1acss__statistics.html</anchorfile>
      <anchor>af028719871809df77ff73495c889e888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~acss_statistics</name>
      <anchorfile>classspot_1_1acss__statistics.html</anchorfile>
      <anchor>a8be4486b6a439c88573896ab54d27a68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>acss_states</name>
      <anchorfile>classspot_1_1acss__statistics.html</anchorfile>
      <anchor>a013cda6ae3aece6bbb7ffbc61a33fffb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a61014af68a3e62e3fee1a473515b27bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>acc190e2c3a0e69c8a87b9c585ac06b60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>af8d364ef84d0299f7b2e6294b500b274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a2484740c7d5d23282800ff2ada5db8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::couvreur99_check_result</name>
    <filename>classspot_1_1couvreur99__check__result.html</filename>
    <base>spot::emptiness_check_result</base>
    <base>spot::acss_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>couvreur99_check_result</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>aee5e806f626f857fa3ecd914220e8827</anchor>
      <arglist>(const couvreur99_check_status *ecs, option_map o=option_map())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tgba_run *</type>
      <name>accepting_run</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>a2ad4b0f54841a33797c336505109ee16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>ad776896fd79b112d59014b48bcbec44b</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>acss_states</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>a2b97b342b5e84b3d6cd0fc95b42be43b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a36de02afca3bba529baaf091af8d2575</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a5480637d90d73e3e67e2891cb7468d20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a66f0c4f9074073e8d26ac764d6103d9f</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const unsigned_statistics *</type>
      <name>statistics</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a0d0bebd88677d1a0221f8263692f1b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a61014af68a3e62e3fee1a473515b27bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_prefix_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>acc190e2c3a0e69c8a87b9c585ac06b60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>af8d364ef84d0299f7b2e6294b500b274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>ars_cycle_states</name>
      <anchorfile>classspot_1_1ars__statistics.html</anchorfile>
      <anchor>a2484740c7d5d23282800ff2ada5db8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>accepting_cycle</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>aacf9472e522e742957e29d29453f64a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>options_updated</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a3ed3330145ca9d988eeca2e5bf773dad</anchor>
      <arglist>(const option_map &amp;old)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a87ce44800ef5cb67e181f186f3d3dcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check__result.html</anchorfile>
      <anchor>a42a0ad82518ab92ce6ea2166c119e4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const couvreur99_check_status *</type>
      <name>ecs_</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>a0c5ed8e0b96439e4d94ffea6a84b52c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tgba_run *</type>
      <name>run_</name>
      <anchorfile>classspot_1_1couvreur99__check__result.html</anchorfile>
      <anchor>a98d5f7f8d9138fb76803ae4c9d814add</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_connected_component</name>
    <filename>classspot_1_1explicit__connected__component.html</filename>
    <base>spot::scc_stack::connected_component</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~explicit_connected_component</name>
      <anchorfile>classspot_1_1explicit__connected__component.html</anchorfile>
      <anchor>aec2aaed565e8a4eaba49e6752e03851c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>has_state</name>
      <anchorfile>classspot_1_1explicit__connected__component.html</anchorfile>
      <anchor>a32befd8aef0876c44d45cb78d5955272</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1explicit__connected__component.html</anchorfile>
      <anchor>a65ca837e0460d52c9346244fb7c98fe2</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a58d4077c0bb19d470764be5e79a9adf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>aa753864e5e55807ac67794a9999873b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; const state * &gt;</type>
      <name>rem</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a205e9ecf4993038b597838eafd5102cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::connected_component_hash_set</name>
    <filename>classspot_1_1connected__component__hash__set.html</filename>
    <base>spot::explicit_connected_component</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~connected_component_hash_set</name>
      <anchorfile>classspot_1_1connected__component__hash__set.html</anchorfile>
      <anchor>afc8bcedf6b7f5e5cd66c97d66b5b8e07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>has_state</name>
      <anchorfile>classspot_1_1connected__component__hash__set.html</anchorfile>
      <anchor>a44422952ba14017f0933f7434739fdb7</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1connected__component__hash__set.html</anchorfile>
      <anchor>af8544e2de3bddac0dfa923a3788a5fd0</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a58d4077c0bb19d470764be5e79a9adf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>aa753864e5e55807ac67794a9999873b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; const state * &gt;</type>
      <name>rem</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a205e9ecf4993038b597838eafd5102cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_set&lt; const state *, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>set_type</name>
      <anchorfile>classspot_1_1connected__component__hash__set.html</anchorfile>
      <anchor>a397565e28b3561653570fd15224abc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>set_type</type>
      <name>states</name>
      <anchorfile>classspot_1_1connected__component__hash__set.html</anchorfile>
      <anchor>a75fb2a089b75ce89f7b4277952e14ab7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::explicit_connected_component_factory</name>
    <filename>classspot_1_1explicit__connected__component__factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~explicit_connected_component_factory</name>
      <anchorfile>classspot_1_1explicit__connected__component__factory.html</anchorfile>
      <anchor>adc372f3d1bf138af5d621d136bb1084e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual explicit_connected_component *</type>
      <name>build</name>
      <anchorfile>classspot_1_1explicit__connected__component__factory.html</anchorfile>
      <anchor>a94bff811308cd87633dc9b781e8d5f3c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::connected_component_hash_set_factory</name>
    <filename>classspot_1_1connected__component__hash__set__factory.html</filename>
    <base>spot::explicit_connected_component_factory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual connected_component_hash_set *</type>
      <name>build</name>
      <anchorfile>classspot_1_1connected__component__hash__set__factory.html</anchorfile>
      <anchor>a68cf04582b84a6d851f19b2697bc8c1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const connected_component_hash_set_factory *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1connected__component__hash__set__factory.html</anchorfile>
      <anchor>a202e65c89fe1b43c762f5d65bce82ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~connected_component_hash_set_factory</name>
      <anchorfile>classspot_1_1connected__component__hash__set__factory.html</anchorfile>
      <anchor>a809313e8ec726cd35e401a9d904ec47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>connected_component_hash_set_factory</name>
      <anchorfile>classspot_1_1connected__component__hash__set__factory.html</anchorfile>
      <anchor>aa29f42e74183d72b27d2652975bc93f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::couvreur99_check</name>
    <filename>classspot_1_1couvreur99__check.html</filename>
    <base>spot::emptiness_check</base>
    <base>spot::ec_statistics</base>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>couvreur99_check</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a5567070e76d7e35363f49589d515c736</anchor>
      <arglist>(const tgba *a, option_map o=option_map(), const numbered_state_heap_factory *nshf=numbered_state_heap_hash_map_factory::instance())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~couvreur99_check</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>af159127474608bb53042ff1344241c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual emptiness_check_result *</type>
      <name>check</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>acd2571ab75300c53ea1b9f5945c6bbcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a659be4b0219537e8089f7196cf5bbf4d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const couvreur99_check_status *</type>
      <name>result</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a1586281a720baeaa2cf538fc5a12cd6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a54c8f2e6ba519944e19f75e74d6d93da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a892ab07ce172c1d6deda9f0802b9eaa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>ad0e61dab3b4593d493da86ee625a25c3</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>safe</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a217e667676d60e9f6f4fa7ba923925c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const unsigned_statistics *</type>
      <name>statistics</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a35f1119514acb36b217a7701bbf4b6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>options_updated</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>aac525dce9e038b424a1f680b797e2639</anchor>
      <arglist>(const option_map &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a81d1156d35135a920f17d22765e07724</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a779baacabc1e56f583dd07ab9cc693af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a36673e3fb88feefbb1097b5cadd01327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>ade5ca49fc87a2bc9ce9414fc3a96c56b</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dec_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>acb78038e2e0be1a3d5761cf5b5bdcae9</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a74399636ac58843b888fd4dcd4663b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a3d4621663efb6371dd17961d990a7447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a4578aa6ab8cc01648e66698074813c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>aaadc5f995de05d1e1c835e0e49419524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_component</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a3b48d6451f133c57c7d62b8946d6339b</anchor>
      <arglist>(const state *start_delete)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>get_removed_components</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a1b3aa85ffeaafc688a6701dd161c0ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>get_vmsize</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a643881f8d780ced77e2f141016fb29ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>couvreur99_check_status *</type>
      <name>ecs_</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a3e87c0bdcab6b6958d725eb67ee6c436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>poprem_</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a13a1e31c34889d7a97cea7c7a0097416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>removed_components</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>afef1267ab1a6dbb03961e88cc718da42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a315fb003ae56a13d26dc8ffb03a34ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a2bf27940474ed0e6ea39a6f8b6c7fcc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::couvreur99_check_shy</name>
    <filename>classspot_1_1couvreur99__check__shy.html</filename>
    <base>spot::couvreur99_check</base>
    <class kind="struct">spot::couvreur99_check_shy::successor</class>
    <class kind="struct">spot::couvreur99_check_shy::todo_item</class>
    <member kind="typedef">
      <type>unsigned(unsigned_statistics::*</type>
      <name>unsigned_fun</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>ad3ea236800d341fb5ac79b74b5677967</anchor>
      <arglist>)() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; const char *, unsigned_fun, char_ptr_less_than &gt;</type>
      <name>stats_map</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a3e8a1630d3c2ca9ca25d5a50438387d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>couvreur99_check_shy</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a73a4502883a3db87e7835d2b42acfb81</anchor>
      <arglist>(const tgba *a, option_map o=option_map(), const numbered_state_heap_factory *nshf=numbered_state_heap_hash_map_factory::instance())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~couvreur99_check_shy</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a5f821ff9fcc7c3058eb2de9fe10d3eea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual emptiness_check_result *</type>
      <name>check</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a46acfebce7513b47f8d6d98f42dcefb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a659be4b0219537e8089f7196cf5bbf4d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const couvreur99_check_status *</type>
      <name>result</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a1586281a720baeaa2cf538fc5a12cd6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a54c8f2e6ba519944e19f75e74d6d93da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const option_map &amp;</type>
      <name>options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a892ab07ce172c1d6deda9f0802b9eaa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>ad0e61dab3b4593d493da86ee625a25c3</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>safe</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a217e667676d60e9f6f4fa7ba923925c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const unsigned_statistics *</type>
      <name>statistics</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a35f1119514acb36b217a7701bbf4b6f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>options_updated</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>aac525dce9e038b424a1f680b797e2639</anchor>
      <arglist>(const option_map &amp;old)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a81d1156d35135a920f17d22765e07724</anchor>
      <arglist>(unsigned n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a779baacabc1e56f583dd07ab9cc693af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a36673e3fb88feefbb1097b5cadd01327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inc_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>ade5ca49fc87a2bc9ce9414fc3a96c56b</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dec_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>acb78038e2e0be1a3d5761cf5b5bdcae9</anchor>
      <arglist>(unsigned n=1)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a74399636ac58843b888fd4dcd4663b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a3d4621663efb6371dd17961d990a7447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max_depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>a4578aa6ab8cc01648e66698074813c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>depth</name>
      <anchorfile>classspot_1_1ec__statistics.html</anchorfile>
      <anchor>aaadc5f995de05d1e1c835e0e49419524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a81f3aff6824df2648f5d6b5c19a6747d</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="variable">
      <type>stats_map</type>
      <name>stats</name>
      <anchorfile>structspot_1_1unsigned__statistics.html</anchorfile>
      <anchor>a9696e48357820edfaa12abdc1961eadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; successor &gt;</type>
      <name>succ_queue</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a17e8361583eeceb540d7b2d8dd5ba098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; todo_item &gt;</type>
      <name>todo_list</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a575a5df7a1e6ff2d0f92f455d41c84a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_todo</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>aaa12e9662fbe6a5766b0748a7916cb2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dump_queue</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a4df98a24aa2099c639d6f8dfdc4224a4</anchor>
      <arglist>(std::ostream &amp;os=std::cerr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual numbered_state_heap::state_index_p</type>
      <name>find_state</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a1e9cf243327a7f1c4f1034bf61735638</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_component</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a3b48d6451f133c57c7d62b8946d6339b</anchor>
      <arglist>(const state *start_delete)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>get_removed_components</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a1b3aa85ffeaafc688a6701dd161c0ff1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>get_vmsize</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a643881f8d780ced77e2f141016fb29ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; bdd &gt;</type>
      <name>arc</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>aad1a65d3d9fff5804f173edcb04c1dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>af10ac30976ec671be89d559f0c7f362b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>succ_queue::iterator</type>
      <name>pos</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a6fa9998c57b217e4f90719c7b235693d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>todo_list</type>
      <name>todo</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>aae1d99f0235e147d78a9ca009683b7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>group_</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a112c0863e8f602e5dddcc222d4250b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>group2_</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>afe55f697d80c24009d2630a56afc49aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>onepass_</name>
      <anchorfile>classspot_1_1couvreur99__check__shy.html</anchorfile>
      <anchor>a65fda5f5b5850a47bda92941e948899a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>couvreur99_check_status *</type>
      <name>ecs_</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a3e87c0bdcab6b6958d725eb67ee6c436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>poprem_</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>a13a1e31c34889d7a97cea7c7a0097416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>removed_components</name>
      <anchorfile>classspot_1_1couvreur99__check.html</anchorfile>
      <anchor>afef1267ab1a6dbb03961e88cc718da42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>a_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a315fb003ae56a13d26dc8ffb03a34ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>option_map</type>
      <name>o_</name>
      <anchorfile>classspot_1_1emptiness__check.html</anchorfile>
      <anchor>a2bf27940474ed0e6ea39a6f8b6c7fcc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::couvreur99_check_shy::successor</name>
    <filename>structspot_1_1couvreur99__check__shy_1_1successor.html</filename>
    <member kind="function">
      <type></type>
      <name>successor</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1successor.html</anchorfile>
      <anchor>a980b5139f8a00ab0e20e45a4ed57b7c8</anchor>
      <arglist>(bdd acc, const spot::state *s)</arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acc</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1successor.html</anchorfile>
      <anchor>a1bdb54bd31ef8bd124207ad116ca09a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const spot::state *</type>
      <name>s</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1successor.html</anchorfile>
      <anchor>aae3d2574a4d7411d94b7ec0dec6ecd9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::couvreur99_check_shy::todo_item</name>
    <filename>structspot_1_1couvreur99__check__shy_1_1todo__item.html</filename>
    <member kind="function">
      <type></type>
      <name>todo_item</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1todo__item.html</anchorfile>
      <anchor>a37fd3fd565dd2c653d365bac62ff44ab</anchor>
      <arglist>(const state *s, int n, couvreur99_check_shy *shy)</arglist>
    </member>
    <member kind="variable">
      <type>const state *</type>
      <name>s</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1todo__item.html</anchorfile>
      <anchor>ac23ec08e4d15168ea8034453c3d6831a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1todo__item.html</anchorfile>
      <anchor>aa6e0e40f38e4b153cd89313b80dd480c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>succ_queue</type>
      <name>q</name>
      <anchorfile>structspot_1_1couvreur99__check__shy_1_1todo__item.html</anchorfile>
      <anchor>a19f7249eac349d73ddc9bf50a3e0ab31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::numbered_state_heap_const_iterator</name>
    <filename>classspot_1_1numbered__state__heap__const__iterator.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~numbered_state_heap_const_iterator</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>a84bf9e6b4d2897d26d720d66a48300a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>a10ddb31c77032b460509153e2fc8c1fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>a290efd2641628a740c2d7e52b0e98bb3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>done</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>a0a72351173852903de025f697b5117a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>get_state</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>ae6c21c4128258f565aca57c74e301be1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_index</name>
      <anchorfile>classspot_1_1numbered__state__heap__const__iterator.html</anchorfile>
      <anchor>a9ecc05992c405b41f0c5ce60ff9643f6</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::numbered_state_heap</name>
    <filename>classspot_1_1numbered__state__heap.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; const state *, int * &gt;</type>
      <name>state_index_p</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>acc0b4cf8fc60a89e267d08a4d45b1c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const state *, int &gt;</type>
      <name>state_index</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>ac39af7af085a760d16a34d0e2f9e18d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~numbered_state_heap</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a988d52f967e803673e1766e135b90354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>ae1190a20a23bf805c00a9a030c1fa44c</anchor>
      <arglist>(const state *s, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a6967c26452451766938f8a16af188b0c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual numbered_state_heap_const_iterator *</type>
      <name>iterator</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a71766568e653529969ae47733758db46</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state_index</type>
      <name>find</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>ab6616967723c7233740d4dcef2e3f145</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state_index_p</type>
      <name>find</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a7eb4c58a703a6db54bfbe83e50bf802f</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state_index</type>
      <name>index</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a30ac36612181bf3b0c1f7a0ae108e692</anchor>
      <arglist>(const state *s) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual state_index_p</type>
      <name>index</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>a33d6e875baca0507397a813646006219</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::numbered_state_heap_factory</name>
    <filename>classspot_1_1numbered__state__heap__factory.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~numbered_state_heap_factory</name>
      <anchorfile>classspot_1_1numbered__state__heap__factory.html</anchorfile>
      <anchor>a580c1ad5560eab27671f0feefb5259ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual numbered_state_heap *</type>
      <name>build</name>
      <anchorfile>classspot_1_1numbered__state__heap__factory.html</anchorfile>
      <anchor>a9da34fdafec99225402850ee8a76f3d2</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::numbered_state_heap_hash_map</name>
    <filename>classspot_1_1numbered__state__heap__hash__map.html</filename>
    <base>spot::numbered_state_heap</base>
    <member kind="typedef">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>hash_type</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a30660d5f9c5d6154ba47a1548ecbf141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const state *, int * &gt;</type>
      <name>state_index_p</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>acc0b4cf8fc60a89e267d08a4d45b1c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const state *, int &gt;</type>
      <name>state_index</name>
      <anchorfile>classspot_1_1numbered__state__heap.html</anchorfile>
      <anchor>ac39af7af085a760d16a34d0e2f9e18d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~numbered_state_heap_hash_map</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a4b37a85f45f12c38389a405ed2f33de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_index</type>
      <name>find</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a33c53af9be271e188f2a96f3766eaa1a</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_index_p</type>
      <name>find</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a2b4a5b5e344fe76a1422def88c8130ff</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_index</type>
      <name>index</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a7b2a1636b4e5eed2319d379f2f06e969</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual state_index_p</type>
      <name>index</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>aeff788dc2b943bd0d4ec1144fc5bd2c8</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>acf08fbf1f29d09fdc8883768feb625f9</anchor>
      <arglist>(const state *s, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>a80b69aa80d6ec021f7be03f705653f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual numbered_state_heap_const_iterator *</type>
      <name>iterator</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>adf07e9a27deb8d28a5c7554cb045bcf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hash_type</type>
      <name>h</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map.html</anchorfile>
      <anchor>afb219195433667abe491130fa3acd6a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::numbered_state_heap_hash_map_factory</name>
    <filename>classspot_1_1numbered__state__heap__hash__map__factory.html</filename>
    <base>spot::numbered_state_heap_factory</base>
    <member kind="function" virtualness="virtual">
      <type>virtual numbered_state_heap_hash_map *</type>
      <name>build</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map__factory.html</anchorfile>
      <anchor>a63c0bbdf5c6d22ba46a8caf9e0beaf50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const numbered_state_heap_hash_map_factory *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map__factory.html</anchorfile>
      <anchor>ac9ff2d24e71f763cbd999e09be6aa518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~numbered_state_heap_hash_map_factory</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map__factory.html</anchorfile>
      <anchor>aeca03181988d66d7301dd25b98ee3f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>numbered_state_heap_hash_map_factory</name>
      <anchorfile>classspot_1_1numbered__state__heap__hash__map__factory.html</anchorfile>
      <anchor>a830f29fa2401b4cbf4168e7e9db0ed0d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::scc_stack</name>
    <filename>classspot_1_1scc__stack.html</filename>
    <class kind="struct">spot::scc_stack::connected_component</class>
    <member kind="typedef">
      <type>std::list&lt; connected_component &gt;</type>
      <name>stack_type</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a7919ffabb7b1b072c94d2db0a5157382</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>ab41e8e1aad7d4ca3940f1eaf8064a0c2</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>connected_component &amp;</type>
      <name>top</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a9fb956e08441d13f89442ac99974b6af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const connected_component &amp;</type>
      <name>top</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a1fcb202de7bce708b0616ce9ad9a1bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a2da83367ca277053968ff856f3c6295b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a627055834783bbe23e93aa061bc5f7d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; const state * &gt; &amp;</type>
      <name>rem</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a74f1cf725431e87096f4823bc0d19bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>clear_rem</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>a939ef574064e26b22df1a48d3e52cf27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>af60619c5be8a175029f309481f56588f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>stack_type</type>
      <name>s</name>
      <anchorfile>classspot_1_1scc__stack.html</anchorfile>
      <anchor>ac384c36b7776955a5f3f77e7abd0ee0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::scc_stack::connected_component</name>
    <filename>structspot_1_1scc__stack_1_1connected__component.html</filename>
    <member kind="function">
      <type></type>
      <name>connected_component</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>ab7e02d26855cba8b9b912848750cccbe</anchor>
      <arglist>(int index=-1)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a58d4077c0bb19d470764be5e79a9adf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>condition</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>aa753864e5e55807ac67794a9999873b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; const state * &gt;</type>
      <name>rem</name>
      <anchorfile>structspot_1_1scc__stack_1_1connected__component.html</anchorfile>
      <anchor>a205e9ecf4993038b597838eafd5102cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::couvreur99_check_status</name>
    <filename>classspot_1_1couvreur99__check__status.html</filename>
    <member kind="function">
      <type></type>
      <name>couvreur99_check_status</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>a002d7a25b4cbe893d02f93cdde9b3217</anchor>
      <arglist>(const tgba *aut, const numbered_state_heap_factory *nshf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~couvreur99_check_status</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>acc8253ea69979bbc16d9e3b7cec9f1e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>ac85eb5d7ae5fe26defdf157f12a57e2f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>states</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>ac0dad048c592f621dd9cbc8e76c72d3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const tgba *</type>
      <name>aut</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>ac4db05ebb3edd2176e40406a0d0ef306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scc_stack</type>
      <name>root</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>a6bf17d3301e2c753c6259600f83963c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>numbered_state_heap *</type>
      <name>h</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>a015a6b109e569b398bd4c3f18dec4060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const state *</type>
      <name>cycle_seed</name>
      <anchorfile>classspot_1_1couvreur99__check__status.html</anchorfile>
      <anchor>a7e476db66078f99415a0ba62956cec3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::postprocessor</name>
    <filename>classspot_1_1postprocessor.html</filename>
    <member kind="enumeration">
      <name>output_type</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>adaab3d066976238e2de299f30755ab2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TGBA</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>adaab3d066976238e2de299f30755ab2ca28ef85b3a7a064095970268a2af45704</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BA</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>adaab3d066976238e2de299f30755ab2ca01e42de7dc7d3ea9cd5a44347803f972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Monitor</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>adaab3d066976238e2de299f30755ab2ca5bc37dd80f0e4e13dcb9e4a81e7edb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>output_pref</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a636ad35d74ac72adc0b886c2b5e26917</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Any</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a636ad35d74ac72adc0b886c2b5e26917a242043a40b71a4f3d4aa4c4997883318</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Small</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a636ad35d74ac72adc0b886c2b5e26917a3833bc46a6a67bea41bf146ea288489d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Deterministic</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a636ad35d74ac72adc0b886c2b5e26917a8d4701373cd37e4d53acc6932786ff25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>optimization_level</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a81bbc24ee443383c013a13109060f66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Low</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a81bbc24ee443383c013a13109060f66ca15afe3e5010691d9782108206c7ef2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Medium</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a81bbc24ee443383c013a13109060f66ca428975d1a069a1042b3e96cf716136e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>High</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a81bbc24ee443383c013a13109060f66cac76e402ce67c0c24ea16c8f4736edd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>postprocessor</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a88e1d2738c60cb132f944e9601c9e88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_type</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>adfe4389388a824a09a1b34aa30652f48</anchor>
      <arglist>(output_type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pref</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a1d11317115fdc3615576c78b23730092</anchor>
      <arglist>(output_pref pref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_level</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>abec9eedb477a3cd30bb643ef24541fcc</anchor>
      <arglist>(optimization_level level)</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>run</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>ac5dd094b2b7685fc3df9ef10e6eed7fd</anchor>
      <arglist>(const tgba *input, const ltl::formula *f)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>output_type</type>
      <name>type_</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>ada162c6dcf9a6a8bf3aeb42b6e043f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>output_pref</type>
      <name>pref_</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a5cf71696c0d3e6147530d7ff641672c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>optimization_level</type>
      <name>level_</name>
      <anchorfile>classspot_1_1postprocessor.html</anchorfile>
      <anchor>a229b442f9e7df8b26fb1cc64477e2c13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::power_map</name>
    <filename>structspot_1_1power__map.html</filename>
    <member kind="typedef">
      <type>std::set&lt; const state *, state_ptr_less_than &gt;</type>
      <name>power_state</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>ae2db95447e99c41c71a29c58bfac1065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, power_state &gt;</type>
      <name>power_map_data</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>aa2cd44390e316f23503bcf41a775dfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sgi::hash_set&lt; const state *, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>state_set</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>a8c0be858bdaa917e5b59ec1e3ab2fee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~power_map</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>ac0aeeb21e76d49f909723b70ff15fa96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const power_state &amp;</type>
      <name>states_of</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>a1d6dee91566eaa42b913e1c05767d2eb</anchor>
      <arglist>(int s) const </arglist>
    </member>
    <member kind="function">
      <type>const state *</type>
      <name>canonicalize</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>a7baceb28bc43bc1ad20a73bd5c4d6a2f</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="variable">
      <type>power_map_data</type>
      <name>map_</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>a160022464424e7aa45b910d0dd08c68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>state_set</type>
      <name>states</name>
      <anchorfile>structspot_1_1power__map.html</anchorfile>
      <anchor>a18236db498165b5ca1b092ac5c90bef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_reachable_iterator</name>
    <filename>classspot_1_1tgba__reachable__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>tgba_reachable_iterator</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a71307833df5755d4af5528d64fe3fdb3</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_reachable_iterator</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a082dc58180e304e6eb9531b45738dc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aaefeca520f9e39c86018d284ff1aa4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a0679e3fa4cae75e5d540ab5c960695dc</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a958d443339cdc7da2b6da976186cf299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aa6bef3072977a131257e206221b63d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6b38d281157866c5bae8806c4b7cd8fd</anchor>
      <arglist>(const state *s, int n, tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6214cd7eb3295c93fae10a800b4635f7</anchor>
      <arglist>(const state *in_s, int in, const state *out_s, int out, const tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a21afe78fce17e6620f911a3ba7effbdb</anchor>
      <arglist>(const state *s)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a045c244be5739955e1e851beee4f5dca</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a914620c536c096c6bde20b92811315d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a2fd15caa56fd3b9c39d0360c6134ed27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a33fbcfee3eb7694451f2b0760ee79de1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_reachable_iterator_depth_first</name>
    <filename>classspot_1_1tgba__reachable__iterator__depth__first.html</filename>
    <base>spot::tgba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgba_reachable_iterator_depth_first</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>aa10418a272b92adb47e4e87497f4eb7c</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>aeb354c7f1a448f49278afdb51e314d82</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>ab2d7298c30ef62ca9c42a619cae20d08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aaefeca520f9e39c86018d284ff1aa4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a0679e3fa4cae75e5d540ab5c960695dc</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a958d443339cdc7da2b6da976186cf299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aa6bef3072977a131257e206221b63d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6b38d281157866c5bae8806c4b7cd8fd</anchor>
      <arglist>(const state *s, int n, tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6214cd7eb3295c93fae10a800b4635f7</anchor>
      <arglist>(const state *in_s, int in, const state *out_s, int out, const tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a914620c536c096c6bde20b92811315d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__depth__first.html</anchorfile>
      <anchor>ac7a1289d2adf2367e0b3d1de14188f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a2fd15caa56fd3b9c39d0360c6134ed27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a33fbcfee3eb7694451f2b0760ee79de1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_reachable_iterator_breadth_first</name>
    <filename>classspot_1_1tgba__reachable__iterator__breadth__first.html</filename>
    <base>spot::tgba_reachable_iterator</base>
    <member kind="function">
      <type></type>
      <name>tgba_reachable_iterator_breadth_first</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a4c87d902aae981f84e77b9336a132d29</anchor>
      <arglist>(const tgba *a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>a962348317141a53df5bc92086071fd8c</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const state *</type>
      <name>next_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>ac368fb5a611b2509c33f9deb03a7ccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aaefeca520f9e39c86018d284ff1aa4ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>want_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a0679e3fa4cae75e5d540ab5c960695dc</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a958d443339cdc7da2b6da976186cf299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>end</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>aa6bef3072977a131257e206221b63d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_state</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6b38d281157866c5bae8806c4b7cd8fd</anchor>
      <arglist>(const state *s, int n, tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>process_link</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a6214cd7eb3295c93fae10a800b4635f7</anchor>
      <arglist>(const state *in_s, int in, const state *out_s, int out, const tgba_succ_iterator *si)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>seen_map</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a914620c536c096c6bde20b92811315d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::deque&lt; const state * &gt;</type>
      <name>todo</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator__breadth__first.html</anchorfile>
      <anchor>ab591b269fe4c8cbc61769c5309255b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a2fd15caa56fd3b9c39d0360c6134ed27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>seen_map</type>
      <name>seen</name>
      <anchorfile>classspot_1_1tgba__reachable__iterator.html</anchorfile>
      <anchor>a33fbcfee3eb7694451f2b0760ee79de1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::tgba_run_dotty_decorator</name>
    <filename>classspot_1_1tgba__run__dotty__decorator.html</filename>
    <base>spot::dotty_decorator</base>
    <member kind="function">
      <type></type>
      <name>tgba_run_dotty_decorator</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>ac225adfcddc76c0cb109cdd6209e25b4</anchor>
      <arglist>(const tgba_run *run)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~tgba_run_dotty_decorator</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>a061c9488698b789f22673a703b2c65c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>state_decl</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>ad61dc9deb22f8d312ff4ac10c0e5739a</anchor>
      <arglist>(const tgba *a, const state *s, int n, tgba_succ_iterator *si, const std::string &amp;label, bool accepting)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>link_decl</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>ad350e1e551b6cc9ecab570b6d3d59bf8</anchor>
      <arglist>(const tgba *a, const state *in_s, int in, const state *out_s, int out, const tgba_succ_iterator *si, const std::string &amp;label)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static dotty_decorator *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1dotty__decorator.html</anchorfile>
      <anchor>a3f65ca9c0c1a37d7aba531c243f52c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; tgba_run::steps::const_iterator, int &gt;</type>
      <name>step_num</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>abca4e3af5b46c5f1f26dff21ba5a4045</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; step_num &gt;</type>
      <name>step_set</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>ad6d84a3f76628096c736b5e75c488cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; const state *, std::pair&lt; step_set, step_set &gt;, spot::state_ptr_less_than &gt;</type>
      <name>step_map</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>a7e396d304340ec45bfc8efaa6daffa76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const tgba_run *</type>
      <name>run_</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>ae64df61811600525e3deebbc9926737f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>step_map</type>
      <name>map_</name>
      <anchorfile>classspot_1_1tgba__run__dotty__decorator.html</anchorfile>
      <anchor>a7138e9522fbcb6ca469926ac0a7b0b9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::scc_stats</name>
    <filename>structspot_1_1scc__stats.html</filename>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>ab8be6be1e91c7ca45cb14d2579266839</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>scc_total</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a39a24beafce284dbcdde8d46cd4aae43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>acc_scc</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a5463022830795ba17165e148d4a02774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>dead_scc</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a8232f0d2651d52c529ef57e8df63db8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>acc_paths</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a61218de47af06297c734661ddd8495cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>dead_paths</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a57f5bbe1dfccccb2cba728cc7e238b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>self_loops</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a2c5df90f1706c99c5cd6c432932555d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>useless_scc_map</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>ad868c4ea8ecc3365d0d89646c702c30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>useful_acc</name>
      <anchorfile>structspot_1_1scc__stats.html</anchorfile>
      <anchor>a3a9c99145ee8a0b729372d44b784fe5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::scc_map</name>
    <filename>classspot_1_1scc__map.html</filename>
    <class kind="struct">spot::scc_map::scc</class>
    <member kind="typedef">
      <type>std::map&lt; unsigned, bdd &gt;</type>
      <name>succ_type</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a17aac9702fe2324de936cd807ff0810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; bdd, bdd_less_than &gt;</type>
      <name>cond_set</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a64b90ed2de9ef471685af4f3b6f19dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>scc_map</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a6b698d7c3a99a29bf516e912977dbf57</anchor>
      <arglist>(const tgba *aut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~scc_map</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a52ab821c52cd6751c5d858a520e32443</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_map</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>aa33121e63cff2f3bb172010358e493aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tgba *</type>
      <name>get_aut</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a8c9563333308a4e924035be25e2265fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>scc_count</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a4eda9c8d5cf2f5ecfe67990d34c8c586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>initial</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a501ebdcc5f219e29cdc249f699720aa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const succ_type &amp;</type>
      <name>succ</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a9224f6ed62e803a07ff2bcf78c2ba67b</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trivial</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a4a1b0c6346151aadeb4baeed4e5c3423</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepting</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a797209aa8f668c819a9abdb1cbc1e67a</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>const cond_set &amp;</type>
      <name>cond_set_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a881c60367dce7b10b575bea66e131624</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>ap_set_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a7e7dd9ee5500322c785798a216dff42c</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>aprec_set_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>ac16a077904059733982206cb3d664923</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>acc_set_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>ad7683fdee7cefca72f8a9b270b944dc7</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>useful_acc_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>acc422ce1dae072d752c6b82d61ab98a3</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; const state * &gt; &amp;</type>
      <name>states_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a3b8792230732cf9d26eaf4cad048948f</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>const state *</type>
      <name>one_state_of</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a93c95445b7fb64d9d1a0ef7cf8aad27b</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>scc_of_state</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a2a04c0d560f42b77e979f93cc04117ce</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>self_loops</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>ade10989447f3deac378c2e9e922cb651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; scc &gt;</type>
      <name>stack_type</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>adbe095b9a2b6426bd46ca17c6a018547</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Sgi::hash_map&lt; const state *, int, state_ptr_hash, state_ptr_equal &gt;</type>
      <name>hash_type</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a630f053915b46ad47e5d7020324603f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; const spot::state *, tgba_succ_iterator * &gt;</type>
      <name>pair_state_iter</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a79b72f447b24c7876541969a6f7ee634</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; scc &gt;</type>
      <name>scc_map_type</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a21f50370c6e9f5980d9d8461337eff4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bdd</type>
      <name>update_supp_rec</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a5d79e85ade12411407134223e9d67118</anchor>
      <arglist>(unsigned state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>relabel_component</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>aebbdda32fe54fa5a5535ed88548241db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const tgba *</type>
      <name>aut_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a0bceb76e4272a80687a2e2879e2e39b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>stack_type</type>
      <name>root_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>abb64d1937d8a64afb0488f083e63a65a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; bdd &gt;</type>
      <name>arc_acc_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>ac08c96ec8623c565acc6a4cd756cda55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; bdd &gt;</type>
      <name>arc_cond_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a8b4c532faa40c9dc03bdc50434a2f06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hash_type</type>
      <name>h_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a1bd09f0557e4c6cb1b404cb72184273a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>num_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>accf96b074da90b704b406776fb249dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stack&lt; pair_state_iter &gt;</type>
      <name>todo_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a1456cecd588df618c82c4c18e062995f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scc_map_type</type>
      <name>scc_map_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a4337cf65172aefd3c385839429bb5f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>self_loops_</name>
      <anchorfile>classspot_1_1scc__map.html</anchorfile>
      <anchor>a6576477c277cb5621bb1bcc3b953c71f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::scc_map::scc</name>
    <filename>structspot_1_1scc__map_1_1scc.html</filename>
    <member kind="function">
      <type></type>
      <name>scc</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>ab57df34fe2a825b37c13a7bbacc062e0</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>a0ac4b2cb3be8f75a58b601e4eeb73447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>acc</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>a49cd1138b3aa98fff2d9d557eaf9d2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; const state * &gt;</type>
      <name>states</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>ab2804b213a89e61a77b4b0cccdb189a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cond_set</type>
      <name>conds</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>a81f43b7400f58d689f02374c9a91b9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>supp</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>abbe8efeb92c6ddcec45e628006fb40ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>supp_rec</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>ac9f425e221eed43fab64b19b372da659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>succ_type</type>
      <name>succ</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>aab43767a2260a4e70f277732646d6214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>trivial</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>a659a7d473b579a0f00405c54b1542133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bdd</type>
      <name>useful_acc</name>
      <anchorfile>structspot_1_1scc__map_1_1scc.html</anchorfile>
      <anchor>afd38ac4ffc5d5066444a3ee5b397cf81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::tgba_statistics</name>
    <filename>structspot_1_1tgba__statistics.html</filename>
    <member kind="function">
      <type></type>
      <name>tgba_statistics</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>aa87226733d69a8eaad6b356f21fc090a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>a6e370c548f4098e91497a5c0e3df549d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>a1f65ce745d9e9bb6d81ea61f9bace9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>a6f789b90914f70873393efc5dca88e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::tgba_sub_statistics</name>
    <filename>structspot_1_1tgba__sub__statistics.html</filename>
    <base>spot::tgba_statistics</base>
    <member kind="function">
      <type></type>
      <name>tgba_sub_statistics</name>
      <anchorfile>structspot_1_1tgba__sub__statistics.html</anchorfile>
      <anchor>a033fde9f393594c2c0f3fc5fc6433317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>structspot_1_1tgba__sub__statistics.html</anchorfile>
      <anchor>a8e12563522fbfd3f48d904ce7b1b3274</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>sub_transitions</name>
      <anchorfile>structspot_1_1tgba__sub__statistics.html</anchorfile>
      <anchor>a98ba8c9cfd351dfc81948d9a5bffb480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>transitions</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>a1f65ce745d9e9bb6d81ea61f9bace9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>states</name>
      <anchorfile>structspot_1_1tgba__statistics.html</anchorfile>
      <anchor>a6f789b90914f70873393efc5dca88e53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::printable_formula</name>
    <filename>classspot_1_1printable__formula.html</filename>
    <base>printable_value&lt; const ltl::formula * &gt;</base>
    <member kind="function">
      <type>printable_formula &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1printable__formula.html</anchorfile>
      <anchor>aef9be5c69057ed49868af090f5d93dcd</anchor>
      <arglist>(const ltl::formula *new_val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classspot_1_1printable__formula.html</anchorfile>
      <anchor>a7a54375f07556096ca84d3b3e38263e1</anchor>
      <arglist>(std::ostream &amp;os, const char *) const </arglist>
    </member>
    <member kind="function">
      <type>const const ltl::formula *&amp;</type>
      <name>val</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>acc843a6e7cb68136b2fa953a7c7c903d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ltl::formula *&amp;</type>
      <name>val</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>abd2cd01a26798e22d0fc3dddf2f41d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const const ltl::formula *&amp;</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>ad237e9044fc47782c0374e7bda371352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const ltl::formula *&amp;</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>a1490ad89863e67e79541db0bd5f4c1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ltl::formula *</type>
      <name>val_</name>
      <anchorfile>classspot_1_1printable__value.html</anchorfile>
      <anchor>a9762cf71fc367d8237907fb87f34d78b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::stat_printer</name>
    <filename>classspot_1_1stat__printer.html</filename>
    <base protection="protected">spot::formater</base>
    <member kind="function">
      <type></type>
      <name>stat_printer</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a0cea1b976c47e23e0b0a6548dcef00f8</anchor>
      <arglist>(std::ostream &amp;os, const char *format)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>ad7ae6801259cfb746a56e707a92e27f1</anchor>
      <arglist>(const tgba *aut, const ltl::formula *f=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prime</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>af760bacb505f4262d8ba966993b16253</anchor>
      <arglist>(const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prime</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>ad4519a348ab6df362c10dab6d3b60b35</anchor>
      <arglist>(const std::string &amp;fmt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a3ee523bf70b7d9ba9e350534334e2633</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declare</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a1fd3752a72f250ba8d73cbbede1d9868</anchor>
      <arglist>(char c, const printable *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_output</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a2d321a5ed339b3bf33869dc3c8933e2e</anchor>
      <arglist>(std::ostream &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a64b02cc1c3804b490463888757be35bb</anchor>
      <arglist>(const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a2aec18e8b23e0fff4e6641846e16d67d</anchor>
      <arglist>(std::ostream &amp;output, const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a5bae69390fc6e76ceea86eca57cbf888</anchor>
      <arglist>(const std::string &amp;fmt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>format</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>af6cabca4ec183a6fdf0827575516b43b</anchor>
      <arglist>(std::ostream &amp;output, const std::string &amp;fmt)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>output_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>acacdc5366d3026ef162461e250c42fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>pos_</name>
      <anchorfile>classspot_1_1formater.html</anchorfile>
      <anchor>a1ea9b26762ef5b3abf5bc388b6a2a009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char *</type>
      <name>format_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a38a72c2df1d5be67a2170905045e02c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_formula</type>
      <name>form_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a42f073e43963095ce8f8bea5ee98acd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>states_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a99e17b7af868dfa970749844a8e444c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>edges_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a088f370904656ef9d8f95f82ae20634c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>trans_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a42937d9261a5d6d3923b33f22ba2c4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>acc_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>aa508b87350df41eae5e0ceadc4ad953e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>scc_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a9cedd32bdec8e82439a768d4d43b3b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>nondetstates_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a8fea1e08d486728a03a313e6d78dd15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>printable_value&lt; unsigned &gt;</type>
      <name>deterministic_</name>
      <anchorfile>classspot_1_1stat__printer.html</anchorfile>
      <anchor>a1d579cb1e28a4ea3d19b75858db34acd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::weight</name>
    <filename>classspot_1_1weight.html</filename>
    <member kind="function">
      <type></type>
      <name>weight</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a8ec48103bbf49e3362dba6c3a43ec9ca</anchor>
      <arglist>(const bdd &amp;neg_all_cond)</arglist>
    </member>
    <member kind="function">
      <type>weight &amp;</type>
      <name>operator+=</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a06d51ff55f29297828cccb306700d7f0</anchor>
      <arglist>(const bdd &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>weight &amp;</type>
      <name>operator-=</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a7eca972118d15fc6c951bcf422676b75</anchor>
      <arglist>(const bdd &amp;acc)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>operator-</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a705d79b4f7c9bd4b220df93696f608f6</anchor>
      <arglist>(const weight &amp;w) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; int, int &gt;</type>
      <name>weight_vector</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>add7a3a5521c457495ee82ac845019ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>inc_weight_handler</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a39e8672571c340287b28251340327318</anchor>
      <arglist>(char *varset, int size)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>dec_weight_handler</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a4f105303719bd2ab4d88d1ae29a704dc</anchor>
      <arglist>(char *varset, int size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>weight_vector</type>
      <name>m</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>aca7ddf550b6b8ee3df88416838568f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd</type>
      <name>neg_all_acc</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>abfe7971d6d67b81ad2aca6c97b9b374f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static weight_vector *</type>
      <name>pm</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a1da581ec507a702be3f1f9dfc1395a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classspot_1_1weight.html</anchorfile>
      <anchor>a5cfdc8dedccf19d15b2fce8c75cf868a</anchor>
      <arglist>(std::ostream &amp;os, const weight &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::gspn_exception</name>
    <filename>classspot_1_1gspn__exception.html</filename>
    <member kind="function">
      <type></type>
      <name>gspn_exception</name>
      <anchorfile>classspot_1_1gspn__exception.html</anchorfile>
      <anchor>ae1ef4e3b5c03c87d7d6bf01cf5c23f65</anchor>
      <arglist>(const std::string &amp;where, int err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_err</name>
      <anchorfile>classspot_1_1gspn__exception.html</anchorfile>
      <anchor>a2da1c19f559b7d014cadbee960b22d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_where</name>
      <anchorfile>classspot_1_1gspn__exception.html</anchorfile>
      <anchor>a66694d059f73f14e61230050290f5da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>err_</name>
      <anchorfile>classspot_1_1gspn__exception.html</anchorfile>
      <anchor>aa573103d82b05f7124870d49a173f83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>where_</name>
      <anchorfile>classspot_1_1gspn__exception.html</anchorfile>
      <anchor>ab539155ee271d6d02261517766968df5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::gspn_interface</name>
    <filename>classspot_1_1gspn__interface.html</filename>
    <member kind="function">
      <type></type>
      <name>gspn_interface</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>a3f504fcfdb56d5852e8cd5c984e99c59</anchor>
      <arglist>(int argc, char **argv, bdd_dict *dict, ltl::declarative_environment &amp;env, const std::string &amp;dead=&quot;true&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~gspn_interface</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>a6e692261f65e49bde240afc51800ead2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>a21feb10dc75712cadd24c34ba209919b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>a8a3c7a717be4930ec163481276928147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ltl::declarative_environment &amp;</type>
      <name>env_</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>a33c2f439f811f77fee8ecaa03d3063b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>dead_</name>
      <anchorfile>classspot_1_1gspn__interface.html</anchorfile>
      <anchor>ab8010a8f917077a05b0b31646a10d222</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::gspn_ssp_interface</name>
    <filename>classspot_1_1gspn__ssp__interface.html</filename>
    <member kind="function">
      <type></type>
      <name>gspn_ssp_interface</name>
      <anchorfile>classspot_1_1gspn__ssp__interface.html</anchorfile>
      <anchor>ac3925299e2694d94afb003f95238afa3</anchor>
      <arglist>(int argc, char **argv, bdd_dict *dict, const ltl::declarative_environment &amp;env, bool inclusion=false, bool doublehash=true, bool pushfront=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~gspn_ssp_interface</name>
      <anchorfile>classspot_1_1gspn__ssp__interface.html</anchorfile>
      <anchor>a80cc1869602527d252cd6edf37518827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tgba *</type>
      <name>automaton</name>
      <anchorfile>classspot_1_1gspn__ssp__interface.html</anchorfile>
      <anchor>a8aec366a85d2eb8daa08ff9c93e36eef</anchor>
      <arglist>(const tgba *operand) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1gspn__ssp__interface.html</anchorfile>
      <anchor>a96c14a3b951283db8022e4af767ae31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ltl::declarative_environment &amp;</type>
      <name>env_</name>
      <anchorfile>classspot_1_1gspn__ssp__interface.html</anchorfile>
      <anchor>a554f835a25b16430b19e6a56c82cd823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>spot::eltl</name>
    <filename>namespacespot_1_1eltl.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; std::string, std::string &gt;</type>
      <name>spair</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf0c33c18fcffd60a2c676bdc6b5214de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; eltlyy::location, spair &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga502251e9b247bf1f614b151254048b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga017167786b87df9a15ec651897ed5cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_file</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaa412b16e3eaa3d209baf83cb6e697161</anchor>
      <arglist>(const std::string &amp;filename, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaf7928088c7a4d788cbef32258bb4875e</anchor>
      <arglist>(const std::string &amp;eltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga12db416891d2b540640c434afd0e5859</anchor>
      <arglist>(std::ostream &amp;os, parse_error_list &amp;error_list)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>spot::ltl</name>
    <filename>namespacespot_1_1ltl.html</filename>
    <namespace>spot::ltl::formula_tree</namespace>
    <class kind="class">spot::ltl::atomic_prop</class>
    <class kind="class">spot::ltl::automatop</class>
    <class kind="class">spot::ltl::binop</class>
    <class kind="class">spot::ltl::bunop</class>
    <class kind="class">spot::ltl::constant</class>
    <class kind="class">spot::ltl::formula</class>
    <class kind="struct">spot::ltl::formula_ptr_less_than</class>
    <class kind="struct">spot::ltl::formula_ptr_hash</class>
    <class kind="class">spot::ltl::multop</class>
    <class kind="class">spot::ltl::nfa</class>
    <class kind="class">spot::ltl::succ_iterator</class>
    <class kind="class">spot::ltl::ref_formula</class>
    <class kind="class">spot::ltl::unop</class>
    <class kind="struct">spot::ltl::visitor</class>
    <class kind="class">spot::ltl::declarative_environment</class>
    <class kind="class">spot::ltl::default_environment</class>
    <class kind="class">spot::ltl::environment</class>
    <class kind="class">spot::ltl::ltl_file</class>
    <class kind="class">spot::ltl::clone_visitor</class>
    <class kind="class">spot::ltl::language_containment_checker</class>
    <class kind="class">spot::ltl::unabbreviate_logic_visitor</class>
    <class kind="class">spot::ltl::mark_tools</class>
    <class kind="class">spot::ltl::postfix_visitor</class>
    <class kind="class">spot::ltl::random_formula</class>
    <class kind="class">spot::ltl::random_ltl</class>
    <class kind="class">spot::ltl::random_boolean</class>
    <class kind="class">spot::ltl::random_sere</class>
    <class kind="class">spot::ltl::random_psl</class>
    <class kind="class">spot::ltl::simplify_f_g_visitor</class>
    <class kind="class">spot::ltl::ltl_simplifier_options</class>
    <class kind="class">spot::ltl::ltl_simplifier</class>
    <class kind="class">spot::ltl::unabbreviate_ltl_visitor</class>
    <member kind="typedef">
      <type>std::pair&lt; ltlyy::location, std::string &gt;</type>
      <name>parse_error</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9bf19c38b4ae7d74e6a9633ed360c147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; parse_error &gt;</type>
      <name>parse_error_list</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga9eb0f7867a212f92b0fd64a6ac5a12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; const atomic_prop *, formula_ptr_less_than &gt;</type>
      <name>atomic_prop_set</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga8347f76c4cd9c56970ba55c8fb40ab1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sgi::hash_map&lt; const formula *, const formula *, ptr_hash&lt; formula &gt; &gt;</type>
      <name>snf_cache</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acb41ffa774442ee155cc23a60c0a78a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>reduce_options</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>gac9e66395d0e9cb870fa7b1ca208b70ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_None</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caabff3607cc02f12d6756d0244a8f5464a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Basics</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caab83ef042ab620af2f258a817e95f8f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Syntactic_Implications</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22d75bbadb5b030981574ae49668ad94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Eventuality_And_Universality</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caaabb627af73b5817a542506be482f396d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa22286d57705e7511f13a75c05ac0a39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_Containment_Checks_Stronger</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa0721d15d048b11cfe234f14850dbc9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reduce_All</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ggac9e66395d0e9cb870fa7b1ca208b70caa1629bc689540d42e2f86eea77a6cd275</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>relabeling_style</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Abc</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13a5611119d586b70ace29dbf1c4678e6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Pnn</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab49c69f44a36589af8e9d1539d5e4c13a92ec2e5d601c09c57173015e51b675cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop *</type>
      <name>is_atomic_prop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a6ebb15622f493a6e9d8fe698c4d3af9e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aec170dbcfc4ed607f2e2c3fb8cb2264e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>afe008683046960e5c1be4aa9da7e7116</anchor>
      <arglist>(const formula *f, binop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_binop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>adeb0b3c086e4840b15469fc7c5ba8ffb</anchor>
      <arglist>(const formula *f, binop::type op1, binop::type op2)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_U</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a7f69b252a63c598fb4a8a1cd3a43b54a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_M</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>af2c3a3b78c2394cb420377732df53643</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_R</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a29e64397d9e57f5ef8d91cff0794d430</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const binop *</type>
      <name>is_W</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a99c281102d5b23a2d24079cf66c8facd</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_bunop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a87876bf8eb00438107b391a6db369146</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_bunop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>add6ce0b867fb1a665da9a97fc622367e</anchor>
      <arglist>(const formula *f, bunop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_Star</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a28aede25875d04c53587f8ddaec2e033</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const bunop *</type>
      <name>is_KleenStar</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a51d0620bc2a141cf443a7dc73f9d7237</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const constant *</type>
      <name>is_constant</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a3ef6c967bc0d99bc8eab1c81d7a7eab1</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print_formula_props</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a5ebe7a0005ae56f57d6e085eddb453e1</anchor>
      <arglist>(std::ostream &amp;out, const formula *f, bool abbreviated=false)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>list_formula_props</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a53b023ef17f12698ac0721875482a394</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acf7f6187f2e0beb266738615ee380e5a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a72cf9d5651a25c79009864a5bb93deff</anchor>
      <arglist>(const formula *f, multop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_multop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa7830e6d2f0f4684e769df785ef8c9d8</anchor>
      <arglist>(const formula *f, multop::type op1, multop::type op2)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_And</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa208803abec5d0085c1f635909f44cdb</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_AndRat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a89dd541d50e9f0882cf9a879e3d0e2cc</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_AndNLM</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a20f7e738f8c27a3d296b519b8c8e3796</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Or</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a0ffb29ec0246eedf10abe95544bacfc5</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_OrRat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a684d629d37b85ad8b66f32cb29e1c1e6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Concat</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a7db8010a9f32fbca50cd9075e2ba8473</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const multop *</type>
      <name>is_Fusion</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a67a179752351bf2d4e1e6df19013413a</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_unop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>ab5ba210cfb0a509be848ca2f9ea1d755</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_unop</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>abc75bf92dfd70c0a414db946cc05d469</anchor>
      <arglist>(const formula *f, unop::type op)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_Not</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a3ca8bd47d984aaf3d8a758a0ee0ff436</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_X</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a599464ed25bf27b8a37b8a201bca64d1</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_F</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa08bd62932d13cfad5aacde4dded31b2</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_G</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a10e49587fe0e60b0229eb08c372d98fc</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_GF</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a1d0cc2d86dc01d7bef528fcbfbf784a6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const unop *</type>
      <name>is_FG</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a08a5e79c0220c641b8bfe8a9252f2cbd</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga38985ad6b8ca53a130115aff8a055036</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_boolean</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga996c2f45174a66ee4ab85958900a1417</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_lbt</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga127ae53eca0defd994401f3919e2a0d2</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>parse_sere</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga6a393a2f2a36d1f4aad872cb12ae76bf</anchor>
      <arglist>(const std::string &amp;sere_string, parse_error_list &amp;error_list, environment &amp;env=default_environment::instance(), bool debug=false, bool lenient=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>format_parse_errors</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga5535f3e1304089c8c6e13f564920ce00</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;input_string, const parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fix_utf8_locations</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga8fb520dd0b7b2ca3d828ea6cdfaf49b6</anchor>
      <arglist>(const std::string &amp;ltl_string, parse_error_list &amp;error_list)</arglist>
    </member>
    <member kind="function">
      <type>atomic_prop_set *</type>
      <name>atomic_prop_collect</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga335fb11ef18d07a729b03ee76719ead4</anchor>
      <arglist>(const formula *f, atomic_prop_set *s=0)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>atomic_prop_collect_as_bdd</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga34d27c315e9f6a09e7909066ab0f081f</anchor>
      <arglist>(const formula *f, const tgba *a)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga4cbd1bf9c7d993d9fe093578b30712a6</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>reduce_tau03</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>a15bfcd6e1d7b386f8afa1cc785894ba2</anchor>
      <arglist>(const formula *f, bool stronger=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>group__ltl__essential.html</anchorfile>
      <anchor>ga7dfba082e4a6aca346befcc46f87e358</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dotty</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga7e27d31b2209954c1d57d3b8b5224473</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gaaf316635f1320fa38885fa89e23e2098</anchor>
      <arglist>(std::ostream &amp;os, const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga49b892ff2e4d9aec61c271959460ad12</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_lbt_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gae7e461087003b093571f87640dab9045</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>gabf324b4e946522d1b4caf3ce003ec903</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length_boolone</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga72b56983a73048f0a303323fd4463fbf</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_logic</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga802942a9f38ff14be3466c6a00705c9e</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>negative_normal_form</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga493ea666b2b7bea9b18d5ee9db2969b2</anchor>
      <arglist>(const formula *f, bool negated=false)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>reduce</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga75beb5d36830e9a795e96a3a64f032c1</anchor>
      <arglist>(const formula *f, int opt=Reduce_All)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga3210a9b433640efe1ef74e0da6c678e5</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>group__ltl__misc.html</anchorfile>
      <anchor>ga10c79e8a8c5b58fa77cbb6dab5857083</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>relabel</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga27c4d86c1432210a1e02a1fcd3fec2c3</anchor>
      <arglist>(const formula *f, relabeling_style style)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>simplify_f_g</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga900c80d1bc18bc999de94de19aafa6ad</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>star_normal_form</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>acc1cf3cb0551cfab387565570fa21ebf</anchor>
      <arglist>(const formula *sere, snf_cache *cache=0)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0f6fa636f033da650016c836d6c94215</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga41c884625ab680e8b8e3f2c60d58fd0e</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga839a34e0b8a9261d039177a3546f5501</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_utf8_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga2cd5cc7892c33dfbedafe28e102f0834</anchor>
      <arglist>(const formula *f, bool full_parent=false, bool ratexp=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga0a8dd6d9bb385a69fabea697df9be925</anchor>
      <arglist>(const formula *f, std::ostream &amp;os, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_spin_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga62c230f1cb3170370c25d8bffb4ea141</anchor>
      <arglist>(const formula *f, bool full_parent=false)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>ga91c4e60cf307d560694b163676ec2c6a</anchor>
      <arglist>(const formula *f, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_wring_string</name>
      <anchorfile>group__ltl__io.html</anchorfile>
      <anchor>gab337644a8e96528226e22cf166dc0977</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_ltl</name>
      <anchorfile>namespacespot_1_1ltl.html</anchorfile>
      <anchor>aa20f1c7fe556be8d3864b12c09efc2bb</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>unabbreviate_wm</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga133f7bfb31a5e4a1e98be27edad69217</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::atomic_prop</name>
    <filename>classspot_1_1ltl_1_1atomic__prop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a72e2e15db86934db70a3bae58e2f6114</anchor>
      <arglist>(visitor &amp;visitor) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>ad6a64b71a4ea8df318337821305cf3ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>environment &amp;</type>
      <name>env</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>ae61a369d3df8fb5304d07ee25e0be25d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a57d23aab781a7230bd25e14f8da15e88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const atomic_prop *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a31ecd65b281d5f471df8c9a2cef00f03</anchor>
      <arglist>(const std::string &amp;name, environment &amp;env)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a7f519f7edb2766b90e28edc1e28d6917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a7aa747d99e75f74ad2bc0d886647e61c</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; std::string, environment * &gt;</type>
      <name>pair</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a28a571f2664ae32b40af1ccabcf2ce72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; pair, const atomic_prop * &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>ad764e5ee8a67f34a330608f1400d15d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>atomic_prop</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a02310138eed43b1639665f5b30b1939a</anchor>
      <arglist>(const std::string &amp;name, environment &amp;env)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~atomic_prop</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a1bea4a6631d6e77ac0575ea3fbe2164e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>adf723d974658c5ededcf19955402c210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a5abe1df4d378de9d57f42d59c7954a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>environment *</type>
      <name>env_</name>
      <anchorfile>classspot_1_1ltl_1_1atomic__prop.html</anchorfile>
      <anchor>a6057413492eb4c968f8edef08b15c8bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::automatop</name>
    <filename>classspot_1_1ltl_1_1automatop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <class kind="struct">spot::ltl::automatop::tripletcmp</class>
    <member kind="typedef">
      <type>std::vector&lt; const formula * &gt;</type>
      <name>vec</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>ab66a93cf0d38d1cc8278cb48b0b8d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>af127a74a970803c9eab1ee8b30428e8d</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a98e97615f70c9ea4f998d6975d263934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>nth</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a6730cc61a70ff0ee295f91a130788400</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>const spot::ltl::nfa::ptr</type>
      <name>get_nfa</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a3be1a04aa5bb8649021644bb53d72122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_negated</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>aac4399fe7b8af8547056d82b036af2c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a0e7df583f8ed23dd0938b82412cf75ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const automatop *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a8e6bc33e8a9ac8a2e6b60e6c27b549c5</anchor>
      <arglist>(const nfa::ptr nfa, vec *v, bool negated)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a37f14507dc0aa468848340cc377728d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a46c8ce1e2af2efc18fb49a7c3b8a6ee3</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; std::pair&lt; nfa::ptr, bool &gt;, vec * &gt;</type>
      <name>triplet</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a1273daca0869ab9146e1404732733b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; triplet, const automatop *, tripletcmp &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a44880e23de10d1c5e70f301c93d0aa08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>automatop</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a3d07b69eac690245bd99bacec668fef9</anchor>
      <arglist>(const nfa::ptr, vec *v, bool negated)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~automatop</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a2f181a3c535a7614f2044c4e29171b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a90445f73aa4523ba470de9ee25356da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const nfa::ptr</type>
      <name>nfa_</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>a420076f934f276632a845d200b3fa7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vec *</type>
      <name>children_</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>af6e7094a9fd0791fbcd69e39907d7c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>negated_</name>
      <anchorfile>classspot_1_1ltl_1_1automatop.html</anchorfile>
      <anchor>adc13fbf7a4dcf814db5339c5c801bf3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::automatop::tripletcmp</name>
    <filename>structspot_1_1ltl_1_1automatop_1_1tripletcmp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1ltl_1_1automatop_1_1tripletcmp.html</anchorfile>
      <anchor>a926e368688a88ff8a26cc8a624643cec</anchor>
      <arglist>(const triplet &amp;p1, const triplet &amp;p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::binop</name>
    <filename>classspot_1_1ltl_1_1binop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <member kind="enumeration">
      <name>type</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Xor</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a71177fc6c4bfbc11a0fd7acceeed1ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Implies</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2ac5d2a034f0dd62b98fe785d0372c0c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Equiv</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a0177c3febeabb4808b46226565b8df22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>U</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2ab01994b5e43401a5cf70fc7ef1599119</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>R</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a2912f480a149c4899b9f61f1a5975c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>W</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a1838d447207f27c06df827716ae393b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2aeca825f59e0628f120869c38c1332432</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EConcat</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a556e405ec5227857780ce4668a140b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EConcatMarked</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2a285ca2f52a1cf305996911b759b30c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UConcat</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a7c5967c6908151a90ff72f210bfb59a2aa5c22ec5f0538b7593a31404717ce409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>add418be2b0cbd59fc568c7efe65d7afd</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>first</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a930b3e135d57e56705a0628998e182c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>second</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a3a338b2bd7de07b52549f13b2c5752eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>type</type>
      <name>op</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a1e32c8b55b2d5512880eab572a2a787d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>op_name</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a761edd641d03b63371b267223091c783</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>aa2442c7e50e4429bc9d2feb9dbc9b9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>afef4f363766ec6fd4d14bd92e8f487be</anchor>
      <arglist>(type op, const formula *first, const formula *second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>ae2374ced030c8da8cadf295f6fcac010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a5e0305d43188330be6c2a8f88a21b669</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; const formula *, const formula * &gt;</type>
      <name>pairf</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>abf9cbd065b88c428802e715ccb6e253e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; type, pairf &gt;</type>
      <name>pair</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a3484b43ead650bad7e0752b4efe803b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; pair, const binop * &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a27e99e93b4fc80ecd5041e9241f9f4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>binop</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>af9999b0bc3fb4b0ee5d4ffce3b35c6e7</anchor>
      <arglist>(type op, const formula *first, const formula *second)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~binop</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a26cdd7b747a37cb4e274d17d30f24fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>aafdae9c944f5e8078d844b16f1afac79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>type</type>
      <name>op_</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a9880620b2cebccb9e8f6c15f684af6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const formula *</type>
      <name>first_</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a05df705bf897e37b1dcd3a421a06cbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const formula *</type>
      <name>second_</name>
      <anchorfile>classspot_1_1ltl_1_1binop.html</anchorfile>
      <anchor>a8da1662a54ffac3976780062df0bac21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::bunop</name>
    <filename>classspot_1_1ltl_1_1bunop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <member kind="enumeration">
      <name>type</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a752881b5f4c82ab3d4172af81308f6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Star</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a752881b5f4c82ab3d4172af81308f6d7acf3c226bac2d73f711f18a6a384c70b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a9a3b2cb8c1ecadb5865e7cb1af50a908</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>child</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>afbe203d5455e1bed86a81e1433daf4ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>min</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>acff397dd465f1fd7de282ebff4565b99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>max</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>aa73c82483e6f212ccc2dccb175f236db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>format</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>aed0cc1e2df0592f672d5a61b37da0a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>type</type>
      <name>op</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a516c969b221b56f91ac4b607b1b344bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>op_name</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a8b6d82af0178d3f37ea7ad852a61cace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a3f901b52fd1a59e59fbd2facd4b81e8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>acd9e5bd3c7d5ca39b7ab8ebfd55bb90f</anchor>
      <arglist>(type op, const formula *child, unsigned min=0, unsigned max=unbounded)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>sugar_goto</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a4dae737061028e77385b6e141a06d4f1</anchor>
      <arglist>(const formula *child, unsigned min=1, unsigned max=unbounded)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>sugar_equal</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>ac886f38b2317237e35962a088ee497cb</anchor>
      <arglist>(const formula *child, unsigned min=0, unsigned max=unbounded)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a45f054a0023cf07a534753a6f593404d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a7b6dd801a2bfc09125670b1def4fa2a3</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>one_star</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a15f6541c02f453355b66d519f433878f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>unbounded</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a6997bea0ac1c24ad395f89845de18f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; unsigned, unsigned &gt;</type>
      <name>pairu</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a529788677b00814fe397f14641779158</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; type, const formula * &gt;</type>
      <name>pairo</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a402c4e2c4e41bccd0ff099997723cca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; pairo, pairu &gt;</type>
      <name>pair</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a9c94761f9982692f37d8a80e9cbb5b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; pair, const bunop * &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a881d93db35adf598a21e9e10ba4ca41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>bunop</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a2d38687fbf3469132073fa98980890f3</anchor>
      <arglist>(type op, const formula *child, unsigned min, unsigned max)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~bunop</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a2eaa30aaf45bf01461946c652b0612e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a2fc939e09ff6e3937cd4fcf8e39ca77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>type</type>
      <name>op_</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a8099598b915e19fa681d61393ec50bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const formula *</type>
      <name>child_</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>afd4d4e61e44c662494b1d92d036cb3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>min_</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a55ae8ac79fefd0327657fdb2438cd493</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>max_</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a629af4ae94583f20b12f27f5d2d4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const formula *</type>
      <name>one_star_</name>
      <anchorfile>classspot_1_1ltl_1_1bunop.html</anchorfile>
      <anchor>a1d02ee29e93db34af98ee6015feefbeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::constant</name>
    <filename>classspot_1_1ltl_1_1constant.html</filename>
    <base>spot::ltl::formula</base>
    <member kind="enumeration">
      <name>type</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a3a23c9193ea7c7513518bfbb38b02833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>False</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a3a23c9193ea7c7513518bfbb38b02833aef70d3cc109f761554b5e9cb23798236</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>True</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a3a23c9193ea7c7513518bfbb38b02833a8a0b88d378578f5b5900fb67221cd592</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EmptyWord</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a3a23c9193ea7c7513518bfbb38b02833a69eb850a0a01a19d358120997b277b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>afc566286f1ab1ac07068c5c06ef8dce5</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>type</type>
      <name>val</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a7866b696a1af367f2611e5967aae0d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>val_name</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a1cd1b6154e4c6e9eaa5dd7048fca9815</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a390b246ef39e3a26edf4a05c337d1fee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constant *</type>
      <name>true_instance</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a343dd7a20e2df06851836a6bd7fc1b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constant *</type>
      <name>false_instance</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a0ddc280986f98b088800542d8012b6f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constant *</type>
      <name>empty_word_instance</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a7b756eb41e76457d074cf5966df31686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>constant</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a83153ebfd9015aec95c9881e0f77fbc5</anchor>
      <arglist>(type val)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~constant</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>aa3211b7e05643d59c4850edc67ded15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1f2fc388e38e1a9f1f868a0068a2ed4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a501a18656f827e78a6f338c83414f5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>type</type>
      <name>val_</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a1a18193f8242096e6e87b1ec815d2d14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constant</type>
      <name>true_instance_</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>afed617f28958881fada287a55c1cb202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constant</type>
      <name>false_instance_</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>a64f7b6a2d83a59f3b0aed4848f0ac792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static constant</type>
      <name>empty_word_instance_</name>
      <anchorfile>classspot_1_1ltl_1_1constant.html</anchorfile>
      <anchor>aa1cc1d67fa509e0c39b3e46146d82028</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::formula</name>
    <filename>classspot_1_1ltl_1_1formula.html</filename>
    <class kind="struct">spot::ltl::formula::ltl_prop</class>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1424f7c2d139793094f571d9b8992fb1</anchor>
      <arglist>(visitor &amp;v) const =0</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad2be1ef6bdd40768e21a1b5fc7d0c96c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d3349c169ca81b7cf58ae94488c11eb</anchor>
      <arglist>(opkind k)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a2b0d3cd1db7797aa154d3348d7cfa1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1f2fc388e38e1a9f1f868a0068a2ed4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a501a18656f827e78a6f338c83414f5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>opkind</type>
      <name>kind_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af39bba86975cdcc6b40fb8e67785d052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static size_t</type>
      <name>max_count</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af35ebf6adc6d0cbb0f2eb4b80e4e14d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula::ltl_prop</name>
    <filename>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>boolean</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a7d53c00e791c5ce9edf25fcd81d9071d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sugar_free_boolean</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a81acca84ca4a12ebf298acd76388f277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>in_nenoform</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a229b9dc73e884f7b795f0a17ab5463b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>X_free</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a6e40dd58679d900da93fac0b30264728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sugar_free_ltl</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a4a53337c3a529300f0f3e85c287278c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>ltl_formula</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a175ce3e86bbf80c2f72a19d18af1341f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eltl_formula</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a95c48a91c08e0154585b125cc0a77fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>psl_formula</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a3fa83b7e52829329d84acdf27c62e80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sere_formula</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a319ba67e783f230eb26e372131a2e2d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>finite</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a8f4eeca9c1beecb8381ea2ab0a28d329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>eventual</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>afcd8ac403c9e0f6fe284ba9397343c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>universal</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a9f4ba55d9b3a707746bfcde7a59ac70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>syntactic_safety</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a35d092bc1b509b9cb14d34fd2de6ed4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>syntactic_guarantee</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a8f303366afbd43712baea1ab09545b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>syntactic_obligation</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>aee3b0ff5c52d09f82dfe3a56c5602850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>syntactic_recurrence</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a2f260fe19b34f4521afd32be76fb4b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>syntactic_persistence</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>ac2b8b95b3fecc21df20b5df45dfdd541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>not_marked</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a6426f44752b6f3d8c9968a8598a4389d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>accepting_eword</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>ab8411502835bdcb6bab30bb56c0dba26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lbt_atomic_props</name>
      <anchorfile>structspot_1_1ltl_1_1formula_1_1ltl__prop.html</anchorfile>
      <anchor>a6b87258798aa771042385c13553f94a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_ptr_less_than</name>
    <filename>structspot_1_1ltl_1_1formula__ptr__less__than.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1ltl_1_1formula__ptr__less__than.html</anchorfile>
      <anchor>a0b3fbbe7449d3ca50c52e3d0d96f67b9</anchor>
      <arglist>(const formula *left, const formula *right) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_ptr_hash</name>
    <filename>structspot_1_1ltl_1_1formula__ptr__hash.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1ltl_1_1formula__ptr__hash.html</anchorfile>
      <anchor>a9d98a406db6dde48e664f0c696b56b01</anchor>
      <arglist>(const formula *that) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::multop</name>
    <filename>classspot_1_1ltl_1_1multop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <class kind="struct">spot::ltl::multop::paircmp</class>
    <member kind="enumeration">
      <name>type</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Or</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686feaec9dacb72caa01e417f04a398770b16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrRat</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea099197189237ac474d3b9e49f4a3b5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>And</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea134bbaa37c9a0db99c61af1f61b7f037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AndRat</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea5117bcfb94cd6b43d6e2f2eeb8b3cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AndNLM</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea32cd0b92ca6ea6101c2a5f1a6065c60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Concat</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea9c9f297e12ffadb1afbbffe87ecfb00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fusion</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a7ff9fb342ce923eed135a23285d686fea941feb30221218a6276ee457cf2037d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; const formula * &gt;</type>
      <name>vec</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>ad0313204fe3fe2eb5938a03e4ff72fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>ae5f423f57f51ac5b6e4186735f992863</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a0a9f29f20419757484fee9fd5d672374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>nth</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a825d1e2f5f99488766ea9d897c1774ba</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>all_but</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a3d4132f775e83d7775d8822ca4954393</anchor>
      <arglist>(unsigned n) const </arglist>
    </member>
    <member kind="function">
      <type>type</type>
      <name>op</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a9adb7f5b4fe4616df30c7da5a39ae839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>op_name</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>aa3d7635bc72f66c1af14d9d56ddcca4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a14009f0d040d4eb0c8849f1082273924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a3cddcd6e72fa35eaec4bc1003ee571ed</anchor>
      <arglist>(type op, const formula *first, const formula *second)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>ac47c6b77fc3f46320dadf40417f9a42d</anchor>
      <arglist>(type op, vec *v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a07737a4f338b029504fe22d3dc44e342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a0a7cffb297896b680980f0179268d774</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; type, vec * &gt;</type>
      <name>pair</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>acdc8c90654790dbc39a5024a7f341390</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; pair, const multop *, paircmp &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a43cebf0194b8f7094085e759cb229515</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>multop</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a589dc735daaaa15b658a5be1d3bbd37c</anchor>
      <arglist>(type op, vec *v)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~multop</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a84f15109e2961f1fd1e84c460233580c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a448f320d062b647d7c15ea8de870eb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>type</type>
      <name>op_</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a6bd7bcbfae468e8e11bb7a2b5b9b4856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vec *</type>
      <name>children_</name>
      <anchorfile>classspot_1_1ltl_1_1multop.html</anchorfile>
      <anchor>a6c6cc6d3a375ea04e5bfa076b0e7c1f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::multop::paircmp</name>
    <filename>structspot_1_1ltl_1_1multop_1_1paircmp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structspot_1_1ltl_1_1multop_1_1paircmp.html</anchorfile>
      <anchor>a8a8ff037630272657af86061b4450540</anchor>
      <arglist>(const pair &amp;p1, const pair &amp;p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::nfa</name>
    <filename>classspot_1_1ltl_1_1nfa.html</filename>
    <class kind="struct">spot::ltl::nfa::transition</class>
    <member kind="typedef">
      <type>std::list&lt; transition * &gt;</type>
      <name>state</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a8a1b61dcfb3a46c024f8cb6fa3a28f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; formula_tree::node &gt;</type>
      <name>label</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a318df4735e02e975ab22927dbd747607</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>succ_iterator</type>
      <name>iterator</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a1279d02cf940a04df8507a094fa42485</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; nfa &gt;</type>
      <name>ptr</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ad748fa80673920136eeb2a974d9075f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nfa</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a1f7cf0b77cff16159aacad6ac24a2914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nfa</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a1beacf4f5aa3fa76015f4eb2e4a30667</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_transition</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>aad40d1c2066322645872d75e95489c37</anchor>
      <arglist>(int src, int dst, const label lbl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_init_state</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ac18fad804e71f43a940119f8f613b37a</anchor>
      <arglist>(int name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_final</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>aa1b41a604958222cfa0f8db02a45bdd9</anchor>
      <arglist>(int name)</arglist>
    </member>
    <member kind="function">
      <type>const state *</type>
      <name>get_init_state</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ad2304b7ffcaf21633a9562e66c73b521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_final</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ae8bb8777121775d86bebb1453c033be9</anchor>
      <arglist>(const state *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_loop</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a1430217666a2b8bc73713fc80c3dc617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>arity</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a164536f6643805a75aacab958cfa24ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ad2bff1be23bd062cf2bb7cae1803540a</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a12197fc34b000bdd72691de0f9b5acde</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>format_state</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a8514e4154f55fefbdcc73b15e8e4b707</anchor>
      <arglist>(const state *s) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>get_name</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a35d93f74f06ee11e1d4b7d53f99c42e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a239c07ceabc244ae14809bc8dd4d3183</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; int, state *, Sgi::hash&lt; int &gt; &gt;</type>
      <name>is_map</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a691b500aec84551bcf5eecdbef9e4a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const state *, int, ptr_hash&lt; state &gt; &gt;</type>
      <name>si_map</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ae140407e579001e916cb52651319a6ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>state *</type>
      <name>add_state</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a06a11e2a90e16e5b600472f85892ec3c</anchor>
      <arglist>(int name)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>nfa</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a526b1d9381ae23ee4592c301cd9f67d8</anchor>
      <arglist>(const nfa &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>nfa &amp;</type>
      <name>operator=</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ac9285c74277435fe7ea18d15b629c840</anchor>
      <arglist>(const nfa &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>is_map</type>
      <name>is_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a89822322bb924adf95eb7917302a2d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>si_map</type>
      <name>si_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a78f48149fc570c007ad119985edf3e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>arity_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ae6474ca74a013ade34a8f34d42eaf1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>a4c464a21349379793d1d82f5f47f6d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>state *</type>
      <name>init_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>aa72d5aac98b83b5c20c4eebc6ebdd29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::set&lt; int &gt;</type>
      <name>finals_</name>
      <anchorfile>classspot_1_1ltl_1_1nfa.html</anchorfile>
      <anchor>ae9098b66258a1dbc6e8631dcf2b5f73b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::nfa::transition</name>
    <filename>structspot_1_1ltl_1_1nfa_1_1transition.html</filename>
    <member kind="variable">
      <type>label</type>
      <name>lbl</name>
      <anchorfile>structspot_1_1ltl_1_1nfa_1_1transition.html</anchorfile>
      <anchor>acd7737d17c794b62d5984ccf219d2399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const state *</type>
      <name>dst</name>
      <anchorfile>structspot_1_1ltl_1_1nfa_1_1transition.html</anchorfile>
      <anchor>af245df4381f9eab50a04ef094f226a65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::succ_iterator</name>
    <filename>classspot_1_1ltl_1_1succ__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>succ_iterator</name>
      <anchorfile>classspot_1_1ltl_1_1succ__iterator.html</anchorfile>
      <anchor>adbc4d3b3b9a3d581e7eea007a6453409</anchor>
      <arglist>(const nfa::state::const_iterator s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classspot_1_1ltl_1_1succ__iterator.html</anchorfile>
      <anchor>a34bc347dd13a5d1422f63c600df5ac2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classspot_1_1ltl_1_1succ__iterator.html</anchorfile>
      <anchor>a55d3ec33e003a74bae3f34950689ec5b</anchor>
      <arglist>(const succ_iterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const nfa::transition *</type>
      <name>operator*</name>
      <anchorfile>classspot_1_1ltl_1_1succ__iterator.html</anchorfile>
      <anchor>aaf220940fa54bb953cf6ec694750bdd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>nfa::state::const_iterator</type>
      <name>i_</name>
      <anchorfile>classspot_1_1ltl_1_1succ__iterator.html</anchorfile>
      <anchor>ad8de4721385e3311d15176efae0b3863</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::ref_formula</name>
    <filename>classspot_1_1ltl_1_1ref__formula.html</filename>
    <base>spot::ltl::formula</base>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1424f7c2d139793094f571d9b8992fb1</anchor>
      <arglist>(visitor &amp;v) const =0</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad2be1ef6bdd40768e21a1b5fc7d0c96c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ref_formula</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>af8b205c7e1f4a039189dda5a520fe861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ref_formula</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>abc401a6308cc784de8a0947b634244f7</anchor>
      <arglist>(opkind k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned</type>
      <name>ref_counter_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a9987e5fa9cd3542818521f84ac683d87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::unop</name>
    <filename>classspot_1_1ltl_1_1unop.html</filename>
    <base>spot::ltl::ref_formula</base>
    <member kind="enumeration">
      <name>type</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Not</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bca5c70279f9221ae04c99dfcfb1d8cce21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bca710394e09b867640d569b71577db1a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>F</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bca22dc60c18bb1140957d534dab87a8e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>G</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bcafe9a76cee45f8e8d6f3d970f526090bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Finish</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bcad9dd4152ed2f15913125ea23f65841ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Closure</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bcaf874433b8ea701a79612212945380c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NegClosure</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bca57ab198fbb70fc76da9772569ca72a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NegClosureMarked</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab6cd495a942b8c203f547cccb50916bcafc478a6136c3915b9c738028d6f18e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>opkind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constant</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba923c681db289ce26c9d30c8e2cd4bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AtomicProp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba64397ddd71f78b2e7508f79cae0b5622</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654baf8c23a94e780d218b21c8493fd1e2ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BinOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae811e3074fd4bde9b2f8732d5a7a381c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MultOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba418b6a238689281b64e9a62c9a1511c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUnOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654ba414031ca5ab4eef5eac25eb37990c89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutomatOp</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac82808aaf6b4c6b35989fec75f13654bae055693a330c8f38e80b113ffca33824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>accept</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a23b7e20d030a033e9628791f4aa3db5c</anchor>
      <arglist>(visitor &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>child</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a3855d5c4933c3a0b57a41383e11a275f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>type</type>
      <name>op</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ac8580e6c98e25a768444d4a419ebf3aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>op_name</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ac8efed3eae938137236dbcd35de22fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>dump</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a22d62d8d993add8db16dbe05ecabef56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>clone</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a22895a0683e2947dd56bd661cb372581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5b0bb11f739944460bf63f13f6c9e901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>opkind</type>
      <name>kind</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a23536bf52c04989ad8b31f7089f5a292</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>af5a043e09efe6c128a6daf6d169e9f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a5eeadae30e61d87e3a8620dc8b09a2ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_in_nenoform</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a71033d11fd3b9d4b1677f2e35387fbff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_X_free</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ad5f1ede16540107aff77f58dbd32d0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sugar_free_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7d03721ccde1d1f87fbed61736d508a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1d48d7345e873238c653b443db45a7a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eltl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a96c648af8a7202016392669e65c3a656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_psl_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a0c534935d2450607cbe10aa38f8560c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sere_formula</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6e79749c3aeb12f5023383e43c5b708b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_finite</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab18ed0fd814e81309789213ca7aad409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_eventual</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a32775c79e0a08e928c69669e0e92ce3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_universal</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ada451ff5a87ab82e20035ebcb9c24230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_safety</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ab5853cb67aba76b070aa09eaf1d5bcdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_guarantee</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a564a934850f732d56b4e86195a156e58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_obligation</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a1ad15456ed578eb8f4858b138031e403</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_recurrence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ac31906441452c7e649bcd24fd62e480f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_syntactic_persistence</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a81c520d3680793abed0f42a7cb29b511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_marked</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a448c24edd9e84237e25a73b9d32a9aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>accepts_eword</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>ae5d1e12ffa45478996b01d1ed2832a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_lbt_atomic_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a7bbf98a0021d00e7e4d9807168984b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_props</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a727f20cb5b4c05e23884294006dbbcc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>hash</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a6473df6e9b0a479d3359401f0d9b177a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const formula *</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a0360ef6d4a4e5de32df3115e2439fde2</anchor>
      <arglist>(type op, const formula *child)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>instance_count</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a0c08b2cfc5767255a9096910b287fe42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>dump_instances</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ac06f942b2ffc655579deaee8a63f064f</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; type, const formula * &gt;</type>
      <name>pair</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a47fe6a85660dd8c7669bc8f2a9f9111d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; pair, const unop * &gt;</type>
      <name>map</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a0897261cb29c47bdf59dc555a46d7546</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>unop</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a7ae700d144783b10b4d921175f92c9ed</anchor>
      <arglist>(type op, const formula *child)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~unop</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a30927c2a32a1b733c19841589fb7705a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>ref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a6b5f267272f8b6c362ca02e09d75a5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>unref_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>a01c66aaa7378aa5b7d8b3d914a7cf520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned</type>
      <name>ref_count_</name>
      <anchorfile>classspot_1_1ltl_1_1ref__formula.html</anchorfile>
      <anchor>ae8ae6d071c1846b5e21e8135dd1b2e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>count_</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>a79d5a955150b1aa40ab396a5333eed7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>union spot::ltl::formula::@0</type>
      <name>@1</name>
      <anchorfile>classspot_1_1ltl_1_1formula.html</anchorfile>
      <anchor>aeb18dc130dda684cc54ac3781d011878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>props</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>ab3def6f9c12e6354f13b7ed15f4375b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ltl_prop</type>
      <name>is</name>
      <anchorfile>unionspot_1_1ltl_1_1formula_1_1@0.html</anchorfile>
      <anchor>a8c096c812273d2187575aa66c1262fdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static map</type>
      <name>instances</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>a430de0a2f329f88fa4ff087a9ab95997</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>type</type>
      <name>op_</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>afbba940238b36a0b73a975f03ad90c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const formula *</type>
      <name>child_</name>
      <anchorfile>classspot_1_1ltl_1_1unop.html</anchorfile>
      <anchor>ab66d376ecc9e341f27cc9e53bdc261dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::visitor</name>
    <filename>structspot_1_1ltl_1_1visitor.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~visitor</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>aa41e3c3ecb2e90b636cf1d64fe61970a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>a2be959633ff61a859e3ca4fe2096b5f0</anchor>
      <arglist>(const atomic_prop *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>a353359d1d0006fa8c11f00ab60f55285</anchor>
      <arglist>(const constant *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>a82fc46222fa8ae55e0cb8a80bd50c667</anchor>
      <arglist>(const binop *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>a72e43484cfa22d5a08fb18425a43360a</anchor>
      <arglist>(const unop *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>a276539a19eab522007ce2e93ca3d133d</anchor>
      <arglist>(const multop *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>ac7eb8253edf4409fc155cb4e3f41b7a5</anchor>
      <arglist>(const automatop *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>structspot_1_1ltl_1_1visitor.html</anchorfile>
      <anchor>abe8149e8e7dd7302b3c7bb901b97508c</anchor>
      <arglist>(const bunop *node)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::declarative_environment</name>
    <filename>classspot_1_1ltl_1_1declarative__environment.html</filename>
    <base>spot::ltl::environment</base>
    <member kind="typedef">
      <type>std::map&lt; const std::string, const atomic_prop * &gt;</type>
      <name>prop_map</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>a2e8a9b61aa6651261d75f934d26c8f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>declarative_environment</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>abeba4cd5a5dab75bd4959ee503b557c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~declarative_environment</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>ac3b81c3e7cf0f39de8e81fe015f8c0b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>declare</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>a0ee488854ba5d0eb54accf9d08aebcaf</anchor>
      <arglist>(const std::string &amp;prop_str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const formula *</type>
      <name>require</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>aa48c9c1742b513a548c558b8dde8fd6f</anchor>
      <arglist>(const std::string &amp;prop_str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>a304df69a8a1201bc1aea4dd36b4d7b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const prop_map &amp;</type>
      <name>get_prop_map</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>ac984cdf6392cca00c3472cf47f46b7a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>prop_map</type>
      <name>props_</name>
      <anchorfile>classspot_1_1ltl_1_1declarative__environment.html</anchorfile>
      <anchor>a56b8d03f1238eb4177f1808426b309ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::default_environment</name>
    <filename>classspot_1_1ltl_1_1default__environment.html</filename>
    <base>spot::ltl::environment</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~default_environment</name>
      <anchorfile>classspot_1_1ltl_1_1default__environment.html</anchorfile>
      <anchor>a5eddb8ea1babd42d2d7874bc93788b26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const formula *</type>
      <name>require</name>
      <anchorfile>classspot_1_1ltl_1_1default__environment.html</anchorfile>
      <anchor>a80a4011ea8cd823204614e5cf54eec3f</anchor>
      <arglist>(const std::string &amp;prop_str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classspot_1_1ltl_1_1default__environment.html</anchorfile>
      <anchor>a598bf78f41d23916e1d2c02fba636740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static default_environment &amp;</type>
      <name>instance</name>
      <anchorfile>classspot_1_1ltl_1_1default__environment.html</anchorfile>
      <anchor>a6f82853f22c3bf57128a484a28a4d550</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>default_environment</name>
      <anchorfile>classspot_1_1ltl_1_1default__environment.html</anchorfile>
      <anchor>a10d0a1d6fdea0d1c20d8a75b48ea673a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::environment</name>
    <filename>classspot_1_1ltl_1_1environment.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const formula *</type>
      <name>require</name>
      <anchorfile>classspot_1_1ltl_1_1environment.html</anchorfile>
      <anchor>abfcd56f7f245e1a2084507e7f6e1f635</anchor>
      <arglist>(const std::string &amp;prop_str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>name</name>
      <anchorfile>classspot_1_1ltl_1_1environment.html</anchorfile>
      <anchor>a52845adbef2d65748b4bba6287827270</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~environment</name>
      <anchorfile>classspot_1_1ltl_1_1environment.html</anchorfile>
      <anchor>a3b77feb83fd482fb7f299969234312c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::ltl_file</name>
    <filename>classspot_1_1ltl_1_1ltl__file.html</filename>
    <member kind="function">
      <type></type>
      <name>ltl_file</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__file.html</anchorfile>
      <anchor>ab7ce5618aac0b57ed792241476301495</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ltl_file</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__file.html</anchorfile>
      <anchor>abc2a5cb0218eeeff926622ba97bfa301</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>next</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__file.html</anchorfile>
      <anchor>a389aad5fd8874885ed2590d9b9bbf610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ifstream</type>
      <name>in</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__file.html</anchorfile>
      <anchor>aff3d3916db33c11876adae61e154e15c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::clone_visitor</name>
    <filename>classspot_1_1ltl_1_1clone__visitor.html</filename>
    <base>spot::ltl::visitor</base>
    <member kind="function">
      <type></type>
      <name>clone_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>acc6fc905996e481c2c0ab2943206db1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~clone_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>abf8deaf053b0db8434b68ad6a190c265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>result</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a4f232e1db7761445efce008e2fa406b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>ad3da7c8b870fcb220850b485c80f7224</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a865517d66f7a8e7a2f02539a4166cb0f</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a29da63ad23f3ff2b6ef3c33761bcfb8e</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a98d29277e0b474c5d85ad9e3efa67158</anchor>
      <arglist>(const automatop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>af0c5f96cfa446178a1e6bb77e12639c3</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a8c945e7232ab3d5453b3b926761f0175</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a621dfbca5a532e2f58ad1e4c0b03ea20</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const formula *</type>
      <name>recurse</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a4a4e8a662787eecf9fbbbc967d6fc952</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const formula *</type>
      <name>result_</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a6b7124ec556c81ae2f7fe284669e9632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::language_containment_checker</name>
    <filename>classspot_1_1ltl_1_1language__containment__checker.html</filename>
    <class kind="struct">spot::ltl::language_containment_checker::record_</class>
    <member kind="function">
      <type></type>
      <name>language_containment_checker</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>af1d93e29c75d3c0b5f18aadbae7a1f08</anchor>
      <arglist>(bdd_dict *dict, bool exprop, bool symb_merge, bool branching_postponement, bool fair_loop_approx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~language_containment_checker</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>adc77fb113f0ff8c0bca5941018b2992a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a28c365e1a1ad2de0ce665edff069e5ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contained</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a41da10076c5996501f6c50a6bb8232df</anchor>
      <arglist>(const formula *l, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neg_contained</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>abd13da68e9214781e803149d0a24540b</anchor>
      <arglist>(const formula *l, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contained_neg</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a6c33553adb7b06fdb776b4545b2bdecd</anchor>
      <arglist>(const formula *l, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>ac90866276d5666262fb7cf385825ba7e</anchor>
      <arglist>(const formula *l, const formula *g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>incompatible_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a6a87e3c69b4812b40d487b316427767f</anchor>
      <arglist>(record_ *l, record_ *g)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>record_ *</type>
      <name>register_formula_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a25c34e986c1c5e3f78b78292373ace11</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bdd_dict *</type>
      <name>dict_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a057a8b8ab245f697c8439118120aab39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>exprop_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a95cd0c1966276c943d5d805541b972df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>symb_merge_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>ae04a7200fa965603baabc939f9da8d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>branching_postponement_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>aa687220ab77ab748bf0f16decbea9315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>fair_loop_approx_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a50a81db42eb6c9e28b0bbfd53a24db69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>trans_map</type>
      <name>translated_</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a884aae37d75913ecbdcc0ec02ab81c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const formula *, record_, formula_ptr_hash &gt;</type>
      <name>trans_map</name>
      <anchorfile>classspot_1_1ltl_1_1language__containment__checker.html</anchorfile>
      <anchor>a2e4e705afa5565341f98d6fc81188c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::language_containment_checker::record_</name>
    <filename>structspot_1_1ltl_1_1language__containment__checker_1_1record__.html</filename>
    <member kind="typedef">
      <type>std::map&lt; const record_ *, bool &gt;</type>
      <name>incomp_map</name>
      <anchorfile>structspot_1_1ltl_1_1language__containment__checker_1_1record__.html</anchorfile>
      <anchor>a6de543a3248568e8f17422a204d4d03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const tgba *</type>
      <name>translation</name>
      <anchorfile>structspot_1_1ltl_1_1language__containment__checker_1_1record__.html</anchorfile>
      <anchor>ab1cc85a1312071d13f527376a447eb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>incomp_map</type>
      <name>incompatible</name>
      <anchorfile>structspot_1_1ltl_1_1language__containment__checker_1_1record__.html</anchorfile>
      <anchor>a5f981b6573e682b1a0a975a02122f10c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::unabbreviate_logic_visitor</name>
    <filename>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</filename>
    <base>spot::ltl::clone_visitor</base>
    <member kind="function">
      <type></type>
      <name>unabbreviate_logic_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>ab5fbd1feec2c1524298a32efa2aab338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~unabbreviate_logic_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>aa07212b8be470a4b537b1a555f2529fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>a1ca9bbfcba966eb58194afc1baf6db15</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const formula *</type>
      <name>recurse</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>aa854bb114247e56466d1b6a58cc410f0</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>result</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a4f232e1db7761445efce008e2fa406b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>ad3da7c8b870fcb220850b485c80f7224</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a865517d66f7a8e7a2f02539a4166cb0f</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a98d29277e0b474c5d85ad9e3efa67158</anchor>
      <arglist>(const automatop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>af0c5f96cfa446178a1e6bb77e12639c3</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a8c945e7232ab3d5453b3b926761f0175</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a621dfbca5a532e2f58ad1e4c0b03ea20</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const formula *</type>
      <name>result_</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a6b7124ec556c81ae2f7fe284669e9632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>clone_visitor</type>
      <name>super</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>a6d9e94e7f62fb841630d5ba5b7f1c7fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::mark_tools</name>
    <filename>classspot_1_1ltl_1_1mark__tools.html</filename>
    <member kind="function">
      <type>const formula *</type>
      <name>mark_concat_ops</name>
      <anchorfile>group__ltl__rewriting.html</anchorfile>
      <anchor>ga32279d715efca917b5ac55e1262a6a29</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>simplify_mark</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>adf7c524984c7037f3dcc0e6af19917f3</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mark_tools</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a6cb3fa28b0edb8e1792aba3114dcdd63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mark_tools</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a194757b31f93c580292f75d8a6862306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Sgi::hash_map&lt; const formula *, const formula *, ptr_hash&lt; formula &gt; &gt;</type>
      <name>f2f_map</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a0d2d6a64328e8853b2f92d61f29c4a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f2f_map</type>
      <name>simpmark_</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a05c268968ca1b4da91ca9f0cda1acdb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f2f_map</type>
      <name>markops_</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a00613b49aa132256e78ddee4052bcc31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visitor *</type>
      <name>simpvisitor_</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>ae3f0f91cfdba1be5267e4b26463c4cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>visitor *</type>
      <name>markvisitor_</name>
      <anchorfile>classspot_1_1ltl_1_1mark__tools.html</anchorfile>
      <anchor>a4b1fdd5694beb1e5c672e2e92b3dfec5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::postfix_visitor</name>
    <filename>classspot_1_1ltl_1_1postfix__visitor.html</filename>
    <base>spot::ltl::visitor</base>
    <member kind="function">
      <type></type>
      <name>postfix_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a03fab2a1197f8d0efad8882f3f4734aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~postfix_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>aab120e5ad9b6ad6350564521953879ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>ae7a8472a64a2b06f32ae8f2bd6487b3f</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>aea4703fb2b57fc623d224a9659efa4b0</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a7cfd91f171357d7097de0898803a1e90</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a442445f00677cc75bf41221ec05742cd</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a3139d7c9405072fc8e47cc53186804ba</anchor>
      <arglist>(const automatop *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a756cfc65aab29b0e73edbe6c069cfd5d</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a5d32aa43c3afb30a4485300634e68a8a</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a450b2e47d5156daf65ab4ee470d78614</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a12e79551067f43ddc6cd1fc629315e4b</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a1e1d7685aafb9ed25d88f23f06a026f0</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a05f754002a010c35f1450ac2ec626b55</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a8f196c39089d7a3d11461c6e8dc7fe21</anchor>
      <arglist>(const automatop *mo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a65387770f06dc80cefce49de7f7f125b</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a55120e752ad80e238e812e25cec9fcb4</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>doit_default</name>
      <anchorfile>classspot_1_1ltl_1_1postfix__visitor.html</anchorfile>
      <anchor>a34184ee412fdbace28c56223ba1b58a2</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::random_formula</name>
    <filename>classspot_1_1ltl_1_1random__formula.html</filename>
    <class kind="struct">spot::ltl::random_formula::op_proba</class>
    <member kind="function">
      <type></type>
      <name>random_formula</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a0621b37b1bda5c2744f9dbc17c12c468</anchor>
      <arglist>(unsigned proba_size, const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~random_formula</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abe36aa998723f520d520013d9b306b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop_set *</type>
      <name>ap</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a8ba7f45cadaf07f475607d5471a74c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>generate</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a2fc4dc931143f3fc14e2154fb344c71e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_priorities</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4810ccf354d4c5f11bcb2affb98693e8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ac6ceded8e630a8e5f800843c43b0cd23</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_sums</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a3b35759f5ef45f7534cce8de3efe30e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>proba_size_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a6149c94d652a5fd7328946bc17f35561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ae4607f924811c793fd6f6cbf2221c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_1_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4b2a7f26a20f8dc0803178a5cda75503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a445480816666c9600c4b45b40df5ab69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a947fd6245d3dbf66cfbd263a5cc9ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_or_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ad7079c44014f47a2b6deb19f812b5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_and_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abdc85048bea82cae0e8025bee2899344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const atomic_prop_set *</type>
      <name>ap_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a83af9291422653cfbb8998384ff6bfb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::random_formula::op_proba</name>
    <filename>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</filename>
    <member kind="typedef">
      <type>const formula *(*</type>
      <name>builder</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>a8f77719f3d4920c7727fa15e464e0d1a</anchor>
      <arglist>)(const random_formula *rl, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>a14e48c9b5062e1348c09bff8f4de4fa2</anchor>
      <arglist>(const char *name, int min_n, builder build)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>a0fd275248b016ce79224f937c5acde94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>min_n</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>ae4c073167c6fe77a11b94eeb1df8b100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>proba</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>a3878a0bb54fc5185f24426e376da1882</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>builder</type>
      <name>build</name>
      <anchorfile>structspot_1_1ltl_1_1random__formula_1_1op__proba.html</anchorfile>
      <anchor>a650a74ec60d46c630d3c70538116e545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::random_ltl</name>
    <filename>classspot_1_1ltl_1_1random__ltl.html</filename>
    <base>spot::ltl::random_formula</base>
    <member kind="function">
      <type></type>
      <name>random_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1random__ltl.html</anchorfile>
      <anchor>a3a6eaaabb6c56d573ecb114a3d1959d9</anchor>
      <arglist>(const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop_set *</type>
      <name>ap</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a8ba7f45cadaf07f475607d5471a74c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>generate</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a2fc4dc931143f3fc14e2154fb344c71e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_priorities</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4810ccf354d4c5f11bcb2affb98693e8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ac6ceded8e630a8e5f800843c43b0cd23</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup_proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__ltl.html</anchorfile>
      <anchor>a9e50eb8d0271bd0b4feacf773d7fe406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>random_ltl</name>
      <anchorfile>classspot_1_1ltl_1_1random__ltl.html</anchorfile>
      <anchor>afc77b31482159055846c71912144540e</anchor>
      <arglist>(int size, const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_sums</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a3b35759f5ef45f7534cce8de3efe30e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>proba_size_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a6149c94d652a5fd7328946bc17f35561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ae4607f924811c793fd6f6cbf2221c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_1_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4b2a7f26a20f8dc0803178a5cda75503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a445480816666c9600c4b45b40df5ab69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a947fd6245d3dbf66cfbd263a5cc9ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_or_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ad7079c44014f47a2b6deb19f812b5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_and_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abdc85048bea82cae0e8025bee2899344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const atomic_prop_set *</type>
      <name>ap_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a83af9291422653cfbb8998384ff6bfb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::random_boolean</name>
    <filename>classspot_1_1ltl_1_1random__boolean.html</filename>
    <base>spot::ltl::random_formula</base>
    <member kind="function">
      <type></type>
      <name>random_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1random__boolean.html</anchorfile>
      <anchor>a6b1f33d388861a5c493a06fb5c90f26d</anchor>
      <arglist>(const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop_set *</type>
      <name>ap</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a8ba7f45cadaf07f475607d5471a74c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>generate</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a2fc4dc931143f3fc14e2154fb344c71e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_priorities</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4810ccf354d4c5f11bcb2affb98693e8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ac6ceded8e630a8e5f800843c43b0cd23</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_sums</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a3b35759f5ef45f7534cce8de3efe30e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>proba_size_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a6149c94d652a5fd7328946bc17f35561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ae4607f924811c793fd6f6cbf2221c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_1_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4b2a7f26a20f8dc0803178a5cda75503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a445480816666c9600c4b45b40df5ab69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a947fd6245d3dbf66cfbd263a5cc9ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_or_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ad7079c44014f47a2b6deb19f812b5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_and_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abdc85048bea82cae0e8025bee2899344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const atomic_prop_set *</type>
      <name>ap_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a83af9291422653cfbb8998384ff6bfb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::random_sere</name>
    <filename>classspot_1_1ltl_1_1random__sere.html</filename>
    <base>spot::ltl::random_formula</base>
    <member kind="function">
      <type></type>
      <name>random_sere</name>
      <anchorfile>classspot_1_1ltl_1_1random__sere.html</anchorfile>
      <anchor>a6bb0d4a67a63a3c276de0c75950a2bff</anchor>
      <arglist>(const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop_set *</type>
      <name>ap</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a8ba7f45cadaf07f475607d5471a74c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>generate</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a2fc4dc931143f3fc14e2154fb344c71e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_priorities</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4810ccf354d4c5f11bcb2affb98693e8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ac6ceded8e630a8e5f800843c43b0cd23</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="variable">
      <type>random_boolean</type>
      <name>rb</name>
      <anchorfile>classspot_1_1ltl_1_1random__sere.html</anchorfile>
      <anchor>a8b1a52fc46d96eb17a5d3936b42861cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_sums</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a3b35759f5ef45f7534cce8de3efe30e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>proba_size_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a6149c94d652a5fd7328946bc17f35561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ae4607f924811c793fd6f6cbf2221c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_1_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4b2a7f26a20f8dc0803178a5cda75503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a445480816666c9600c4b45b40df5ab69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a947fd6245d3dbf66cfbd263a5cc9ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_or_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ad7079c44014f47a2b6deb19f812b5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_and_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abdc85048bea82cae0e8025bee2899344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const atomic_prop_set *</type>
      <name>ap_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a83af9291422653cfbb8998384ff6bfb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::random_psl</name>
    <filename>classspot_1_1ltl_1_1random__psl.html</filename>
    <base>spot::ltl::random_ltl</base>
    <member kind="function">
      <type></type>
      <name>random_psl</name>
      <anchorfile>classspot_1_1ltl_1_1random__psl.html</anchorfile>
      <anchor>aef17b0ddba29c97cc4e32ed695952c02</anchor>
      <arglist>(const atomic_prop_set *ap)</arglist>
    </member>
    <member kind="function">
      <type>const atomic_prop_set *</type>
      <name>ap</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a8ba7f45cadaf07f475607d5471a74c54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>generate</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a2fc4dc931143f3fc14e2154fb344c71e</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>dump_priorities</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4810ccf354d4c5f11bcb2affb98693e8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>parse_options</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ac6ceded8e630a8e5f800843c43b0cd23</anchor>
      <arglist>(char *options)</arglist>
    </member>
    <member kind="variable">
      <type>random_sere</type>
      <name>rs</name>
      <anchorfile>classspot_1_1ltl_1_1random__psl.html</anchorfile>
      <anchor>a538cd2f430cb3a9b7d250ca214e6614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup_proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__ltl.html</anchorfile>
      <anchor>a9e50eb8d0271bd0b4feacf773d7fe406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_sums</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a3b35759f5ef45f7534cce8de3efe30e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>proba_size_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a6149c94d652a5fd7328946bc17f35561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ae4607f924811c793fd6f6cbf2221c8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_1_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a4b2a7f26a20f8dc0803178a5cda75503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a445480816666c9600c4b45b40df5ab69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a947fd6245d3dbf66cfbd263a5cc9ee86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>op_proba *</type>
      <name>proba_2_or_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>ad7079c44014f47a2b6deb19f812b5a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>total_2_and_more_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>abdc85048bea82cae0e8025bee2899344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const atomic_prop_set *</type>
      <name>ap_</name>
      <anchorfile>classspot_1_1ltl_1_1random__formula.html</anchorfile>
      <anchor>a83af9291422653cfbb8998384ff6bfb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::simplify_f_g_visitor</name>
    <filename>classspot_1_1ltl_1_1simplify__f__g__visitor.html</filename>
    <base>spot::ltl::clone_visitor</base>
    <member kind="function">
      <type></type>
      <name>simplify_f_g_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1simplify__f__g__visitor.html</anchorfile>
      <anchor>a42f5bf4e42b7727f045878a201125c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~simplify_f_g_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1simplify__f__g__visitor.html</anchorfile>
      <anchor>a441cf8abdd96701d2b99c86949d8d76f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1simplify__f__g__visitor.html</anchorfile>
      <anchor>a36a7f3095171c2b5dec1b3091b924668</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const formula *</type>
      <name>recurse</name>
      <anchorfile>classspot_1_1ltl_1_1simplify__f__g__visitor.html</anchorfile>
      <anchor>a1b099c77d3a0e9cc986be5391dc004be</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>result</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a4f232e1db7761445efce008e2fa406b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>ad3da7c8b870fcb220850b485c80f7224</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a865517d66f7a8e7a2f02539a4166cb0f</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a98d29277e0b474c5d85ad9e3efa67158</anchor>
      <arglist>(const automatop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>af0c5f96cfa446178a1e6bb77e12639c3</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a8c945e7232ab3d5453b3b926761f0175</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a621dfbca5a532e2f58ad1e4c0b03ea20</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const formula *</type>
      <name>result_</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a6b7124ec556c81ae2f7fe284669e9632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>clone_visitor</type>
      <name>super</name>
      <anchorfile>classspot_1_1ltl_1_1simplify__f__g__visitor.html</anchorfile>
      <anchor>ab1c32770fb9bfb45c91c437842b87999</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::ltl_simplifier_options</name>
    <filename>classspot_1_1ltl_1_1ltl__simplifier__options.html</filename>
    <member kind="function">
      <type></type>
      <name>ltl_simplifier_options</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>a896bb5009fc0df4050a3199fa40f2d0b</anchor>
      <arglist>(bool basics=true, bool synt_impl=true, bool event_univ=true, bool containment_checks=false, bool containment_checks_stronger=false, bool nenoform_stop_on_boolean=false, bool reduce_size_strictly=false)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reduce_basics</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>af09a3bcbd33c58fc25162bd811709209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>synt_impl</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>ab877a24ad14868eb8bf6df842760d99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>event_univ</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>ade1761781d8615e6952dee6b5594c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>containment_checks</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>a17e65dbe3c21df4e8db09b8bd187320e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>containment_checks_stronger</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>aeda058ebb98eff6e5b208ae7cedd3bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>nenoform_stop_on_boolean</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>a4b2ab6917738f3c4ff761ed85682bcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reduce_size_strictly</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier__options.html</anchorfile>
      <anchor>a81c454b2bdcc7767106ef7f6668afaca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::ltl_simplifier</name>
    <filename>classspot_1_1ltl_1_1ltl__simplifier.html</filename>
    <member kind="function">
      <type></type>
      <name>ltl_simplifier</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a1687d0494a07f22ef619d879b703959f</anchor>
      <arglist>(bdd_dict *dict=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ltl_simplifier</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>aae4cd72853ffac26cb7e19bf9cfd0a95</anchor>
      <arglist>(const ltl_simplifier_options &amp;opt, bdd_dict *dict=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ltl_simplifier</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a544758449eb4ad2639c776c898dfbe58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>simplify</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a09958aebdec4239bb25c185c7fcb1ba7</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>negative_normal_form</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a1438e6f44913b4d9c1a9668dd6610da5</anchor>
      <arglist>(const formula *f, bool negated=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syntactic_implication</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a160d282dbd4a278eeabf1db1ad10e334</anchor>
      <arglist>(const formula *f, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>syntactic_implication_neg</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a29c8c00a48c0a277fa73b378cfb472b7</anchor>
      <arglist>(const formula *f, const formula *g, bool right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>are_equivalent</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a1a35008d9c232a06f835088c8987a6b2</anchor>
      <arglist>(const formula *f, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>implication</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a5a80b97f921bd57e78ce1b91358aa98c</anchor>
      <arglist>(const formula *f, const formula *g)</arglist>
    </member>
    <member kind="function">
      <type>bdd</type>
      <name>as_bdd</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a814023d189d870ffeeba120b91b989bf</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_as_bdd_cache</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a5e209a9baeea02e08a032355c971f196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bdd_dict *</type>
      <name>get_dict</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>addd6710daea5c439c0bb88128dc9d27f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>star_normal_form</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a99e3b0cff9b87ec6fa844e83cb822524</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_stats</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a5017ab065fd0dc81b4adb616f4fc2bf3</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ltl_simplifier</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a584fdb2fcc4d74301c681fa8b5e62163</anchor>
      <arglist>(const ltl_simplifier &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ltl_simplifier_cache *</type>
      <name>cache_</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a1097c0d8e7ad64dec6c8daf7174a2fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>owndict</name>
      <anchorfile>classspot_1_1ltl_1_1ltl__simplifier.html</anchorfile>
      <anchor>a03f692398940e80bd83e3870284c76a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spot::ltl::unabbreviate_ltl_visitor</name>
    <filename>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</filename>
    <base>spot::ltl::unabbreviate_logic_visitor</base>
    <member kind="function">
      <type></type>
      <name>unabbreviate_ltl_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</anchorfile>
      <anchor>a9f65ad7891246e6122327f0350e2590b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~unabbreviate_ltl_visitor</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</anchorfile>
      <anchor>afd89f4a60841a845c4f084e90ab45c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</anchorfile>
      <anchor>aab9c534805c67bb65681289ab8284b73</anchor>
      <arglist>(const unop *uo)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>recurse</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</anchorfile>
      <anchor>adaf023d6507aa87b8079888232ed99a3</anchor>
      <arglist>(const formula *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__logic__visitor.html</anchorfile>
      <anchor>a1ca9bbfcba966eb58194afc1baf6db15</anchor>
      <arglist>(const binop *bo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>ad3da7c8b870fcb220850b485c80f7224</anchor>
      <arglist>(const atomic_prop *ap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a98d29277e0b474c5d85ad9e3efa67158</anchor>
      <arglist>(const automatop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>af0c5f96cfa446178a1e6bb77e12639c3</anchor>
      <arglist>(const multop *mo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a8c945e7232ab3d5453b3b926761f0175</anchor>
      <arglist>(const constant *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a621dfbca5a532e2f58ad1e4c0b03ea20</anchor>
      <arglist>(const bunop *c)</arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>result</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a4f232e1db7761445efce008e2fa406b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const formula *</type>
      <name>result_</name>
      <anchorfile>classspot_1_1ltl_1_1clone__visitor.html</anchorfile>
      <anchor>a6b7124ec556c81ae2f7fe284669e9632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>unabbreviate_logic_visitor</type>
      <name>super</name>
      <anchorfile>classspot_1_1ltl_1_1unabbreviate__ltl__visitor.html</anchorfile>
      <anchor>aba42e6473a8f2e3a10291f9a0aebb219</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>spot::ltl::formula_tree</name>
    <filename>namespacespot_1_1ltl_1_1formula__tree.html</filename>
    <class kind="struct">spot::ltl::formula_tree::node</class>
    <class kind="struct">spot::ltl::formula_tree::node_unop</class>
    <class kind="struct">spot::ltl::formula_tree::node_binop</class>
    <class kind="struct">spot::ltl::formula_tree::node_multop</class>
    <class kind="struct">spot::ltl::formula_tree::node_nfa</class>
    <class kind="struct">spot::ltl::formula_tree::node_atomic</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; node &gt;</type>
      <name>node_ptr</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>aca5141e136bf68845459fe16cee595a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>True</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>ac412ecbb3c26675b4c5a09b7a7e534f7ab55cce79f3e454898faaf56bcedef446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>False</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>ac412ecbb3c26675b4c5a09b7a7e534f7a5c565ea9647bef5f00525a383c418562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const formula *</type>
      <name>instanciate</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>a15921c6ac098624c6194659ce7256a80</anchor>
      <arglist>(const node_ptr np, const std::vector&lt; const formula * &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>arity</name>
      <anchorfile>namespacespot_1_1ltl_1_1formula__tree.html</anchorfile>
      <anchor>af67581a7e99a31f157617cd73ff5f1a2</anchor>
      <arglist>(const node_ptr np)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~node</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node.html</anchorfile>
      <anchor>a83b4f9eec86f0619e831322e061e9933</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node_unop</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node__unop.html</filename>
    <base>spot::ltl::formula_tree::node</base>
    <member kind="variable">
      <type>unop::type</type>
      <name>op</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__unop.html</anchorfile>
      <anchor>a6cfce7cd66e4a0553dec1599156da2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node_ptr</type>
      <name>child</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__unop.html</anchorfile>
      <anchor>a65859bdb773adc37be19c7e6dd367b56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node_binop</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node__binop.html</filename>
    <base>spot::ltl::formula_tree::node</base>
    <member kind="variable">
      <type>binop::type</type>
      <name>op</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__binop.html</anchorfile>
      <anchor>adebd9e491de4b499b6f30128a01eb804</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node_ptr</type>
      <name>lhs</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__binop.html</anchorfile>
      <anchor>ac829b51d942285078d9c1c810e752fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node_ptr</type>
      <name>rhs</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__binop.html</anchorfile>
      <anchor>a7d71d0503ffffcded65ef26dd60bb82a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node_multop</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node__multop.html</filename>
    <base>spot::ltl::formula_tree::node</base>
    <member kind="variable">
      <type>multop::type</type>
      <name>op</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__multop.html</anchorfile>
      <anchor>aac721e3aa944249cc78b2550ce940d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node_ptr</type>
      <name>lhs</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__multop.html</anchorfile>
      <anchor>ae895c7e51233aadb115190fb096a9816</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>node_ptr</type>
      <name>rhs</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__multop.html</anchorfile>
      <anchor>ab83374f3b6b96bd712d12f2a43fbf910</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node_nfa</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node__nfa.html</filename>
    <base>spot::ltl::formula_tree::node</base>
    <member kind="variable">
      <type>std::vector&lt; node_ptr &gt;</type>
      <name>children</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__nfa.html</anchorfile>
      <anchor>af5feff0f3f3b10b09b779ae4fe0a2237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spot::ltl::nfa::ptr</type>
      <name>nfa</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__nfa.html</anchorfile>
      <anchor>a8903ebda8615c49f2079dc63056ded69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spot::ltl::formula_tree::node_atomic</name>
    <filename>structspot_1_1ltl_1_1formula__tree_1_1node__atomic.html</filename>
    <base>spot::ltl::formula_tree::node</base>
    <member kind="variable">
      <type>int</type>
      <name>i</name>
      <anchorfile>structspot_1_1ltl_1_1formula__tree_1_1node__atomic.html</anchorfile>
      <anchor>a3baf967463430a0bb73cc056780a6678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>bin/</name>
    <path>/home-ssd/adl/git/spot/src/bin/</path>
    <filename>dir_031c4fc26031de218e3c67acfca35073.html</filename>
    <file>common_cout.hh</file>
    <file>common_finput.hh</file>
    <file>common_output.hh</file>
    <file>common_post.hh</file>
    <file>common_r.hh</file>
    <file>common_range.hh</file>
    <file>common_setup.hh</file>
    <file>common_sys.hh</file>
  </compound>
  <compound kind="dir">
    <name>dve2/</name>
    <path>/home-ssd/adl/git/spot/iface/dve2/</path>
    <filename>dir_2b8fb8017d661cbc871fe6446a08e858.html</filename>
    <file>dve2.hh</file>
  </compound>
  <compound kind="dir">
    <name>eltlparse/</name>
    <path>/home-ssd/adl/git/spot/src/eltlparse/</path>
    <filename>dir_c86f7d44d4e61a20d53fa1c6951625fa.html</filename>
    <file>location.hh</file>
    <file>position.hh</file>
    <file>public.hh</file>
    <file>stack.hh</file>
  </compound>
  <compound kind="dir">
    <name>evtgba/</name>
    <path>/home-ssd/adl/git/spot/src/evtgba/</path>
    <filename>dir_b6c6647ba1ff89c66bb81424bfa095bd.html</filename>
    <file>evtgba.hh</file>
    <file>evtgbaiter.hh</file>
    <file>explicit.hh</file>
    <file>product.hh</file>
    <file>symbol.hh</file>
  </compound>
  <compound kind="dir">
    <name>evtgbaalgos/</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaalgos/</path>
    <filename>dir_e008fce031e3c5aca9bc6f4181e240b4.html</filename>
    <file>dotty.hh</file>
    <file>reachiter.hh</file>
    <file>save.hh</file>
    <file>tgba2evtgba.hh</file>
  </compound>
  <compound kind="dir">
    <name>evtgbaparse/</name>
    <path>/home-ssd/adl/git/spot/src/evtgbaparse/</path>
    <filename>dir_5f71288d4e9a02c5590f9f40a60ab518.html</filename>
    <file>public.hh</file>
  </compound>
  <compound kind="dir">
    <name>gspn/</name>
    <path>/home-ssd/adl/git/spot/iface/gspn/</path>
    <filename>dir_1b8f9ba14f4bd6cd59c2da0d223f617d.html</filename>
    <file>common.hh</file>
    <file>gspn.hh</file>
    <file>ssp.hh</file>
  </compound>
  <compound kind="dir">
    <name>tgbaalgos/gtec/</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/gtec/</path>
    <filename>dir_769a5096e6d87c9d57fd03d0959c078f.html</filename>
    <file>ce.hh</file>
    <file>explscc.hh</file>
    <file>gtec.hh</file>
    <file>nsheap.hh</file>
    <file>sccstack.hh</file>
    <file>status.hh</file>
  </compound>
  <compound kind="dir">
    <name>kripke/</name>
    <path>/home-ssd/adl/git/spot/src/kripke/</path>
    <filename>dir_0105be830fc9dd4d086d7709652f0f1c.html</filename>
    <file>fairkripke.hh</file>
    <file>kripke.hh</file>
    <file>kripkeexplicit.hh</file>
    <file>kripkeprint.hh</file>
  </compound>
  <compound kind="dir">
    <name>kripkeparse/</name>
    <path>/home-ssd/adl/git/spot/src/kripkeparse/</path>
    <filename>dir_b259c25245aa52cc5d4341c072d12fbb.html</filename>
    <file>location.hh</file>
    <file>position.hh</file>
    <file>public.hh</file>
    <file>stack.hh</file>
  </compound>
  <compound kind="dir">
    <name>ltlast/</name>
    <path>/home-ssd/adl/git/spot/src/ltlast/</path>
    <filename>dir_733ec110de5903fabfd3dfeab6deb7b0.html</filename>
    <file>allnodes.hh</file>
    <file>atomic_prop.hh</file>
    <file>automatop.hh</file>
    <file>binop.hh</file>
    <file>bunop.hh</file>
    <file>constant.hh</file>
    <file>formula.hh</file>
    <file>formula_tree.hh</file>
    <file>multop.hh</file>
    <file>nfa.hh</file>
    <file>predecl.hh</file>
    <file>refformula.hh</file>
    <file>unop.hh</file>
    <file>visitor.hh</file>
  </compound>
  <compound kind="dir">
    <name>ltlenv/</name>
    <path>/home-ssd/adl/git/spot/src/ltlenv/</path>
    <filename>dir_46a3af01e87d9ed4a6459748af7d191a.html</filename>
    <file>declenv.hh</file>
    <file>defaultenv.hh</file>
    <file>environment.hh</file>
  </compound>
  <compound kind="dir">
    <name>ltlparse/</name>
    <path>/home-ssd/adl/git/spot/src/ltlparse/</path>
    <filename>dir_bb7035e55cdb146a9bcd2fa1c2fae653.html</filename>
    <file>location.hh</file>
    <file>ltlfile.hh</file>
    <file>position.hh</file>
    <file>public.hh</file>
    <file>stack.hh</file>
  </compound>
  <compound kind="dir">
    <name>ltlvisit/</name>
    <path>/home-ssd/adl/git/spot/src/ltlvisit/</path>
    <filename>dir_dad17ef05958cb6ec778792e72343bb5.html</filename>
    <file>apcollect.hh</file>
    <file>clone.hh</file>
    <file>contain.hh</file>
    <file>destroy.hh</file>
    <file>dotty.hh</file>
    <file>dump.hh</file>
    <file>lbt.hh</file>
    <file>length.hh</file>
    <file>lunabbrev.hh</file>
    <file>mark.hh</file>
    <file>nenoform.hh</file>
    <file>postfix.hh</file>
    <file>randomltl.hh</file>
    <file>reduce.hh</file>
    <file>relabel.hh</file>
    <file>simpfg.hh</file>
    <file>simplify.hh</file>
    <file>snf.hh</file>
    <file>tostring.hh</file>
    <file>tunabbrev.hh</file>
    <file>wmunabbrev.hh</file>
  </compound>
  <compound kind="dir">
    <name>misc/</name>
    <path>/home-ssd/adl/git/spot/src/misc/</path>
    <filename>dir_88826aa2a10e1882b573f502bc7f4b55.html</filename>
    <file>acccompl.hh</file>
    <file>accconv.hh</file>
    <file>bareword.hh</file>
    <file>bddalloc.hh</file>
    <file>bddlt.hh</file>
    <file>bddop.hh</file>
    <file>casts.hh</file>
    <file>escape.hh</file>
    <file>fixpool.hh</file>
    <file>formater.hh</file>
    <file>freelist.hh</file>
    <file>hash.hh</file>
    <file>hashfunc.hh</file>
    <file>intvcmp2.hh</file>
    <file>intvcomp.hh</file>
    <file>ltstr.hh</file>
    <file>memusage.hh</file>
    <file>minato.hh</file>
    <file>modgray.hh</file>
    <file>mspool.hh</file>
    <file>optionmap.hh</file>
    <file>random.hh</file>
    <file>timer.hh</file>
    <file>unique_ptr.hh</file>
    <file>version.hh</file>
  </compound>
  <compound kind="dir">
    <name>neverparse/</name>
    <path>/home-ssd/adl/git/spot/src/neverparse/</path>
    <filename>dir_55b30e711846349ae7f192b08c6807ac.html</filename>
    <file>location.hh</file>
    <file>position.hh</file>
    <file>public.hh</file>
    <file>stack.hh</file>
  </compound>
  <compound kind="dir">
    <name>saba/</name>
    <path>/home-ssd/adl/git/spot/src/saba/</path>
    <filename>dir_fa0f1f8546989799fbf643cde19c9e38.html</filename>
    <file>explicitstateconjunction.hh</file>
    <file>saba.hh</file>
    <file>sabacomplementtgba.hh</file>
    <file>sabastate.hh</file>
    <file>sabasucciter.hh</file>
  </compound>
  <compound kind="dir">
    <name>sabaalgos/</name>
    <path>/home-ssd/adl/git/spot/src/sabaalgos/</path>
    <filename>dir_2c2115823ac848f022e42e11f72dcd6c.html</filename>
    <file>sabadotty.hh</file>
    <file>sabareachiter.hh</file>
  </compound>
  <compound kind="dir">
    <name>ta/</name>
    <path>/home-ssd/adl/git/spot/src/ta/</path>
    <filename>dir_f6f09ab9c08a3fdc06da35f318405aad.html</filename>
    <file>ta.hh</file>
    <file>taexplicit.hh</file>
    <file>taproduct.hh</file>
    <file>tgta.hh</file>
    <file>tgtaexplicit.hh</file>
    <file>tgtaproduct.hh</file>
  </compound>
  <compound kind="dir">
    <name>taalgos/</name>
    <path>/home-ssd/adl/git/spot/src/taalgos/</path>
    <filename>dir_4768d2f19b7afbe048757f7169e80214.html</filename>
    <file>dotty.hh</file>
    <file>emptinessta.hh</file>
    <file>minimize.hh</file>
    <file>reachiter.hh</file>
    <file>statessetbuilder.hh</file>
    <file>stats.hh</file>
    <file>tgba2ta.hh</file>
  </compound>
  <compound kind="dir">
    <name>tgba/</name>
    <path>/home-ssd/adl/git/spot/src/tgba/</path>
    <filename>dir_cbab49d3f64287c85191cb4142dfb6a4.html</filename>
    <file>bdddict.hh</file>
    <file>bddprint.hh</file>
    <file>formula2bdd.hh</file>
    <file>futurecondcol.hh</file>
    <file>public.hh</file>
    <file>sba.hh</file>
    <file>state.hh</file>
    <file>statebdd.hh</file>
    <file>succiter.hh</file>
    <file>succiterconcrete.hh</file>
    <file>taatgba.hh</file>
    <file>tgba.hh</file>
    <file>tgbabddconcrete.hh</file>
    <file>tgbabddconcretefactory.hh</file>
    <file>tgbabddconcreteproduct.hh</file>
    <file>tgbabddcoredata.hh</file>
    <file>tgbabddfactory.hh</file>
    <file>tgbaexplicit.hh</file>
    <file>tgbakvcomplement.hh</file>
    <file>tgbaproduct.hh</file>
    <file>tgbasafracomplement.hh</file>
    <file>tgbascc.hh</file>
    <file>tgbasgba.hh</file>
    <file>tgbatba.hh</file>
    <file>tgbaunion.hh</file>
    <file>wdbacomp.hh</file>
  </compound>
  <compound kind="dir">
    <name>tgbaalgos/</name>
    <path>/home-ssd/adl/git/spot/src/tgbaalgos/</path>
    <filename>dir_c94130e9bcfe8e0a5c5ab888502605db.html</filename>
    <dir>tgbaalgos/gtec/</dir>
    <file>bfssteps.hh</file>
    <file>cutscc.hh</file>
    <file>cycles.hh</file>
    <file>degen.hh</file>
    <file>dotty.hh</file>
    <file>dottydec.hh</file>
    <file>dupexp.hh</file>
    <file>eltl2tgba_lacim.hh</file>
    <file>emptiness.hh</file>
    <file>emptiness_stats.hh</file>
    <file>gv04.hh</file>
    <file>isdet.hh</file>
    <file>isweakscc.hh</file>
    <file>lbtt.hh</file>
    <file>ltl2taa.hh</file>
    <file>ltl2tgba_fm.hh</file>
    <file>ltl2tgba_lacim.hh</file>
    <file>magic.hh</file>
    <file>minimize.hh</file>
    <file>neverclaim.hh</file>
    <file>postproc.hh</file>
    <file>powerset.hh</file>
    <file>projrun.hh</file>
    <file>randomgraph.hh</file>
    <file>reachiter.hh</file>
    <file>reducerun.hh</file>
    <file>reductgba_sim.hh</file>
    <file>replayrun.hh</file>
    <file>rundotdec.hh</file>
    <file>safety.hh</file>
    <file>save.hh</file>
    <file>scc.hh</file>
    <file>sccfilter.hh</file>
    <file>se05.hh</file>
    <file>simulation.hh</file>
    <file>stats.hh</file>
    <file>stripacc.hh</file>
    <file>tau03.hh</file>
    <file>tau03opt.hh</file>
    <file>weight.hh</file>
  </compound>
  <compound kind="dir">
    <name>tgbaparse/</name>
    <path>/home-ssd/adl/git/spot/src/tgbaparse/</path>
    <filename>dir_164d0467f4e04588848845f703945861.html</filename>
    <file>public.hh</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Spot Library Documentation</title>
    <filename>index</filename>
    <docanchor file="index">overview</docanchor>
    <docanchor file="index">thisdoc</docanchor>
    <docanchor file="index">pointers</docanchor>
  </compound>
</tagfile>
