# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spot', [dirname(__file__)])
        except ImportError:
            import _spot
            return _spot
        if fp is not None:
            try:
                _mod = imp.load_module('_spot', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spot = swig_import_helper()
    del swig_import_helper
else:
    import _spot
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _spot.SwigPyIterator_value(self)
    def incr(self, n = 1): return _spot.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _spot.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _spot.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _spot.SwigPyIterator_equal(self, *args)
    def copy(self): return _spot.SwigPyIterator_copy(self)
    def next(self): return _spot.SwigPyIterator_next(self)
    def __next__(self): return _spot.SwigPyIterator___next__(self)
    def previous(self): return _spot.SwigPyIterator_previous(self)
    def advance(self, *args): return _spot.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _spot.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _spot.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _spot.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _spot.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _spot.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _spot.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _spot.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import buddy

def version():
  return _spot.version()
version = _spot.version
class bdd_allocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bdd_allocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bdd_allocator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_bdd_allocator()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["initialize"] = lambda x: _spot.bdd_allocator_initialize
    if _newclass:initialize = staticmethod(_spot.bdd_allocator_initialize)
    def allocate_variables(self, *args): return _spot.bdd_allocator_allocate_variables(self, *args)
    def release_variables(self, *args): return _spot.bdd_allocator_release_variables(self, *args)
    __swig_destroy__ = _spot.delete_bdd_allocator
    __del__ = lambda self : None;
bdd_allocator_swigregister = _spot.bdd_allocator_swigregister
bdd_allocator_swigregister(bdd_allocator)

def bdd_allocator_initialize():
  return _spot.bdd_allocator_initialize()
bdd_allocator_initialize = _spot.bdd_allocator_initialize

class minato_isop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, minato_isop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, minato_isop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_minato_isop(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _spot.minato_isop_next(self)
    __swig_destroy__ = _spot.delete_minato_isop
    __del__ = lambda self : None;
minato_isop_swigregister = _spot.minato_isop_swigregister
minato_isop_swigregister(minato_isop)

class option_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, option_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, option_map, name)
    __repr__ = _swig_repr
    def parse_options(self, *args): return _spot.option_map_parse_options(self, *args)
    def get(self, *args): return _spot.option_map_get(self, *args)
    def set(self, *args): return _spot.option_map_set(self, *args)
    def __init__(self): 
        this = _spot.new_option_map()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_option_map
    __del__ = lambda self : None;
option_map_swigregister = _spot.option_map_swigregister
option_map_swigregister(option_map)


def srand(*args):
  return _spot.srand(*args)
srand = _spot.srand

def rrand(*args):
  return _spot.rrand(*args)
rrand = _spot.rrand

def mrand(*args):
  return _spot.mrand(*args)
mrand = _spot.mrand

def drand():
  return _spot.drand()
drand = _spot.drand

def nrand():
  return _spot.nrand()
nrand = _spot.nrand

def bmrand():
  return _spot.bmrand()
bmrand = _spot.bmrand

def prand(*args):
  return _spot.prand(*args)
prand = _spot.prand
class loopless_modular_mixed_radix_gray_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, loopless_modular_mixed_radix_gray_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, loopless_modular_mixed_radix_gray_code, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == loopless_modular_mixed_radix_gray_code:
            _self = None
        else:
            _self = self
        this = _spot.new_loopless_modular_mixed_radix_gray_code(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_loopless_modular_mixed_radix_gray_code
    __del__ = lambda self : None;
    def a_first(self, *args): return _spot.loopless_modular_mixed_radix_gray_code_a_first(self, *args)
    def a_next(self, *args): return _spot.loopless_modular_mixed_radix_gray_code_a_next(self, *args)
    def a_last(self, *args): return _spot.loopless_modular_mixed_radix_gray_code_a_last(self, *args)
    def first(self): return _spot.loopless_modular_mixed_radix_gray_code_first(self)
    def last(self): return _spot.loopless_modular_mixed_radix_gray_code_last(self)
    def done(self): return _spot.loopless_modular_mixed_radix_gray_code_done(self)
    def next(self): return _spot.loopless_modular_mixed_radix_gray_code_next(self)
    def __disown__(self):
        self.this.disown()
        _spot.disown_loopless_modular_mixed_radix_gray_code(self)
        return weakref_proxy(self)
loopless_modular_mixed_radix_gray_code_swigregister = _spot.loopless_modular_mixed_radix_gray_code_swigregister
loopless_modular_mixed_radix_gray_code_swigregister(loopless_modular_mixed_radix_gray_code)

class formula(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def accept(self, *args): return _spot.formula_accept(self, *args)
    def clone(self): return _spot.formula_clone(self)
    def destroy(self): return _spot.formula_destroy(self)
    def dump(self): return _spot.formula_dump(self)
    def hash(self): return _spot.formula_hash(self)
    def __cmp__(self, *args): return _spot.formula___cmp__(self, *args)
    def __str__(self, *args): return _spot.formula___str__(self, *args)
formula_swigregister = _spot.formula_swigregister
formula_swigregister(formula)

class formula_ptr_less_than(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula_ptr_less_than, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula_ptr_less_than, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.formula_ptr_less_than___call__(self, *args)
    def __init__(self): 
        this = _spot.new_formula_ptr_less_than()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_formula_ptr_less_than
    __del__ = lambda self : None;
formula_ptr_less_than_swigregister = _spot.formula_ptr_less_than_swigregister
formula_ptr_less_than_swigregister(formula_ptr_less_than)

class formula_ptr_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula_ptr_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula_ptr_hash, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.formula_ptr_hash___call__(self, *args)
    def __init__(self): 
        this = _spot.new_formula_ptr_hash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_formula_ptr_hash
    __del__ = lambda self : None;
formula_ptr_hash_swigregister = _spot.formula_ptr_hash_swigregister
formula_ptr_hash_swigregister(formula_ptr_hash)

class ref_formula(formula):
    __swig_setmethods__ = {}
    for _s in [formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ref_formula, name, value)
    __swig_getmethods__ = {}
    for _s in [formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ref_formula, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
ref_formula_swigregister = _spot.ref_formula_swigregister
ref_formula_swigregister(ref_formula)

class atomic_prop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, atomic_prop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, atomic_prop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _spot.atomic_prop_instance
    if _newclass:instance = staticmethod(_spot.atomic_prop_instance)
    def accept(self, *args): return _spot.atomic_prop_accept(self, *args)
    def name(self): return _spot.atomic_prop_name(self)
    def env(self): return _spot.atomic_prop_env(self)
    def dump(self): return _spot.atomic_prop_dump(self)
    __swig_getmethods__["instance_count"] = lambda x: _spot.atomic_prop_instance_count
    if _newclass:instance_count = staticmethod(_spot.atomic_prop_instance_count)
    __swig_getmethods__["dump_instances"] = lambda x: _spot.atomic_prop_dump_instances
    if _newclass:dump_instances = staticmethod(_spot.atomic_prop_dump_instances)
atomic_prop_swigregister = _spot.atomic_prop_swigregister
atomic_prop_swigregister(atomic_prop)

def atomic_prop_instance(*args):
  return _spot.atomic_prop_instance(*args)
atomic_prop_instance = _spot.atomic_prop_instance

def atomic_prop_instance_count():
  return _spot.atomic_prop_instance_count()
atomic_prop_instance_count = _spot.atomic_prop_instance_count

def atomic_prop_dump_instances(*args):
  return _spot.atomic_prop_dump_instances(*args)
atomic_prop_dump_instances = _spot.atomic_prop_dump_instances

class binop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, binop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, binop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Xor = _spot.binop_Xor
    Implies = _spot.binop_Implies
    Equiv = _spot.binop_Equiv
    U = _spot.binop_U
    R = _spot.binop_R
    W = _spot.binop_W
    M = _spot.binop_M
    __swig_getmethods__["instance"] = lambda x: _spot.binop_instance
    if _newclass:instance = staticmethod(_spot.binop_instance)
    def accept(self, *args): return _spot.binop_accept(self, *args)
    def first(self, *args): return _spot.binop_first(self, *args)
    def second(self, *args): return _spot.binop_second(self, *args)
    def op(self): return _spot.binop_op(self)
    def op_name(self): return _spot.binop_op_name(self)
    def dump(self): return _spot.binop_dump(self)
    __swig_getmethods__["instance_count"] = lambda x: _spot.binop_instance_count
    if _newclass:instance_count = staticmethod(_spot.binop_instance_count)
    __swig_getmethods__["dump_instances"] = lambda x: _spot.binop_dump_instances
    if _newclass:dump_instances = staticmethod(_spot.binop_dump_instances)
binop_swigregister = _spot.binop_swigregister
binop_swigregister(binop)

def binop_instance(*args):
  return _spot.binop_instance(*args)
binop_instance = _spot.binop_instance

def binop_instance_count():
  return _spot.binop_instance_count()
binop_instance_count = _spot.binop_instance_count

def binop_dump_instances(*args):
  return _spot.binop_dump_instances(*args)
binop_dump_instances = _spot.binop_dump_instances

class constant(formula):
    __swig_setmethods__ = {}
    for _s in [formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, constant, name, value)
    __swig_getmethods__ = {}
    for _s in [formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, constant, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    False = _spot.constant_False
    True = _spot.constant_True
    def accept(self, *args): return _spot.constant_accept(self, *args)
    def val(self): return _spot.constant_val(self)
    def val_name(self): return _spot.constant_val_name(self)
    def dump(self): return _spot.constant_dump(self)
    __swig_getmethods__["true_instance"] = lambda x: _spot.constant_true_instance
    if _newclass:true_instance = staticmethod(_spot.constant_true_instance)
    __swig_getmethods__["false_instance"] = lambda x: _spot.constant_false_instance
    if _newclass:false_instance = staticmethod(_spot.constant_false_instance)
constant_swigregister = _spot.constant_swigregister
constant_swigregister(constant)

def constant_true_instance():
  return _spot.constant_true_instance()
constant_true_instance = _spot.constant_true_instance

def constant_false_instance():
  return _spot.constant_false_instance()
constant_false_instance = _spot.constant_false_instance

class multop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, multop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Or = _spot.multop_Or
    And = _spot.multop_And
    __swig_getmethods__["instance"] = lambda x: _spot.multop_instance
    if _newclass:instance = staticmethod(_spot.multop_instance)
    def accept(self, *args): return _spot.multop_accept(self, *args)
    def size(self): return _spot.multop_size(self)
    def nth(self, *args): return _spot.multop_nth(self, *args)
    def op(self): return _spot.multop_op(self)
    def op_name(self): return _spot.multop_op_name(self)
    def dump(self): return _spot.multop_dump(self)
    __swig_getmethods__["instance_count"] = lambda x: _spot.multop_instance_count
    if _newclass:instance_count = staticmethod(_spot.multop_instance_count)
    __swig_getmethods__["dump_instances"] = lambda x: _spot.multop_dump_instances
    if _newclass:dump_instances = staticmethod(_spot.multop_dump_instances)
multop_swigregister = _spot.multop_swigregister
multop_swigregister(multop)

def multop_instance(*args):
  return _spot.multop_instance(*args)
multop_instance = _spot.multop_instance

def multop_instance_count():
  return _spot.multop_instance_count()
multop_instance_count = _spot.multop_instance_count

def multop_dump_instances(*args):
  return _spot.multop_dump_instances(*args)
multop_dump_instances = _spot.multop_dump_instances

class unop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Not = _spot.unop_Not
    X = _spot.unop_X
    F = _spot.unop_F
    G = _spot.unop_G
    Finish = _spot.unop_Finish
    __swig_getmethods__["instance"] = lambda x: _spot.unop_instance
    if _newclass:instance = staticmethod(_spot.unop_instance)
    def accept(self, *args): return _spot.unop_accept(self, *args)
    def child(self, *args): return _spot.unop_child(self, *args)
    def op(self): return _spot.unop_op(self)
    def op_name(self): return _spot.unop_op_name(self)
    def dump(self): return _spot.unop_dump(self)
    __swig_getmethods__["instance_count"] = lambda x: _spot.unop_instance_count
    if _newclass:instance_count = staticmethod(_spot.unop_instance_count)
    __swig_getmethods__["dump_instances"] = lambda x: _spot.unop_dump_instances
    if _newclass:dump_instances = staticmethod(_spot.unop_dump_instances)
unop_swigregister = _spot.unop_swigregister
unop_swigregister(unop)

def unop_instance(*args):
  return _spot.unop_instance(*args)
unop_instance = _spot.unop_instance

def unop_instance_count():
  return _spot.unop_instance_count()
unop_instance_count = _spot.unop_instance_count

def unop_dump_instances(*args):
  return _spot.unop_dump_instances(*args)
unop_dump_instances = _spot.unop_dump_instances

class visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_visitor
    __del__ = lambda self : None;
    def visit(self, *args): return _spot.visitor_visit(self, *args)
visitor_swigregister = _spot.visitor_swigregister
visitor_swigregister(visitor)

class const_visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, const_visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, const_visitor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_const_visitor
    __del__ = lambda self : None;
    def visit(self, *args): return _spot.const_visitor_visit(self, *args)
const_visitor_swigregister = _spot.const_visitor_swigregister
const_visitor_swigregister(const_visitor)

class environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, environment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def require(self, *args): return _spot.environment_require(self, *args)
    def name(self): return _spot.environment_name(self)
    __swig_destroy__ = _spot.delete_environment
    __del__ = lambda self : None;
environment_swigregister = _spot.environment_swigregister
environment_swigregister(environment)

class default_environment(environment):
    __swig_setmethods__ = {}
    for _s in [environment]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, default_environment, name, value)
    __swig_getmethods__ = {}
    for _s in [environment]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, default_environment, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_default_environment
    __del__ = lambda self : None;
    def require(self, *args): return _spot.default_environment_require(self, *args)
    def name(self): return _spot.default_environment_name(self)
    __swig_getmethods__["instance"] = lambda x: _spot.default_environment_instance
    if _newclass:instance = staticmethod(_spot.default_environment_instance)
default_environment_swigregister = _spot.default_environment_swigregister
default_environment_swigregister(default_environment)

def default_environment_instance():
  return _spot.default_environment_instance()
default_environment_instance = _spot.default_environment_instance

class parse_error_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parse_error_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parse_error_list, name)
    __repr__ = _swig_repr
    def __nonzero__(self): return _spot.parse_error_list___nonzero__(self)
    def __init__(self): 
        this = _spot.new_parse_error_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_parse_error_list
    __del__ = lambda self : None;
parse_error_list_swigregister = _spot.parse_error_list_swigregister
parse_error_list_swigregister(parse_error_list)


def format_parse_errors(*args):
  return _spot.format_parse_errors(*args)
format_parse_errors = _spot.format_parse_errors

def dotty(*args):
  return _spot.dotty(*args)
dotty = _spot.dotty

def dump(*args):
  return _spot.dump(*args)
dump = _spot.dump
class unabbreviate_logic_visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unabbreviate_logic_visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unabbreviate_logic_visitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_unabbreviate_logic_visitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_unabbreviate_logic_visitor
    __del__ = lambda self : None;
    def visit(self, *args): return _spot.unabbreviate_logic_visitor_visit(self, *args)
    def recurse(self, *args): return _spot.unabbreviate_logic_visitor_recurse(self, *args)
unabbreviate_logic_visitor_swigregister = _spot.unabbreviate_logic_visitor_swigregister
unabbreviate_logic_visitor_swigregister(unabbreviate_logic_visitor)

def parse(*args):
  return _spot.parse(*args)
parse = _spot.parse


def unabbreviate_logic(*args):
  return _spot.unabbreviate_logic(*args)
unabbreviate_logic = _spot.unabbreviate_logic
Reduce_None = _spot.Reduce_None
Reduce_Basics = _spot.Reduce_Basics
Reduce_Syntactic_Implications = _spot.Reduce_Syntactic_Implications
Reduce_Eventuality_And_Universality = _spot.Reduce_Eventuality_And_Universality
Reduce_Containment_Checks = _spot.Reduce_Containment_Checks
Reduce_Containment_Checks_Stronger = _spot.Reduce_Containment_Checks_Stronger
Reduce_All = _spot.Reduce_All

def is_eventual(*args):
  return _spot.is_eventual(*args)
is_eventual = _spot.is_eventual

def is_universal(*args):
  return _spot.is_universal(*args)
is_universal = _spot.is_universal
class unabbreviate_ltl_visitor(unabbreviate_logic_visitor):
    __swig_setmethods__ = {}
    for _s in [unabbreviate_logic_visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unabbreviate_ltl_visitor, name, value)
    __swig_getmethods__ = {}
    for _s in [unabbreviate_logic_visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unabbreviate_ltl_visitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_unabbreviate_ltl_visitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_unabbreviate_ltl_visitor
    __del__ = lambda self : None;
    def visit(self, *args): return _spot.unabbreviate_ltl_visitor_visit(self, *args)
    def recurse(self, *args): return _spot.unabbreviate_ltl_visitor_recurse(self, *args)
unabbreviate_ltl_visitor_swigregister = _spot.unabbreviate_ltl_visitor_swigregister
unabbreviate_ltl_visitor_swigregister(unabbreviate_ltl_visitor)

def negative_normal_form(*args):
  return _spot.negative_normal_form(*args)
negative_normal_form = _spot.negative_normal_form

def reduce(*args):
  return _spot.reduce(*args)
reduce = _spot.reduce

def to_string(*args):
  return _spot.to_string(*args)
to_string = _spot.to_string

def to_spin_string(*args):
  return _spot.to_spin_string(*args)
to_spin_string = _spot.to_spin_string


def unabbreviate_ltl(*args):
  return _spot.unabbreviate_ltl(*args)
unabbreviate_ltl = _spot.unabbreviate_ltl
class bdd_dict(bdd_allocator):
    __swig_setmethods__ = {}
    for _s in [bdd_allocator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bdd_dict, name, value)
    __swig_getmethods__ = {}
    for _s in [bdd_allocator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, bdd_dict, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_bdd_dict()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_bdd_dict
    __del__ = lambda self : None;
    __swig_setmethods__["now_map"] = _spot.bdd_dict_now_map_set
    __swig_getmethods__["now_map"] = _spot.bdd_dict_now_map_get
    if _newclass:now_map = _swig_property(_spot.bdd_dict_now_map_get, _spot.bdd_dict_now_map_set)
    __swig_setmethods__["now_formula_map"] = _spot.bdd_dict_now_formula_map_set
    __swig_getmethods__["now_formula_map"] = _spot.bdd_dict_now_formula_map_get
    if _newclass:now_formula_map = _swig_property(_spot.bdd_dict_now_formula_map_get, _spot.bdd_dict_now_formula_map_set)
    __swig_setmethods__["var_map"] = _spot.bdd_dict_var_map_set
    __swig_getmethods__["var_map"] = _spot.bdd_dict_var_map_get
    if _newclass:var_map = _swig_property(_spot.bdd_dict_var_map_get, _spot.bdd_dict_var_map_set)
    __swig_setmethods__["var_formula_map"] = _spot.bdd_dict_var_formula_map_set
    __swig_getmethods__["var_formula_map"] = _spot.bdd_dict_var_formula_map_get
    if _newclass:var_formula_map = _swig_property(_spot.bdd_dict_var_formula_map_get, _spot.bdd_dict_var_formula_map_set)
    __swig_setmethods__["acc_map"] = _spot.bdd_dict_acc_map_set
    __swig_getmethods__["acc_map"] = _spot.bdd_dict_acc_map_get
    if _newclass:acc_map = _swig_property(_spot.bdd_dict_acc_map_get, _spot.bdd_dict_acc_map_set)
    __swig_setmethods__["acc_formula_map"] = _spot.bdd_dict_acc_formula_map_set
    __swig_getmethods__["acc_formula_map"] = _spot.bdd_dict_acc_formula_map_get
    if _newclass:acc_formula_map = _swig_property(_spot.bdd_dict_acc_formula_map_get, _spot.bdd_dict_acc_formula_map_set)
    __swig_setmethods__["clone_counts"] = _spot.bdd_dict_clone_counts_set
    __swig_getmethods__["clone_counts"] = _spot.bdd_dict_clone_counts_get
    if _newclass:clone_counts = _swig_property(_spot.bdd_dict_clone_counts_get, _spot.bdd_dict_clone_counts_set)
    __swig_setmethods__["next_to_now"] = _spot.bdd_dict_next_to_now_set
    __swig_getmethods__["next_to_now"] = _spot.bdd_dict_next_to_now_get
    if _newclass:next_to_now = _swig_property(_spot.bdd_dict_next_to_now_get, _spot.bdd_dict_next_to_now_set)
    __swig_setmethods__["now_to_next"] = _spot.bdd_dict_now_to_next_set
    __swig_getmethods__["now_to_next"] = _spot.bdd_dict_now_to_next_get
    if _newclass:now_to_next = _swig_property(_spot.bdd_dict_now_to_next_get, _spot.bdd_dict_now_to_next_set)
    def register_proposition(self, *args): return _spot.bdd_dict_register_proposition(self, *args)
    def register_propositions(self, *args): return _spot.bdd_dict_register_propositions(self, *args)
    def register_state(self, *args): return _spot.bdd_dict_register_state(self, *args)
    def register_acceptance_variable(self, *args): return _spot.bdd_dict_register_acceptance_variable(self, *args)
    def register_clone_acc(self, *args): return _spot.bdd_dict_register_clone_acc(self, *args)
    def register_acceptance_variables(self, *args): return _spot.bdd_dict_register_acceptance_variables(self, *args)
    def register_anonymous_variables(self, *args): return _spot.bdd_dict_register_anonymous_variables(self, *args)
    def register_all_variables_of(self, *args): return _spot.bdd_dict_register_all_variables_of(self, *args)
    def unregister_all_my_variables(self, *args): return _spot.bdd_dict_unregister_all_my_variables(self, *args)
    def unregister_variable(self, *args): return _spot.bdd_dict_unregister_variable(self, *args)
    def is_registered_proposition(self, *args): return _spot.bdd_dict_is_registered_proposition(self, *args)
    def is_registered_state(self, *args): return _spot.bdd_dict_is_registered_state(self, *args)
    def is_registered_acceptance_variable(self, *args): return _spot.bdd_dict_is_registered_acceptance_variable(self, *args)
    def dump(self, *args): return _spot.bdd_dict_dump(self, *args)
    def assert_emptiness(self): return _spot.bdd_dict_assert_emptiness(self)
bdd_dict_swigregister = _spot.bdd_dict_swigregister
bdd_dict_swigregister(bdd_dict)


def bdd_print_sat(*args):
  return _spot.bdd_print_sat(*args)
bdd_print_sat = _spot.bdd_print_sat

def bdd_format_sat(*args):
  return _spot.bdd_format_sat(*args)
bdd_format_sat = _spot.bdd_format_sat

def bdd_print_acc(*args):
  return _spot.bdd_print_acc(*args)
bdd_print_acc = _spot.bdd_print_acc

def bdd_print_accset(*args):
  return _spot.bdd_print_accset(*args)
bdd_print_accset = _spot.bdd_print_accset

def bdd_format_accset(*args):
  return _spot.bdd_format_accset(*args)
bdd_format_accset = _spot.bdd_format_accset

def bdd_print_set(*args):
  return _spot.bdd_print_set(*args)
bdd_print_set = _spot.bdd_print_set

def bdd_format_set(*args):
  return _spot.bdd_format_set(*args)
bdd_format_set = _spot.bdd_format_set

def bdd_print_formula(*args):
  return _spot.bdd_print_formula(*args)
bdd_print_formula = _spot.bdd_print_formula

def bdd_format_formula(*args):
  return _spot.bdd_format_formula(*args)
bdd_format_formula = _spot.bdd_format_formula

def bdd_print_dot(*args):
  return _spot.bdd_print_dot(*args)
bdd_print_dot = _spot.bdd_print_dot

def bdd_print_table(*args):
  return _spot.bdd_print_table(*args)
bdd_print_table = _spot.bdd_print_table
class state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def compare(self, *args): return _spot.state_compare(self, *args)
    def hash(self): return _spot.state_hash(self)
    def clone(self): return _spot.state_clone(self)
    def destroy(self): return _spot.state_destroy(self)
state_swigregister = _spot.state_swigregister
state_swigregister(state)

class state_ptr_less_than(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_less_than, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_less_than, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_ptr_less_than___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_ptr_less_than()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_less_than
    __del__ = lambda self : None;
state_ptr_less_than_swigregister = _spot.state_ptr_less_than_swigregister
state_ptr_less_than_swigregister(state_ptr_less_than)

class state_ptr_equal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_equal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_equal, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_ptr_equal___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_ptr_equal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_equal
    __del__ = lambda self : None;
state_ptr_equal_swigregister = _spot.state_ptr_equal_swigregister
state_ptr_equal_swigregister(state_ptr_equal)

class state_ptr_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_hash, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_ptr_hash___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_ptr_hash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_hash
    __del__ = lambda self : None;
state_ptr_hash_swigregister = _spot.state_ptr_hash_swigregister
state_ptr_hash_swigregister(state_ptr_hash)


def shared_state_deleter(*args):
  return _spot.shared_state_deleter(*args)
shared_state_deleter = _spot.shared_state_deleter
class state_shared_ptr_less_than(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_shared_ptr_less_than, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_shared_ptr_less_than, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_shared_ptr_less_than___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_shared_ptr_less_than()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_shared_ptr_less_than
    __del__ = lambda self : None;
state_shared_ptr_less_than_swigregister = _spot.state_shared_ptr_less_than_swigregister
state_shared_ptr_less_than_swigregister(state_shared_ptr_less_than)

class state_shared_ptr_equal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_shared_ptr_equal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_shared_ptr_equal, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_shared_ptr_equal___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_shared_ptr_equal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_shared_ptr_equal
    __del__ = lambda self : None;
state_shared_ptr_equal_swigregister = _spot.state_shared_ptr_equal_swigregister
state_shared_ptr_equal_swigregister(state_shared_ptr_equal)

class state_shared_ptr_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_shared_ptr_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_shared_ptr_hash, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _spot.state_shared_ptr_hash___call__(self, *args)
    def __init__(self): 
        this = _spot.new_state_shared_ptr_hash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_shared_ptr_hash
    __del__ = lambda self : None;
state_shared_ptr_hash_swigregister = _spot.state_shared_ptr_hash_swigregister
state_shared_ptr_hash_swigregister(state_shared_ptr_hash)

class tgba_succ_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_succ_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_succ_iterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba_succ_iterator
    __del__ = lambda self : None;
    def first(self): return _spot.tgba_succ_iterator_first(self)
    def next(self): return _spot.tgba_succ_iterator_next(self)
    def done(self): return _spot.tgba_succ_iterator_done(self)
    def current_state(self): return _spot.tgba_succ_iterator_current_state(self)
    def current_condition(self): return _spot.tgba_succ_iterator_current_condition(self)
    def current_acceptance_conditions(self): return _spot.tgba_succ_iterator_current_acceptance_conditions(self)
tgba_succ_iterator_swigregister = _spot.tgba_succ_iterator_swigregister
tgba_succ_iterator_swigregister(tgba_succ_iterator)

class tgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba
    __del__ = lambda self : None;
    def get_init_state(self): return _spot.tgba_get_init_state(self)
    def succ_iter(self, *args): return _spot.tgba_succ_iter(self, *args)
    def support_conditions(self, *args): return _spot.tgba_support_conditions(self, *args)
    def support_variables(self, *args): return _spot.tgba_support_variables(self, *args)
    def get_dict(self): return _spot.tgba_get_dict(self)
    def format_state(self, *args): return _spot.tgba_format_state(self, *args)
    def transition_annotation(self, *args): return _spot.tgba_transition_annotation(self, *args)
    def project_state(self, *args): return _spot.tgba_project_state(self, *args)
    def all_acceptance_conditions(self): return _spot.tgba_all_acceptance_conditions(self)
    def number_of_acceptance_conditions(self): return _spot.tgba_number_of_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.tgba_neg_acceptance_conditions(self)
tgba_swigregister = _spot.tgba_swigregister
tgba_swigregister(tgba)

class state_bdd(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_bdd, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_bdd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_bdd(*args)
        try: self.this.append(this)
        except: self.this = this
    def as_bdd(self): return _spot.state_bdd_as_bdd(self)
    def compare(self, *args): return _spot.state_bdd_compare(self, *args)
    def hash(self): return _spot.state_bdd_hash(self)
    def clone(self): return _spot.state_bdd_clone(self)
    __swig_destroy__ = _spot.delete_state_bdd
    __del__ = lambda self : None;
state_bdd_swigregister = _spot.state_bdd_swigregister
state_bdd_swigregister(state_bdd)

class taa_tgba(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, taa_tgba, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, taa_tgba, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def add_condition(self, *args): return _spot.taa_tgba_add_condition(self, *args)
    __swig_destroy__ = _spot.delete_taa_tgba
    __del__ = lambda self : None;
    def get_init_state(self): return _spot.taa_tgba_get_init_state(self)
    def succ_iter(self, *args): return _spot.taa_tgba_succ_iter(self, *args)
    def get_dict(self): return _spot.taa_tgba_get_dict(self)
    def format_state(self, *args): return _spot.taa_tgba_format_state(self, *args)
    def all_acceptance_conditions(self): return _spot.taa_tgba_all_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.taa_tgba_neg_acceptance_conditions(self)
taa_tgba_swigregister = _spot.taa_tgba_swigregister
taa_tgba_swigregister(taa_tgba)

class state_set(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_set, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_set, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_set(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(self, *args): return _spot.state_set_compare(self, *args)
    def hash(self): return _spot.state_set_hash(self)
    def clone(self): return _spot.state_set_clone(self)
    __swig_destroy__ = _spot.delete_state_set
    __del__ = lambda self : None;
    def get_state(self): return _spot.state_set_get_state(self)
state_set_swigregister = _spot.state_set_swigregister
state_set_swigregister(state_set)

class taa_succ_iterator(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, taa_succ_iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, taa_succ_iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_taa_succ_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_taa_succ_iterator
    __del__ = lambda self : None;
    def first(self): return _spot.taa_succ_iterator_first(self)
    def next(self): return _spot.taa_succ_iterator_next(self)
    def done(self): return _spot.taa_succ_iterator_done(self)
    def current_state(self): return _spot.taa_succ_iterator_current_state(self)
    def current_condition(self): return _spot.taa_succ_iterator_current_condition(self)
    def current_acceptance_conditions(self): return _spot.taa_succ_iterator_current_acceptance_conditions(self)
taa_succ_iterator_swigregister = _spot.taa_succ_iterator_swigregister
taa_succ_iterator_swigregister(taa_succ_iterator)

class taa_tgba_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, taa_tgba_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, taa_tgba_string, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_taa_tgba_string(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_taa_tgba_string
    __del__ = lambda self : None;
taa_tgba_string_swigregister = _spot.taa_tgba_string_swigregister
taa_tgba_string_swigregister(taa_tgba_string)

class taa_tgba_formula(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, taa_tgba_formula, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, taa_tgba_formula, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_taa_tgba_formula(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_taa_tgba_formula
    __del__ = lambda self : None;
taa_tgba_formula_swigregister = _spot.taa_tgba_formula_swigregister
taa_tgba_formula_swigregister(taa_tgba_formula)

class tgba_bdd_core_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_bdd_core_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_bdd_core_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["relation"] = _spot.tgba_bdd_core_data_relation_set
    __swig_getmethods__["relation"] = _spot.tgba_bdd_core_data_relation_get
    if _newclass:relation = _swig_property(_spot.tgba_bdd_core_data_relation_get, _spot.tgba_bdd_core_data_relation_set)
    __swig_setmethods__["acceptance_conditions"] = _spot.tgba_bdd_core_data_acceptance_conditions_set
    __swig_getmethods__["acceptance_conditions"] = _spot.tgba_bdd_core_data_acceptance_conditions_get
    if _newclass:acceptance_conditions = _swig_property(_spot.tgba_bdd_core_data_acceptance_conditions_get, _spot.tgba_bdd_core_data_acceptance_conditions_set)
    __swig_setmethods__["acceptance_conditions_support"] = _spot.tgba_bdd_core_data_acceptance_conditions_support_set
    __swig_getmethods__["acceptance_conditions_support"] = _spot.tgba_bdd_core_data_acceptance_conditions_support_get
    if _newclass:acceptance_conditions_support = _swig_property(_spot.tgba_bdd_core_data_acceptance_conditions_support_get, _spot.tgba_bdd_core_data_acceptance_conditions_support_set)
    __swig_setmethods__["all_acceptance_conditions"] = _spot.tgba_bdd_core_data_all_acceptance_conditions_set
    __swig_getmethods__["all_acceptance_conditions"] = _spot.tgba_bdd_core_data_all_acceptance_conditions_get
    if _newclass:all_acceptance_conditions = _swig_property(_spot.tgba_bdd_core_data_all_acceptance_conditions_get, _spot.tgba_bdd_core_data_all_acceptance_conditions_set)
    __swig_setmethods__["now_set"] = _spot.tgba_bdd_core_data_now_set_set
    __swig_getmethods__["now_set"] = _spot.tgba_bdd_core_data_now_set_get
    if _newclass:now_set = _swig_property(_spot.tgba_bdd_core_data_now_set_get, _spot.tgba_bdd_core_data_now_set_set)
    __swig_setmethods__["next_set"] = _spot.tgba_bdd_core_data_next_set_set
    __swig_getmethods__["next_set"] = _spot.tgba_bdd_core_data_next_set_get
    if _newclass:next_set = _swig_property(_spot.tgba_bdd_core_data_next_set_get, _spot.tgba_bdd_core_data_next_set_set)
    __swig_setmethods__["nownext_set"] = _spot.tgba_bdd_core_data_nownext_set_set
    __swig_getmethods__["nownext_set"] = _spot.tgba_bdd_core_data_nownext_set_get
    if _newclass:nownext_set = _swig_property(_spot.tgba_bdd_core_data_nownext_set_get, _spot.tgba_bdd_core_data_nownext_set_set)
    __swig_setmethods__["notnow_set"] = _spot.tgba_bdd_core_data_notnow_set_set
    __swig_getmethods__["notnow_set"] = _spot.tgba_bdd_core_data_notnow_set_get
    if _newclass:notnow_set = _swig_property(_spot.tgba_bdd_core_data_notnow_set_get, _spot.tgba_bdd_core_data_notnow_set_set)
    __swig_setmethods__["notnext_set"] = _spot.tgba_bdd_core_data_notnext_set_set
    __swig_getmethods__["notnext_set"] = _spot.tgba_bdd_core_data_notnext_set_get
    if _newclass:notnext_set = _swig_property(_spot.tgba_bdd_core_data_notnext_set_get, _spot.tgba_bdd_core_data_notnext_set_set)
    __swig_setmethods__["var_set"] = _spot.tgba_bdd_core_data_var_set_set
    __swig_getmethods__["var_set"] = _spot.tgba_bdd_core_data_var_set_get
    if _newclass:var_set = _swig_property(_spot.tgba_bdd_core_data_var_set_get, _spot.tgba_bdd_core_data_var_set_set)
    __swig_setmethods__["notvar_set"] = _spot.tgba_bdd_core_data_notvar_set_set
    __swig_getmethods__["notvar_set"] = _spot.tgba_bdd_core_data_notvar_set_get
    if _newclass:notvar_set = _swig_property(_spot.tgba_bdd_core_data_notvar_set_get, _spot.tgba_bdd_core_data_notvar_set_set)
    __swig_setmethods__["varandnext_set"] = _spot.tgba_bdd_core_data_varandnext_set_set
    __swig_getmethods__["varandnext_set"] = _spot.tgba_bdd_core_data_varandnext_set_get
    if _newclass:varandnext_set = _swig_property(_spot.tgba_bdd_core_data_varandnext_set_get, _spot.tgba_bdd_core_data_varandnext_set_set)
    __swig_setmethods__["acc_set"] = _spot.tgba_bdd_core_data_acc_set_set
    __swig_getmethods__["acc_set"] = _spot.tgba_bdd_core_data_acc_set_get
    if _newclass:acc_set = _swig_property(_spot.tgba_bdd_core_data_acc_set_get, _spot.tgba_bdd_core_data_acc_set_set)
    __swig_setmethods__["notacc_set"] = _spot.tgba_bdd_core_data_notacc_set_set
    __swig_getmethods__["notacc_set"] = _spot.tgba_bdd_core_data_notacc_set_get
    if _newclass:notacc_set = _swig_property(_spot.tgba_bdd_core_data_notacc_set_get, _spot.tgba_bdd_core_data_notacc_set_set)
    __swig_setmethods__["negacc_set"] = _spot.tgba_bdd_core_data_negacc_set_set
    __swig_getmethods__["negacc_set"] = _spot.tgba_bdd_core_data_negacc_set_get
    if _newclass:negacc_set = _swig_property(_spot.tgba_bdd_core_data_negacc_set_get, _spot.tgba_bdd_core_data_negacc_set_set)
    __swig_setmethods__["dict"] = _spot.tgba_bdd_core_data_dict_set
    __swig_getmethods__["dict"] = _spot.tgba_bdd_core_data_dict_get
    if _newclass:dict = _swig_property(_spot.tgba_bdd_core_data_dict_get, _spot.tgba_bdd_core_data_dict_set)
    def __init__(self, *args): 
        this = _spot.new_tgba_bdd_core_data(*args)
        try: self.this.append(this)
        except: self.this = this
    def declare_now_next(self, *args): return _spot.tgba_bdd_core_data_declare_now_next(self, *args)
    def declare_atomic_prop(self, *args): return _spot.tgba_bdd_core_data_declare_atomic_prop(self, *args)
    def declare_acceptance_condition(self, *args): return _spot.tgba_bdd_core_data_declare_acceptance_condition(self, *args)
    def delete_unaccepting_scc(self, *args): return _spot.tgba_bdd_core_data_delete_unaccepting_scc(self, *args)
    __swig_destroy__ = _spot.delete_tgba_bdd_core_data
    __del__ = lambda self : None;
tgba_bdd_core_data_swigregister = _spot.tgba_bdd_core_data_swigregister
tgba_bdd_core_data_swigregister(tgba_bdd_core_data)

class tgba_succ_iterator_concrete(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_succ_iterator_concrete, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_succ_iterator_concrete, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_succ_iterator_concrete(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_succ_iterator_concrete
    __del__ = lambda self : None;
    def first(self): return _spot.tgba_succ_iterator_concrete_first(self)
    def next(self): return _spot.tgba_succ_iterator_concrete_next(self)
    def done(self): return _spot.tgba_succ_iterator_concrete_done(self)
    def current_state(self): return _spot.tgba_succ_iterator_concrete_current_state(self)
    def current_condition(self): return _spot.tgba_succ_iterator_concrete_current_condition(self)
    def current_acceptance_conditions(self): return _spot.tgba_succ_iterator_concrete_current_acceptance_conditions(self)
tgba_succ_iterator_concrete_swigregister = _spot.tgba_succ_iterator_concrete_swigregister
tgba_succ_iterator_concrete_swigregister(tgba_succ_iterator_concrete)

class tgba_bdd_concrete(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_bdd_concrete, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_bdd_concrete, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_bdd_concrete(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_bdd_concrete
    __del__ = lambda self : None;
    def set_init_state(self, *args): return _spot.tgba_bdd_concrete_set_init_state(self, *args)
    def get_init_state(self): return _spot.tgba_bdd_concrete_get_init_state(self)
    def get_init_bdd(self): return _spot.tgba_bdd_concrete_get_init_bdd(self)
    def succ_iter(self, *args): return _spot.tgba_bdd_concrete_succ_iter(self, *args)
    def format_state(self, *args): return _spot.tgba_bdd_concrete_format_state(self, *args)
    def get_dict(self): return _spot.tgba_bdd_concrete_get_dict(self)
    def get_core_data(self): return _spot.tgba_bdd_concrete_get_core_data(self)
    def all_acceptance_conditions(self): return _spot.tgba_bdd_concrete_all_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.tgba_bdd_concrete_neg_acceptance_conditions(self)
    def delete_unaccepting_scc(self): return _spot.tgba_bdd_concrete_delete_unaccepting_scc(self)
tgba_bdd_concrete_swigregister = _spot.tgba_bdd_concrete_swigregister
tgba_bdd_concrete_swigregister(tgba_bdd_concrete)

class state_explicit(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_explicit, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_explicit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_state_explicit()
        try: self.this.append(this)
        except: self.this = this
    def compare(self, *args): return _spot.state_explicit_compare(self, *args)
    def hash(self): return _spot.state_explicit_hash(self)
    def clone(self): return _spot.state_explicit_clone(self)
    def empty(self): return _spot.state_explicit_empty(self)
    def destroy(self): return _spot.state_explicit_destroy(self)
    __swig_setmethods__["successors"] = _spot.state_explicit_successors_set
    __swig_getmethods__["successors"] = _spot.state_explicit_successors_get
    if _newclass:successors = _swig_property(_spot.state_explicit_successors_get, _spot.state_explicit_successors_set)
state_explicit_swigregister = _spot.state_explicit_swigregister
state_explicit_swigregister(state_explicit)

class tgba_explicit(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def add_default_init(self): return _spot.tgba_explicit_add_default_init(self)
    def create_transition(self, *args): return _spot.tgba_explicit_create_transition(self, *args)
    def add_condition(self, *args): return _spot.tgba_explicit_add_condition(self, *args)
    def add_conditions(self, *args): return _spot.tgba_explicit_add_conditions(self, *args)
    def copy_acceptance_conditions_of(self, *args): return _spot.tgba_explicit_copy_acceptance_conditions_of(self, *args)
    def set_acceptance_conditions(self, *args): return _spot.tgba_explicit_set_acceptance_conditions(self, *args)
    def has_acceptance_condition(self, *args): return _spot.tgba_explicit_has_acceptance_condition(self, *args)
    def add_acceptance_condition(self, *args): return _spot.tgba_explicit_add_acceptance_condition(self, *args)
    def add_acceptance_conditions(self, *args): return _spot.tgba_explicit_add_acceptance_conditions(self, *args)
    __swig_destroy__ = _spot.delete_tgba_explicit
    __del__ = lambda self : None;
    def get_init_state(self): return _spot.tgba_explicit_get_init_state(self)
    def succ_iter(self, *args): return _spot.tgba_explicit_succ_iter(self, *args)
    def get_dict(self): return _spot.tgba_explicit_get_dict(self)
    def all_acceptance_conditions(self): return _spot.tgba_explicit_all_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.tgba_explicit_neg_acceptance_conditions(self)
    def format_state(self, *args): return _spot.tgba_explicit_format_state(self, *args)
tgba_explicit_swigregister = _spot.tgba_explicit_swigregister
tgba_explicit_swigregister(tgba_explicit)

class tgba_explicit_succ_iterator(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit_succ_iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit_succ_iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_explicit_succ_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def first(self): return _spot.tgba_explicit_succ_iterator_first(self)
    def next(self): return _spot.tgba_explicit_succ_iterator_next(self)
    def done(self): return _spot.tgba_explicit_succ_iterator_done(self)
    def current_state(self): return _spot.tgba_explicit_succ_iterator_current_state(self)
    def current_condition(self): return _spot.tgba_explicit_succ_iterator_current_condition(self)
    def current_acceptance_conditions(self): return _spot.tgba_explicit_succ_iterator_current_acceptance_conditions(self)
    __swig_destroy__ = _spot.delete_tgba_explicit_succ_iterator
    __del__ = lambda self : None;
tgba_explicit_succ_iterator_swigregister = _spot.tgba_explicit_succ_iterator_swigregister
tgba_explicit_succ_iterator_swigregister(tgba_explicit_succ_iterator)

class tgba_explicit_string(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit_string, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit_string, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba_explicit_string
    __del__ = lambda self : None;
tgba_explicit_string_swigregister = _spot.tgba_explicit_string_swigregister
tgba_explicit_string_swigregister(tgba_explicit_string)

class tgba_explicit_formula(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit_formula, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit_formula, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba_explicit_formula
    __del__ = lambda self : None;
tgba_explicit_formula_swigregister = _spot.tgba_explicit_formula_swigregister
tgba_explicit_formula_swigregister(tgba_explicit_formula)

class tgba_explicit_number(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit_number, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit_number, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba_explicit_number
    __del__ = lambda self : None;
tgba_explicit_number_swigregister = _spot.tgba_explicit_number_swigregister
tgba_explicit_number_swigregister(tgba_explicit_number)

class state_product(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_product, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_product, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_product(*args)
        try: self.this.append(this)
        except: self.this = this
    def destroy(self): return _spot.state_product_destroy(self)
    def left(self): return _spot.state_product_left(self)
    def right(self): return _spot.state_product_right(self)
    def compare(self, *args): return _spot.state_product_compare(self, *args)
    def hash(self): return _spot.state_product_hash(self)
    def clone(self): return _spot.state_product_clone(self)
state_product_swigregister = _spot.state_product_swigregister
state_product_swigregister(state_product)

class tgba_product(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_product, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_product, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_product(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_product
    __del__ = lambda self : None;
    def get_init_state(self): return _spot.tgba_product_get_init_state(self)
    def succ_iter(self, *args): return _spot.tgba_product_succ_iter(self, *args)
    def get_dict(self): return _spot.tgba_product_get_dict(self)
    def format_state(self, *args): return _spot.tgba_product_format_state(self, *args)
    def transition_annotation(self, *args): return _spot.tgba_product_transition_annotation(self, *args)
    def project_state(self, *args): return _spot.tgba_product_project_state(self, *args)
    def all_acceptance_conditions(self): return _spot.tgba_product_all_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.tgba_product_neg_acceptance_conditions(self)
tgba_product_swigregister = _spot.tgba_product_swigregister
tgba_product_swigregister(tgba_product)

class tgba_product_init(tgba_product):
    __swig_setmethods__ = {}
    for _s in [tgba_product]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_product_init, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_product]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_product_init, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_product_init(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_init_state(self): return _spot.tgba_product_init_get_init_state(self)
    __swig_destroy__ = _spot.delete_tgba_product_init
    __del__ = lambda self : None;
tgba_product_init_swigregister = _spot.tgba_product_init_swigregister
tgba_product_init_swigregister(tgba_product_init)

class tgba_tba_proxy(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_tba_proxy, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_tba_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_tba_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_tba_proxy
    __del__ = lambda self : None;
    def get_init_state(self): return _spot.tgba_tba_proxy_get_init_state(self)
    def succ_iter(self, *args): return _spot.tgba_tba_proxy_succ_iter(self, *args)
    def get_dict(self): return _spot.tgba_tba_proxy_get_dict(self)
    def format_state(self, *args): return _spot.tgba_tba_proxy_format_state(self, *args)
    def project_state(self, *args): return _spot.tgba_tba_proxy_project_state(self, *args)
    def all_acceptance_conditions(self): return _spot.tgba_tba_proxy_all_acceptance_conditions(self)
    def neg_acceptance_conditions(self): return _spot.tgba_tba_proxy_neg_acceptance_conditions(self)
    def common_acceptance_conditions_of_original_state(self, *args): return _spot.tgba_tba_proxy_common_acceptance_conditions_of_original_state(self, *args)
    def union_acceptance_conditions_of_original_state(self, *args): return _spot.tgba_tba_proxy_union_acceptance_conditions_of_original_state(self, *args)
tgba_tba_proxy_swigregister = _spot.tgba_tba_proxy_swigregister
tgba_tba_proxy_swigregister(tgba_tba_proxy)

class tgba_sba_proxy(tgba_tba_proxy):
    __swig_setmethods__ = {}
    for _s in [tgba_tba_proxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_sba_proxy, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_tba_proxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_sba_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_sba_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    def state_is_accepting(self, *args): return _spot.tgba_sba_proxy_state_is_accepting(self, *args)
    def get_init_state(self): return _spot.tgba_sba_proxy_get_init_state(self)
    __swig_destroy__ = _spot.delete_tgba_sba_proxy
    __del__ = lambda self : None;
tgba_sba_proxy_swigregister = _spot.tgba_sba_proxy_swigregister
tgba_sba_proxy_swigregister(tgba_sba_proxy)

class dotty_decorator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dotty_decorator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dotty_decorator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_dotty_decorator
    __del__ = lambda self : None;
    def state_decl(self, *args): return _spot.dotty_decorator_state_decl(self, *args)
    def link_decl(self, *args): return _spot.dotty_decorator_link_decl(self, *args)
    __swig_getmethods__["instance"] = lambda x: _spot.dotty_decorator_instance
    if _newclass:instance = staticmethod(_spot.dotty_decorator_instance)
dotty_decorator_swigregister = _spot.dotty_decorator_swigregister
dotty_decorator_swigregister(dotty_decorator)

def dotty_decorator_instance():
  return _spot.dotty_decorator_instance()
dotty_decorator_instance = _spot.dotty_decorator_instance


def tgba_dupexp_bfs(*args):
  return _spot.tgba_dupexp_bfs(*args)
tgba_dupexp_bfs = _spot.tgba_dupexp_bfs

def tgba_dupexp_dfs(*args):
  return _spot.tgba_dupexp_dfs(*args)
tgba_dupexp_dfs = _spot.tgba_dupexp_dfs
class emptiness_check_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check_result, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_emptiness_check_result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_emptiness_check_result
    __del__ = lambda self : None;
    def accepting_run(self): return _spot.emptiness_check_result_accepting_run(self)
    def automaton(self): return _spot.emptiness_check_result_automaton(self)
    def options(self): return _spot.emptiness_check_result_options(self)
    def parse_options(self, *args): return _spot.emptiness_check_result_parse_options(self, *args)
    def statistics(self): return _spot.emptiness_check_result_statistics(self)
emptiness_check_result_swigregister = _spot.emptiness_check_result_swigregister
emptiness_check_result_swigregister(emptiness_check_result)

def dotty_reachable(*args):
  return _spot.dotty_reachable(*args)
dotty_reachable = _spot.dotty_reachable

class emptiness_check(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_emptiness_check
    __del__ = lambda self : None;
    def automaton(self): return _spot.emptiness_check_automaton(self)
    def options(self): return _spot.emptiness_check_options(self)
    def parse_options(self, *args): return _spot.emptiness_check_parse_options(self, *args)
    def safe(self): return _spot.emptiness_check_safe(self)
    def check(self): return _spot.emptiness_check_check(self)
    def statistics(self): return _spot.emptiness_check_statistics(self)
    def print_stats(self, *args): return _spot.emptiness_check_print_stats(self, *args)
    def options_updated(self, *args): return _spot.emptiness_check_options_updated(self, *args)
emptiness_check_swigregister = _spot.emptiness_check_swigregister
emptiness_check_swigregister(emptiness_check)

class emptiness_check_instantiator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check_instantiator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check_instantiator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["construct"] = lambda x: _spot.emptiness_check_instantiator_construct
    if _newclass:construct = staticmethod(_spot.emptiness_check_instantiator_construct)
    def instantiate(self, *args): return _spot.emptiness_check_instantiator_instantiate(self, *args)
    def options(self, *args): return _spot.emptiness_check_instantiator_options(self, *args)
    def min_acceptance_conditions(self): return _spot.emptiness_check_instantiator_min_acceptance_conditions(self)
    def max_acceptance_conditions(self): return _spot.emptiness_check_instantiator_max_acceptance_conditions(self)
    __swig_destroy__ = _spot.delete_emptiness_check_instantiator
    __del__ = lambda self : None;
emptiness_check_instantiator_swigregister = _spot.emptiness_check_instantiator_swigregister
emptiness_check_instantiator_swigregister(emptiness_check_instantiator)

def emptiness_check_instantiator_construct(*args):
  return _spot.emptiness_check_instantiator_construct(*args)
emptiness_check_instantiator_construct = _spot.emptiness_check_instantiator_construct

class tgba_run(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_run, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_run, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prefix"] = _spot.tgba_run_prefix_set
    __swig_getmethods__["prefix"] = _spot.tgba_run_prefix_get
    if _newclass:prefix = _swig_property(_spot.tgba_run_prefix_get, _spot.tgba_run_prefix_set)
    __swig_setmethods__["cycle"] = _spot.tgba_run_cycle_set
    __swig_getmethods__["cycle"] = _spot.tgba_run_cycle_get
    if _newclass:cycle = _swig_property(_spot.tgba_run_cycle_get, _spot.tgba_run_cycle_set)
    __swig_destroy__ = _spot.delete_tgba_run
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _spot.new_tgba_run(*args)
        try: self.this.append(this)
        except: self.this = this
tgba_run_swigregister = _spot.tgba_run_swigregister
tgba_run_swigregister(tgba_run)


def print_tgba_run(*args):
  return _spot.print_tgba_run(*args)
print_tgba_run = _spot.print_tgba_run

def tgba_run_to_tgba(*args):
  return _spot.tgba_run_to_tgba(*args)
tgba_run_to_tgba = _spot.tgba_run_to_tgba
class couvreur99_check(emptiness_check):
    __swig_setmethods__ = {}
    for _s in [emptiness_check]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, couvreur99_check, name, value)
    __swig_getmethods__ = {}
    for _s in [emptiness_check]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, couvreur99_check, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_couvreur99_check(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_couvreur99_check
    __del__ = lambda self : None;
    def check(self): return _spot.couvreur99_check_check(self)
    def print_stats(self, *args): return _spot.couvreur99_check_print_stats(self, *args)
    def result(self): return _spot.couvreur99_check_result(self)
couvreur99_check_swigregister = _spot.couvreur99_check_swigregister
couvreur99_check_swigregister(couvreur99_check)

def couvreur99(*args):
  return _spot.couvreur99(*args)
couvreur99 = _spot.couvreur99

class couvreur99_check_shy(couvreur99_check):
    __swig_setmethods__ = {}
    for _s in [couvreur99_check]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, couvreur99_check_shy, name, value)
    __swig_getmethods__ = {}
    for _s in [couvreur99_check]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, couvreur99_check_shy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_couvreur99_check_shy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_couvreur99_check_shy
    __del__ = lambda self : None;
    def check(self): return _spot.couvreur99_check_shy_check(self)
couvreur99_check_shy_swigregister = _spot.couvreur99_check_shy_swigregister
couvreur99_check_shy_swigregister(couvreur99_check_shy)


def lbtt_reachable(*args):
  return _spot.lbtt_reachable(*args)
lbtt_reachable = _spot.lbtt_reachable

def ltl_to_tgba_lacim(*args):
  return _spot.ltl_to_tgba_lacim(*args)
ltl_to_tgba_lacim = _spot.ltl_to_tgba_lacim

def minimize_monitor(*args):
  return _spot.minimize_monitor(*args)
minimize_monitor = _spot.minimize_monitor

def minimize_wdba(*args):
  return _spot.minimize_wdba(*args)
minimize_wdba = _spot.minimize_wdba
Reduce_quotient_Dir_Sim = _spot.Reduce_quotient_Dir_Sim
Reduce_transition_Dir_Sim = _spot.Reduce_transition_Dir_Sim
Reduce_quotient_Del_Sim = _spot.Reduce_quotient_Del_Sim
Reduce_transition_Del_Sim = _spot.Reduce_transition_Del_Sim
Reduce_Scc = _spot.Reduce_Scc
class tgba_run_dotty_decorator(dotty_decorator):
    __swig_setmethods__ = {}
    for _s in [dotty_decorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_run_dotty_decorator, name, value)
    __swig_getmethods__ = {}
    for _s in [dotty_decorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_run_dotty_decorator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_run_dotty_decorator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_run_dotty_decorator
    __del__ = lambda self : None;
    def state_decl(self, *args): return _spot.tgba_run_dotty_decorator_state_decl(self, *args)
    def link_decl(self, *args): return _spot.tgba_run_dotty_decorator_link_decl(self, *args)
tgba_run_dotty_decorator_swigregister = _spot.tgba_run_dotty_decorator_swigregister
tgba_run_dotty_decorator_swigregister(tgba_run_dotty_decorator)

def ltl_to_taa(*args):
  return _spot.ltl_to_taa(*args)
ltl_to_taa = _spot.ltl_to_taa

def ltl_to_tgba_fm(*args):
  return _spot.ltl_to_tgba_fm(*args)
ltl_to_tgba_fm = _spot.ltl_to_tgba_fm

def explicit_magic_search(*args):
  return _spot.explicit_magic_search(*args)
explicit_magic_search = _spot.explicit_magic_search

def bit_state_hashing_magic_search(*args):
  return _spot.bit_state_hashing_magic_search(*args)
bit_state_hashing_magic_search = _spot.bit_state_hashing_magic_search

def magic_search(*args):
  return _spot.magic_search(*args)
magic_search = _spot.magic_search

def minimize_obligation(*args):
  return _spot.minimize_obligation(*args)
minimize_obligation = _spot.minimize_obligation

def never_claim_reachable(*args):
  return _spot.never_claim_reachable(*args)
never_claim_reachable = _spot.never_claim_reachable

def reduc_tgba_sim(*args):
  return _spot.reduc_tgba_sim(*args)
reduc_tgba_sim = _spot.reduc_tgba_sim


def tgba_save_reachable(*args):
  return _spot.tgba_save_reachable(*args)
tgba_save_reachable = _spot.tgba_save_reachable
class tgba_statistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_statistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_statistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transitions"] = _spot.tgba_statistics_transitions_set
    __swig_getmethods__["transitions"] = _spot.tgba_statistics_transitions_get
    if _newclass:transitions = _swig_property(_spot.tgba_statistics_transitions_get, _spot.tgba_statistics_transitions_set)
    __swig_setmethods__["states"] = _spot.tgba_statistics_states_set
    __swig_getmethods__["states"] = _spot.tgba_statistics_states_get
    if _newclass:states = _swig_property(_spot.tgba_statistics_states_get, _spot.tgba_statistics_states_set)
    def __init__(self): 
        this = _spot.new_tgba_statistics()
        try: self.this.append(this)
        except: self.this = this
    def dump(self, *args): return _spot.tgba_statistics_dump(self, *args)
    __swig_destroy__ = _spot.delete_tgba_statistics
    __del__ = lambda self : None;
tgba_statistics_swigregister = _spot.tgba_statistics_swigregister
tgba_statistics_swigregister(tgba_statistics)

def scc_filter(*args):
  return _spot.scc_filter(*args)
scc_filter = _spot.scc_filter

class tgba_sub_statistics(tgba_statistics):
    __swig_setmethods__ = {}
    for _s in [tgba_statistics]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_sub_statistics, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_statistics]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_sub_statistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sub_transitions"] = _spot.tgba_sub_statistics_sub_transitions_set
    __swig_getmethods__["sub_transitions"] = _spot.tgba_sub_statistics_sub_transitions_get
    if _newclass:sub_transitions = _swig_property(_spot.tgba_sub_statistics_sub_transitions_get, _spot.tgba_sub_statistics_sub_transitions_set)
    def __init__(self): 
        this = _spot.new_tgba_sub_statistics()
        try: self.this.append(this)
        except: self.this = this
    def dump(self, *args): return _spot.tgba_sub_statistics_dump(self, *args)
    __swig_destroy__ = _spot.delete_tgba_sub_statistics
    __del__ = lambda self : None;
tgba_sub_statistics_swigregister = _spot.tgba_sub_statistics_swigregister
tgba_sub_statistics_swigregister(tgba_sub_statistics)


def stats_reachable(*args):
  return _spot.stats_reachable(*args)
stats_reachable = _spot.stats_reachable

def sub_stats_reachable(*args):
  return _spot.sub_stats_reachable(*args)
sub_stats_reachable = _spot.sub_stats_reachable
class ostream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_ostream
    __del__ = lambda self : None;
ostream_swigregister = _spot.ostream_swigregister
ostream_swigregister(ostream)

class ofstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_ofstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_ofstream
    __del__ = lambda self : None;
ofstream_swigregister = _spot.ofstream_swigregister
ofstream_swigregister(ofstream)

class ostringstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _spot.new_ostringstream()
        try: self.this.append(this)
        except: self.this = this
    def str(self): return _spot.ostringstream_str(self)
    __swig_destroy__ = _spot.delete_ostringstream
    __del__ = lambda self : None;
ostringstream_swigregister = _spot.ostringstream_swigregister
ostringstream_swigregister(ostringstream)


def minimize_obligation_new(*args):
  return _spot.minimize_obligation_new(*args)
minimize_obligation_new = _spot.minimize_obligation_new

def empty_parse_error_list():
  return _spot.empty_parse_error_list()
empty_parse_error_list = _spot.empty_parse_error_list

def get_cout():
  return _spot.get_cout()
get_cout = _spot.get_cout

def get_cerr():
  return _spot.get_cerr()
get_cerr = _spot.get_cerr

def print_on(*args):
  return _spot.print_on(*args)
print_on = _spot.print_on

def unblock_signal(*args):
  return _spot.unblock_signal(*args)
unblock_signal = _spot.unblock_signal
# This file is compatible with both classic and new-style classes.


