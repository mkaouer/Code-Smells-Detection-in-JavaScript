
#line 3 "Config-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[621] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,   60,    9,
        1,    3,    9,    9,    9,    9,    9,    9,    9,    4,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   52,   55,    1,   58,   55,   54,   56,   57,
       56,   57,   56,    9,    1,    9,    0,    2,    9,    9,
        9,    9,    9,    9,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   56,

       57,   57,   56,   57,   56,   57,   56,   57,   57,   56,
       57,   56,    9,    9,    9,    9,    9,    9,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   56,   56,   56,   57,   56,   57,
       57,   56,    9,    9,    9,    9,    9,    9,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   11,   53,   53,   53,   53,
       53,   13,   53,   53,   53,   53,   27,   53,   53,   53,

       53,   53,   53,   53,   53,   56,   56,    9,    9,    9,
        9,    9,    9,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   56,    9,    9,
        9,    9,    9,    9,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       22,   53,   53,   53,   53,   53,   53,   53,   53,    9,
        9,    9,    9,    9,    9,   53,   53,   53,   53,   53,

       53,   53,   53,   10,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,    9,
        9,    9,    9,    9,    9,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,    5,    9,
        9,    9,    9,    9,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   24,   53,   53,    9,    9,    9,
        9,    5,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   21,   53,
       53,   43,   44,   12,   53,   30,   53,   53,   53,   53,
       53,   53,   53,   53,    9,    9,    9,    9,   53,   32,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   18,   53,   53,   42,   53,   53,   53,
       53,   53,   53,   53,   53,   51,    9,    9,    9,    9,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   38,   53,   53,   53,   41,   53,   26,   53,

       53,   53,   48,   53,   53,   53,    9,    6,    9,    9,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       36,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   49,   53,    8,    5,    9,   53,   33,   29,   53,
       15,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,    9,   53,   14,
       53,   17,   53,   25,   53,   37,   53,   53,   53,   53,
       53,   46,   53,   53,   53,   53,    9,   53,   16,   53,
       53,   39,   53,   53,   20,   53,   53,   53,   28,   53,
        7,   53,   53,   53,   53,   19,   53,   53,   23,   50,

       53,   53,   53,   53,   53,   53,   53,   53,   35,   40,
       45,   53,   31,   53,   53,   53,   47,   53,   34,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    6,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    1,    1,    1,    8,    9,   10,   11,   12,   13,
       14,   15,   16,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
        1,   33,    1,    1,    1,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,    1,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    3,    1,    1,    1,    4,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[641] =
    {   0,
        0,   58,  117,    0,    4,   15,   25,   42,  201,    0,
      193, 1370,   21,   18,   17,   23,   24,   24,   29,    0,
        0,   30,    0,   45,   43,   67,   56,   66,   62,  166,
      160,   52,  173,   63,  174,  175,  173,   61,  166,  176,
      178,  170,    0, 1370,  105, 1370,  102, 1370,  196,  188,
      224,   89,    0,    0,   91,   54,   46, 1370,  179,  173,
      197,  210,  225,  226,    0,   99,  226,  225,  224,  230,
      220,  228,  228,  235,  218,  228,  227,  228,  228,  228,
      225,  241,  234,  224,  229,  234,  244,  259,  263,  266,
      269,  261,  257,  266,  290,  266,  269,  286,  271,  293,

      296,   29,    0,  297,  298,    0,  330,  302,    9,   18,
       13,  319,  301,  308,  319,  320,  313,  320,  317,  320,
      323,  325,  324,  322,  341,  338,  342,  339,  331,  349,
      346,  350,  342,  349,  350,  357,  348,  356,  355,  358,
      381,  375,  369,  381,  381,  374,  384,  376,  378,  387,
      385,  393,  386,  385,  404,  405,    0,  304,  428,    7,
      437,  442,  397,  399,  428,  429,  430,  425,  439,  429,
      430,  441,  448,  441,  431,  437,  442,  435,  452,  447,
      442,  461,  454,  447,  454,    0,  451,  450,  462,  460,
      469,    0,  472,  473,  493,  491,    0,  483,  480,  484,

      492,  490,  488,  483,  487,  519,    1,  496,  497,  498,
      498,  493,  506,  502,  523,  528,  533,  522,  522,  530,
      525,  539,  545,  532,  537,  549,  540,  549,  553,  550,
      538,  547,  543,  541,  556,  544,  551,  551,  557,  577,
      574,  573,  576,  577,  575,  581,  587,  603,  585,  604,
      592,  602,  593,  608,  603,  599,  599,  606,  612,  604,
      605,  611,  622,  616,  611,  612,  618,  631,  642,  641,
      640,  638,  639,  641,  639,  645,  639,  650,  642,  656,
        0,  647,  664,  657,  650,  656,  666,  657,  663,  670,
      665,  665,  675,  688,  675,  694,  679,  680,  685,  682,

      702,  694,  707,    0,  705,  702,  697,  708,  692,  698,
      699,  716,  720,  713,  711,  720,  716,  726,  713,  735,
      726,  741,  728,  734,  735,  741,  733,  750,  743,  749,
      747,  744,  745,  762,  754,  750,  761,  762,  758,  765,
      767,  766,  781,  770,  770,  775,  781,  783,  790,  791,
      782,  799,  787,  802,  793,  809,  797,  806,  811,  800,
      809,  807,  805,  821,  815,  807,  821,  824,    0,  815,
      826,  835,  839,  828,  845,  832,  838,  848,  841,  853,
      858,  862,  862,  849,  858,  854,  852,  858,  852,  865,
      865,  872,  864,  860,  880,  868,  873,  884,  887,  892,

      885,  894,  903,  888,    0,  891,  889,  906,  902,  898,
      904,    0,  915,  896,  904,  907,  930,  901,  909,  918,
      930,  927,  923,  934,  930,  927,  943,  940,    0,  936,
      932,    0,    0,    0,  944,    0,  944,  959,  948,  949,
      967,  961,  954,  948,  959,  963,  968,  963,  965,    0,
      976,  966,  980,  984,  987,  990,  981,  985,  982,  990,
     1003,  995,  995,    0,  999,  995,    0, 1005, 1004, 1004,
     1015, 1001, 1019, 1010, 1021,    0, 1018, 1019, 1025, 1021,
     1026, 1023, 1042, 1039, 1034, 1045, 1053, 1040, 1051, 1044,
     1038, 1055,    0, 1054, 1055, 1070,    0, 1057,    0, 1066,

     1071, 1065,    0, 1069, 1057, 1068, 1065,    0, 1078, 1083,
     1088, 1070, 1084, 1093, 1085, 1100, 1092, 1097, 1093, 1104,
        0, 1095, 1107, 1114, 1116, 1120, 1117, 1108, 1113, 1124,
     1123,    0, 1116,    0,    0, 1120, 1118,    0,    0, 1131,
        0, 1140, 1125, 1128, 1122, 1133, 1124, 1137, 1143, 1157,
     1145, 1150, 1141, 1149, 1154, 1156, 1167, 1164, 1177,    0,
     1169,    0, 1165,    0, 1164,    0, 1160, 1168, 1183, 1168,
     1176,    0, 1186, 1176, 1173, 1179, 1181, 1181,    0, 1191,
     1200,    0, 1205, 1205,    0, 1207, 1203, 1199,    0, 1196,
        0, 1213, 1219, 1210, 1211,    0, 1212, 1215,    0,    0,

     1216, 1222, 1213, 1214, 1215, 1236, 1229, 1231,    0,    0,
        0, 1230,    0, 1241, 1227, 1233,    0, 1236,    0, 1370,
     1293, 1297, 1301, 1305, 1309,    0, 1313, 1317, 1321, 1325,
     1329, 1333, 1337, 1341, 1345, 1349, 1353, 1357, 1361, 1365
    } ;

static yyconst flex_int16_t yy_def[641] =
    {   0,
      621,  621,  620,    3,  622,  622,  623,  623,  620,  624,
      620,  620,  625,  624,  624,  624,  624,  624,  624,  624,
      626,  627,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  620,  620,  620,  628,  620,  629,  630,
      631,  632,  633,  624,  620,  625,  628,  620,  624,  624,
      624,  624,  624,  624,  626,  627,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  629,

      630,  632,  634,  630,  635,  630,  631,  636,  637,  638,
      632,  629,  624,  624,  624,  624,  624,  624,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  629,  629,  633,  636,  639,  636,
      637,  631,  624,  624,  624,  624,  624,  624,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  631,  640,  624,  624,  624,
      624,  624,  624,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  631,  624,  624,
      624,  624,  624,  624,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  624,
      624,  624,  624,  624,  624,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  624,
      624,  624,  624,  624,  624,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  624,  624,
      624,  624,  624,  624,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  624,  624,  624,
      624,  624,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  624,  624,  624,  624,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  624,  624,  624,  624,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  624,  624,  624,  624,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  624,  624,  624,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  624,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  624,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      624,  626,  626,  626,  626,  626,  626,  626,  626,  626,

      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,    0,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620
    } ;

static yyconst flex_int16_t yy_nxt[1431] =
    {   0,
       65,   11,   12,   58,   13,   45,   46,   14,   47,   58,
       48,   58,   15,   16,  159,   17,   45,   46,  105,   47,
       58,   48,   57,   58,   18,   19,   11,   46,   50,   51,
       52,   57,   58,   14,  105,   59,   57,   60,   15,   16,
       61,   17,   62,   11,   46,   50,   51,   52,   58,   63,
       18,   19,   64,   67,   69,   57,   58,   53,   20,   11,
       12,   59,   13,   60,   68,   14,   61,   72,   62,   76,
       15,   16,   82,   17,   53,   63,   73,   77,   64,   67,
       69,   70,   18,   19,   95,   74,   86,   71,   75,   87,
       68,   14,   55,   72,  105,   76,   15,   16,   82,   17,

       57,   58,   73,   77,   58,   57,   55,   70,   18,   19,
       95,   74,   86,   71,   75,   87,   20,   21,   11,   12,
       21,   22,   21,   23,   24,   25,   26,   27,   28,   29,
       30,   21,   31,   21,   21,   32,   33,   34,   35,   21,
       36,   37,   38,   39,   40,   41,   42,   21,   21,   21,
       24,   25,   26,   27,   28,   29,   30,   21,   31,   21,
       21,   32,   33,   34,   35,   21,   36,   37,   38,   39,
       40,   41,   42,   21,   21,   21,   43,   78,   80,   81,
       83,   88,   90,   79,   84,   96,   91,   97,   93,   98,
       99,  105,  113,   85,   55,   92,  114,   89,   94,  101,

      620,  102,  620,   78,   80,   81,   83,   88,   90,   79,
       84,   96,   91,   97,   93,   98,   99,  115,  113,   85,
      106,   92,  114,   89,   94,   57,   58,  108,  103,  109,
      620,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  115,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  110,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  140,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  141,  143,  142,  144,  145,  146,  147,  148,
      620,  151,  152,  153,  154,  140,  101,  149,  102,  105,

      105,  101,  620,  102,   58,  159,   58,  159,  141,  143,
      142,  144,  145,  146,  147,  148,  150,  151,  152,  153,
      154,  163,  101,  149,  102,  103,  164,  165,  106,  106,
      157,   57,   58,  108,  160,  109,  160,  166,  167,  168,
      169,  170,  150,  171,  172,  173,  174,  163,  175,  176,
      177,  103,  164,  165,  178,  179,  180,  181,  182,  183,
      184,  185,  110,  166,  167,  168,  169,  170,  186,  171,
      172,  173,  174,  187,  175,  176,  177,  188,  189,  190,
      178,  179,  180,  181,  182,  183,  184,  185,  191,  192,
      193,  194,  195,  196,  186,  197,  198,  199,  200,  187,

      202,  203,  204,  188,  189,  190,  205,  101,  101,  102,
      102,  620,  201,  620,  191,  192,  193,  194,  195,  196,
      208,  197,  198,  199,  200,  209,  202,  203,  204,   57,
       58,  108,  205,  109,  620,  210,  103,  103,  201,   58,
      211,  212,  159,   57,   58,  108,  208,  109,  620,  213,
      214,  209,  215,  216,  217,  218,  219,  220,  221,  222,
      207,  210,  223,  224,  225,  226,  211,  212,  227,  228,
      229,  230,  231,  232,  110,  213,  214,  233,  215,  216,
      217,  218,  219,  220,  221,  222,  234,  235,  223,  224,
      225,  226,  236,  237,  227,  228,  229,  230,  231,  232,

      238,  239,  240,  233,  241,  242,  243,  244,  245,  246,
      247,  249,  234,  235,  250,  251,  252,  253,  236,  237,
       57,   58,  108,  254,  109,  620,  238,  239,  240,  255,
      241,  242,  243,  244,  245,  246,  247,  249,  256,  257,
      250,  251,  252,  253,  258,  259,  260,  261,  262,  254,
      263,  110,  264,  265,  266,  255,  267,  268,  269,  272,
      270,  273,  274,  275,  256,  257,  276,  277,  278,  279,
      258,  259,  260,  261,  262,  280,  263,  271,  264,  265,
      266,  281,  267,  268,  269,  272,  270,  273,  274,  275,
      282,  283,  276,  277,  278,  279,  284,  285,  286,  287,

      288,  280,  289,  271,   57,   58,  108,  281,  109,  620,
      290,  291,  292,  293,  294,  295,  282,  283,  296,  297,
      298,  299,  284,  285,  286,  287,  288,  300,  289,  301,
      302,  303,  304,  305,  306,  110,  290,  291,  292,  293,
      294,  295,  307,  308,  296,  297,  298,  299,  309,  310,
      311,  312,  313,  300,  314,  301,  302,  303,  304,  305,
      306,  315,  316,  317,  318,  319,  320,  321,  307,  308,
      322,  323,  324,  325,  309,  310,  311,  312,  313,  326,
      314,  327,  328,  329,  330,  331,  332,  315,  316,  317,
      318,  319,  320,  321,  333,  334,  322,  323,  324,  325,

      335,  336,  337,  338,  339,  326,  340,  327,  328,  329,
      330,  331,  332,  341,  342,  343,  344,  345,  346,  347,
      333,  334,  348,  349,  350,  351,  335,  336,  337,  338,
      339,  352,  340,  353,  354,  355,  356,  357,  358,  341,
      342,  343,  344,  345,  346,  347,  359,  360,  348,  349,
      350,  351,  361,  362,  363,  364,  365,  352,  366,  353,
      354,  355,  356,  357,  358,  367,  368,  369,  370,  371,
      372,  373,  359,  360,  374,  375,  376,  377,  361,  362,
      363,  364,  365,  378,  366,  379,  380,  381,  382,  383,
      384,  367,  368,  369,  370,  371,  372,  373,  385,  386,

      374,  375,  376,  377,  387,  388,  389,  390,  391,  378,
      392,  379,  380,  381,  382,  383,  384,  393,  394,  395,
      396,  397,  398,  399,  385,  386,  400,  401,  402,  403,
      387,  388,  389,  390,  391,  404,  392,  405,  406,  407,
      408,  409,  410,  393,  394,  395,  396,  397,  398,  399,
      411,  412,  400,  401,  402,  403,  413,  414,  415,  416,
      417,  404,  418,  405,  406,  407,  408,  409,  410,  419,
      420,  421,  422,  423,  424,  425,  411,  412,  426,  427,
      428,  429,  413,  414,  415,  416,  417,  430,  418,  431,
      432,  433,  434,  435,  436,  419,  420,  421,  422,  423,

      424,  425,  437,  438,  426,  427,  428,  429,  439,  440,
      441,  442,  443,  430,  444,  431,  432,  433,  434,  435,
      436,  445,  446,  447,  448,  449,  450,  451,  437,  438,
      452,  455,  456,  457,  439,  440,  441,  442,  443,  453,
      444,  458,  459,  460,  461,  462,  463,  445,  446,  447,
      448,  449,  450,  451,  464,  454,  452,  455,  456,  457,
      465,  466,  467,  468,  469,  453,  470,  458,  459,  460,
      461,  462,  463,  471,  472,  473,  474,  475,  476,  477,
      464,  454,  478,  479,  480,  481,  465,  466,  467,  468,
      469,  482,  470,  483,  484,  485,  486,  488,  489,  471,

      472,  473,  474,  475,  476,  477,  490,  491,  478,  479,
      480,  481,  487,  492,  493,  494,  495,  482,  496,  483,
      484,  485,  486,  488,  489,  497,  498,  500,  501,  499,
      502,  503,  490,  491,  504,  505,  506,  507,  487,  492,
      493,  494,  495,  508,  496,  509,  510,  511,  512,  513,
      514,  497,  498,  500,  501,  499,  502,  503,  515,  516,
      504,  505,  506,  507,  517,  518,  519,  520,  521,  508,
      522,  509,  510,  511,  512,  513,  514,  523,  524,  525,
      527,  528,  529,  530,  515,  516,  531,  532,  533,  534,
      517,  518,  519,  520,  521,  526,  522,  535,  536,  537,

      538,  539,  540,  523,  524,  525,  527,  528,  529,  530,
      541,  542,  531,  532,  533,  534,  543,  544,  545,  546,
      547,  526,  548,  535,  536,  537,  538,  539,  540,  549,
      550,  551,  552,  553,  554,  555,  541,  542,  556,  557,
      558,  559,  543,  544,  545,  546,  547,  560,  548,  561,
      562,  563,  564,  565,  566,  549,  550,  551,  552,  553,
      554,  555,  567,  568,  556,  557,  558,  559,  569,  570,
      571,  572,  573,  560,  574,  561,  562,  563,  564,  565,
      566,  575,  576,  577,  578,  579,  580,  581,  567,  568,
      582,  583,  584,  585,  569,  570,  571,  572,  573,  586,

      574,  587,  588,  589,  590,  591,  592,  575,  576,  577,
      578,  579,  580,  581,  593,  594,  582,  583,  584,  585,
      595,  596,  597,  598,  599,  586,  600,  587,  588,  589,
      590,  591,  592,  601,  602,  603,  604,  605,  606,  607,
      593,  594,  608,  609,  610,  611,  595,  596,  597,  598,
      599,  612,  600,  613,  614,  615,  616,  617,  618,  601,
      602,  603,  604,  605,  606,  607,  619,  620,  608,  609,
      610,  611,  620,  620,  620,  620,  620,  612,  620,  613,
      614,  615,  616,  617,  618,  620,  620,  620,  620,  620,
      620,  620,  619,   10,   10,   10,   10,   44,   44,   44,

       44,   49,   49,   49,   49,   54,  620,  620,   54,   56,
       56,   56,   56,   66,   66,   66,   66,   57,   57,   57,
       57,  100,  620,  620,  100,  104,  104,  620,  104,  107,
      107,  107,  107,  111,  111,  620,  111,  112,  112,  620,
      112,  155,  155,  620,  155,  156,  620,  620,  156,  158,
      158,  158,  158,  161,  161,  161,  161,  162,  162,  162,
      162,  206,  206,  206,  206,  248,  248,  248,  248,    9,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620
    } ;

static yyconst flex_int16_t yy_chk[1431] =
    {   0,
      626,    1,    1,  207,    1,    5,    5,    1,    5,  160,
        5,  109,    1,    1,  109,    1,    6,    6,  111,    6,
      110,    6,   13,   13,    1,    1,    7,    7,    7,    7,
        7,   22,   22,    1,  102,   14,   22,   15,    1,    1,
       16,    1,   17,    8,    8,    8,    8,    8,   57,   18,
        1,    1,   19,   24,   25,   56,   56,    7,    1,    2,
        2,   14,    2,   15,   24,    2,   16,   27,   17,   29,
        2,    2,   32,    2,    8,   18,   28,   29,   19,   24,
       25,   26,    2,    2,   38,   28,   34,   26,   28,   34,
       24,    2,   55,   27,   52,   29,    2,    2,   32,    2,

       66,   66,   28,   29,   47,   66,   45,   26,    2,    2,
       38,   28,   34,   26,   28,   34,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   30,   31,   31,
       33,   35,   36,   30,   33,   39,   36,   40,   37,   41,
       42,   50,   59,   33,   11,   36,   60,   35,   37,   49,

        9,   49,    0,   30,   31,   31,   33,   35,   36,   30,
       33,   39,   36,   40,   37,   41,   42,   61,   59,   33,
       50,   36,   60,   35,   37,   51,   51,   51,   49,   51,
        0,   62,   63,   64,   67,   68,   69,   70,   71,   71,
       72,   73,   74,   61,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   51,   62,   63,   64,
       67,   68,   69,   70,   71,   71,   72,   73,   74,   87,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   88,   89,   88,   90,   91,   92,   93,   94,
        0,   96,   97,   98,   99,   87,  100,   95,  100,  101,

      104,  105,    0,  105,  108,  108,  158,  158,   88,   89,
       88,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  113,  112,   95,  112,  100,  114,  115,  101,  104,
      105,  107,  107,  107,  108,  107,  158,  116,  117,  118,
      119,  120,   95,  121,  122,  123,  124,  113,  125,  126,
      127,  112,  114,  115,  128,  129,  130,  131,  132,  133,
      134,  135,  107,  116,  117,  118,  119,  120,  136,  121,
      122,  123,  124,  137,  125,  126,  127,  138,  139,  140,
      128,  129,  130,  131,  132,  133,  134,  135,  141,  142,
      143,  144,  145,  146,  136,  147,  148,  149,  150,  137,

      151,  152,  153,  138,  139,  140,  154,  155,  156,  155,
      156,    0,  150,    0,  141,  142,  143,  144,  145,  146,
      163,  147,  148,  149,  150,  164,  151,  152,  153,  159,
      159,  159,  154,  159,    0,  165,  155,  156,  150,  161,
      166,  167,  161,  162,  162,  162,  163,  162,    0,  168,
      169,  164,  170,  171,  172,  173,  174,  175,  176,  177,
      159,  165,  178,  179,  180,  181,  166,  167,  182,  183,
      184,  185,  187,  188,  162,  168,  169,  189,  170,  171,
      172,  173,  174,  175,  176,  177,  190,  191,  178,  179,
      180,  181,  193,  194,  182,  183,  184,  185,  187,  188,

      195,  196,  198,  189,  199,  200,  201,  202,  203,  204,
      205,  208,  190,  191,  209,  210,  211,  212,  193,  194,
      206,  206,  206,  213,  206,    0,  195,  196,  198,  214,
      199,  200,  201,  202,  203,  204,  205,  208,  215,  216,
      209,  210,  211,  212,  217,  218,  219,  220,  221,  213,
      222,  206,  223,  224,  225,  214,  226,  227,  228,  230,
      229,  231,  232,  233,  215,  216,  234,  235,  236,  237,
      217,  218,  219,  220,  221,  238,  222,  229,  223,  224,
      225,  239,  226,  227,  228,  230,  229,  231,  232,  233,
      240,  241,  234,  235,  236,  237,  242,  243,  244,  245,

      246,  238,  247,  229,  248,  248,  248,  239,  248,    0,
      249,  250,  251,  252,  253,  254,  240,  241,  255,  256,
      257,  258,  242,  243,  244,  245,  246,  259,  247,  260,
      261,  262,  263,  264,  265,  248,  249,  250,  251,  252,
      253,  254,  266,  267,  255,  256,  257,  258,  268,  269,
      270,  271,  272,  259,  273,  260,  261,  262,  263,  264,
      265,  274,  275,  276,  277,  278,  279,  280,  266,  267,
      282,  283,  284,  285,  268,  269,  270,  271,  272,  286,
      273,  287,  288,  289,  290,  291,  292,  274,  275,  276,
      277,  278,  279,  280,  293,  294,  282,  283,  284,  285,

      295,  296,  297,  298,  299,  286,  300,  287,  288,  289,
      290,  291,  292,  301,  302,  303,  305,  306,  307,  308,
      293,  294,  309,  310,  311,  312,  295,  296,  297,  298,
      299,  313,  300,  314,  315,  316,  317,  318,  319,  301,
      302,  303,  305,  306,  307,  308,  320,  321,  309,  310,
      311,  312,  322,  323,  324,  325,  326,  313,  327,  314,
      315,  316,  317,  318,  319,  328,  329,  330,  331,  332,
      333,  334,  320,  321,  335,  336,  337,  338,  322,  323,
      324,  325,  326,  339,  327,  340,  341,  342,  343,  344,
      345,  328,  329,  330,  331,  332,  333,  334,  346,  347,

      335,  336,  337,  338,  348,  349,  350,  351,  352,  339,
      353,  340,  341,  342,  343,  344,  345,  354,  355,  356,
      357,  358,  359,  360,  346,  347,  361,  362,  363,  364,
      348,  349,  350,  351,  352,  365,  353,  366,  367,  368,
      370,  371,  372,  354,  355,  356,  357,  358,  359,  360,
      373,  374,  361,  362,  363,  364,  375,  376,  377,  378,
      379,  365,  380,  366,  367,  368,  370,  371,  372,  381,
      382,  383,  384,  385,  386,  387,  373,  374,  388,  389,
      390,  391,  375,  376,  377,  378,  379,  392,  380,  393,
      394,  395,  396,  397,  398,  381,  382,  383,  384,  385,

      386,  387,  399,  400,  388,  389,  390,  391,  401,  402,
      403,  404,  406,  392,  407,  393,  394,  395,  396,  397,
      398,  408,  409,  410,  411,  413,  414,  415,  399,  400,
      416,  418,  419,  420,  401,  402,  403,  404,  406,  417,
      407,  421,  422,  423,  424,  425,  426,  408,  409,  410,
      411,  413,  414,  415,  427,  417,  416,  418,  419,  420,
      428,  430,  431,  435,  437,  417,  438,  421,  422,  423,
      424,  425,  426,  439,  440,  441,  442,  443,  444,  445,
      427,  417,  446,  447,  448,  449,  428,  430,  431,  435,
      437,  451,  438,  452,  453,  454,  455,  456,  457,  439,

      440,  441,  442,  443,  444,  445,  458,  459,  446,  447,
      448,  449,  455,  460,  461,  462,  463,  451,  465,  452,
      453,  454,  455,  456,  457,  466,  468,  469,  470,  468,
      471,  472,  458,  459,  473,  474,  475,  477,  455,  460,
      461,  462,  463,  478,  465,  479,  480,  481,  482,  483,
      484,  466,  468,  469,  470,  468,  471,  472,  485,  486,
      473,  474,  475,  477,  487,  488,  489,  490,  491,  478,
      492,  479,  480,  481,  482,  483,  484,  494,  495,  496,
      498,  500,  501,  502,  485,  486,  504,  505,  506,  507,
      487,  488,  489,  490,  491,  496,  492,  509,  510,  511,

      512,  513,  514,  494,  495,  496,  498,  500,  501,  502,
      515,  516,  504,  505,  506,  507,  517,  518,  519,  520,
      522,  496,  523,  509,  510,  511,  512,  513,  514,  524,
      525,  526,  527,  528,  529,  530,  515,  516,  531,  533,
      536,  537,  517,  518,  519,  520,  522,  540,  523,  542,
      543,  544,  545,  546,  547,  524,  525,  526,  527,  528,
      529,  530,  548,  549,  531,  533,  536,  537,  550,  551,
      552,  553,  554,  540,  555,  542,  543,  544,  545,  546,
      547,  556,  557,  558,  559,  561,  563,  565,  548,  549,
      567,  568,  569,  570,  550,  551,  552,  553,  554,  571,

      555,  573,  574,  575,  576,  577,  578,  556,  557,  558,
      559,  561,  563,  565,  580,  581,  567,  568,  569,  570,
      583,  584,  586,  587,  588,  571,  590,  573,  574,  575,
      576,  577,  578,  592,  593,  594,  595,  597,  598,  601,
      580,  581,  602,  603,  604,  605,  583,  584,  586,  587,
      588,  606,  590,  607,  608,  612,  614,  615,  616,  592,
      593,  594,  595,  597,  598,  601,  618,    0,  602,  603,
      604,  605,    0,    0,    0,    0,    0,  606,    0,  607,
      608,  612,  614,  615,  616,    0,    0,    0,    0,    0,
        0,    0,  618,  621,  621,  621,  621,  622,  622,  622,

      622,  623,  623,  623,  623,  624,    0,    0,  624,  625,
      625,  625,  625,  627,  627,  627,  627,  628,  628,  628,
      628,  629,    0,    0,  629,  630,  630,    0,  630,  631,
      631,  631,  631,  632,  632,    0,  632,  633,  633,    0,
      633,  634,  634,    0,  634,  635,    0,    0,  635,  636,
      636,  636,  636,  637,  637,  637,  637,  638,  638,  638,
      638,  639,  639,  639,  639,  640,  640,  640,  640,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,

      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "Config-lex.ll"
/*
 *  Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005
 *  Heikki Tauriainen <Heikki.Tauriainen@tkk.fi>
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
#line 21 "Config-lex.ll"
#include <config.h>
#include "Configuration.h"
#include "Config-parse.h"

extern int config_file_line_number;


#line 1009 "Config-lex.cc"

#define INITIAL 0
#define ATTR 1
#define EQ 2
#define VAL 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 42 "Config-lex.ll"


#line 1200 "Config-lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 621 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 620 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 44 "Config-lex.ll"
{ /* Skip whitespace everywhere. */ }
	YY_BREAK
case 2:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 45 "Config-lex.ll"
{ /* Skip comments everywhere. */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 47 "Config-lex.ll"
{ /* Skip newlines, but update the line number. */
                               config_file_line_number++;
                            }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 51 "Config-lex.ll"
{ BEGIN(ATTR); return CFG_LBRACE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 53 "Config-lex.ll"
{ return CFG_ALGORITHM; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 54 "Config-lex.ll"
{ return CFG_GLOBALOPTIONS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 55 "Config-lex.ll"
{ return CFG_STATESPACEOPTIONS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 56 "Config-lex.ll"
{ return CFG_FORMULAOPTIONS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 58 "Config-lex.ll"
{ return CFG_UNKNOWN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "Config-lex.ll"
{ BEGIN(EQ); return CFG_ENABLED; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 61 "Config-lex.ll"
{ BEGIN(EQ); return CFG_NAME; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 62 "Config-lex.ll"
{ BEGIN(EQ); return CFG_PARAMETERS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 63 "Config-lex.ll"
{ BEGIN(EQ); return CFG_PROGRAMPATH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 65 "Config-lex.ll"
{ BEGIN(EQ); return CFG_COMPARISONTEST; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 66 "Config-lex.ll"
{ BEGIN(EQ); return CFG_COMPARISONTEST; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 67 "Config-lex.ll"
{ BEGIN(EQ); return CFG_CONSISTENCYTEST; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 68 "Config-lex.ll"
{ BEGIN(EQ); return CFG_CONSISTENCYTEST; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 69 "Config-lex.ll"
{ BEGIN(EQ); return CFG_INTERACTIVE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 70 "Config-lex.ll"
{ BEGIN(EQ); return CFG_INTERSECTIONTEST; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 71 "Config-lex.ll"
{ BEGIN(EQ); return CFG_INTERSECTIONTEST; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 72 "Config-lex.ll"
{ BEGIN(EQ); return CFG_MODELCHECK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 73 "Config-lex.ll"
{ BEGIN(EQ); return CFG_ROUNDS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 74 "Config-lex.ll"
{ BEGIN(EQ); return CFG_TRANSLATORTIMEOUT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 75 "Config-lex.ll"
{ BEGIN(EQ); return CFG_VERBOSITY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 77 "Config-lex.ll"
{ BEGIN(EQ); return CFG_EDGEPROBABILITY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "Config-lex.ll"
{ BEGIN(EQ); return CFG_PROPOSITIONS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 79 "Config-lex.ll"
{ BEGIN(EQ); return CFG_SIZE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 80 "Config-lex.ll"
{ BEGIN(EQ); return CFG_TRUTHPROBABILITY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 81 "Config-lex.ll"
{ BEGIN(EQ); return CFG_CHANGEINTERVAL; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 82 "Config-lex.ll"
{ BEGIN(EQ); return CFG_RANDOMSEED; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 84 "Config-lex.ll"
{ BEGIN(EQ); return CFG_ABBREVIATEDOPERATORS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 85 "Config-lex.ll"
{ BEGIN(EQ); return CFG_ANDPRIORITY; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 86 "Config-lex.ll"
{ BEGIN(EQ); return CFG_BEFOREPRIORITY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 87 "Config-lex.ll"
{
                              BEGIN(EQ); return CFG_DEFAULTOPERATORPRIORITY;
                            }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 90 "Config-lex.ll"
{ BEGIN(EQ); return CFG_EQUIVALENCEPRIORITY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 91 "Config-lex.ll"
{ BEGIN(EQ); return CFG_FALSEPRIORITY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 92 "Config-lex.ll"
{ BEGIN(EQ); return CFG_FINALLYPRIORITY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 93 "Config-lex.ll"
{ BEGIN(EQ); return CFG_GENERATEMODE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 94 "Config-lex.ll"
{ BEGIN(EQ); return CFG_GLOBALLYPRIORITY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 95 "Config-lex.ll"
{ BEGIN(EQ); return CFG_IMPLICATIONPRIORITY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 96 "Config-lex.ll"
{ BEGIN(EQ); return CFG_NEXTPRIORITY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "Config-lex.ll"
{ BEGIN(EQ); return CFG_NOTPRIORITY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 98 "Config-lex.ll"
{ BEGIN(EQ); return CFG_ORPRIORITY; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 99 "Config-lex.ll"
{ BEGIN(EQ); return CFG_OUTPUTMODE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 100 "Config-lex.ll"
{ BEGIN(EQ); return CFG_PROPOSITIONPRIORITY; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 101 "Config-lex.ll"
{ BEGIN(EQ); return CFG_RELEASEPRIORITY; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 102 "Config-lex.ll"
{ BEGIN(EQ); return CFG_STRONGRELEASEPRIORITY; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 103 "Config-lex.ll"
{ BEGIN(EQ); return CFG_TRUEPRIORITY; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 104 "Config-lex.ll"
{ BEGIN(EQ); return CFG_UNTILPRIORITY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 105 "Config-lex.ll"
{ BEGIN(EQ); return CFG_WEAKUNTILPRIORITY; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 106 "Config-lex.ll"
{ BEGIN(EQ); return CFG_XORPRIORITY; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 108 "Config-lex.ll"
{ BEGIN(INITIAL); return CFG_RBRACE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 110 "Config-lex.ll"
{ return CFG_UNKNOWN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "Config-lex.ll"
{ BEGIN(VAL); return CFG_EQUALS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "Config-lex.ll"
{ return CFG_UNKNOWN; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "Config-lex.ll"
{
                              yylval.value = yytext;
                              BEGIN(ATTR);
                              return CFG_VALUE;
                            }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 122 "Config-lex.ll"
{
                              throw Configuration::ConfigurationException
                                      (config_file_line_number,
                                       "unmatched quotes");
                            }
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 128 "Config-lex.ll"
{ return CFG_UNKNOWN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 130 "Config-lex.ll"
ECHO;
	YY_BREAK
#line 1591 "Config-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ATTR):
case YY_STATE_EOF(EQ):
case YY_STATE_EOF(VAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 621 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 621 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 620);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 130 "Config-lex.ll"



