# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _spot
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _spot.PySwigIterator_value(*args)
    def incr(*args): return _spot.PySwigIterator_incr(*args)
    def decr(*args): return _spot.PySwigIterator_decr(*args)
    def distance(*args): return _spot.PySwigIterator_distance(*args)
    def equal(*args): return _spot.PySwigIterator_equal(*args)
    def copy(*args): return _spot.PySwigIterator_copy(*args)
    def next(*args): return _spot.PySwigIterator_next(*args)
    def previous(*args): return _spot.PySwigIterator_previous(*args)
    def advance(*args): return _spot.PySwigIterator_advance(*args)
    def __eq__(*args): return _spot.PySwigIterator___eq__(*args)
    def __ne__(*args): return _spot.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _spot.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _spot.PySwigIterator___isub__(*args)
    def __add__(*args): return _spot.PySwigIterator___add__(*args)
    def __sub__(*args): return _spot.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _spot.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

import buddy
version = _spot.version
class bdd_allocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bdd_allocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bdd_allocator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_bdd_allocator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["initialize"] = lambda x: _spot.bdd_allocator_initialize
    if _newclass:initialize = staticmethod(_spot.bdd_allocator_initialize)
    def allocate_variables(*args): return _spot.bdd_allocator_allocate_variables(*args)
    def release_variables(*args): return _spot.bdd_allocator_release_variables(*args)
    __swig_destroy__ = _spot.delete_bdd_allocator
    __del__ = lambda self : None;
bdd_allocator_swigregister = _spot.bdd_allocator_swigregister
bdd_allocator_swigregister(bdd_allocator)
bdd_allocator_initialize = _spot.bdd_allocator_initialize

class minato_isop(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, minato_isop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, minato_isop, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_minato_isop(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(*args): return _spot.minato_isop_next(*args)
    __swig_destroy__ = _spot.delete_minato_isop
    __del__ = lambda self : None;
minato_isop_swigregister = _spot.minato_isop_swigregister
minato_isop_swigregister(minato_isop)

class option_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, option_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, option_map, name)
    __repr__ = _swig_repr
    def parse_options(*args): return _spot.option_map_parse_options(*args)
    def get(*args): return _spot.option_map_get(*args)
    def set(*args): return _spot.option_map_set(*args)
    def __init__(self, *args): 
        this = _spot.new_option_map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_option_map
    __del__ = lambda self : None;
option_map_swigregister = _spot.option_map_swigregister
option_map_swigregister(option_map)

srand = _spot.srand
rrand = _spot.rrand
mrand = _spot.mrand
drand = _spot.drand
nrand = _spot.nrand
bmrand = _spot.bmrand
prand = _spot.prand
class loopless_modular_mixed_radix_gray_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, loopless_modular_mixed_radix_gray_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, loopless_modular_mixed_radix_gray_code, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == loopless_modular_mixed_radix_gray_code:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _spot.new_loopless_modular_mixed_radix_gray_code(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_loopless_modular_mixed_radix_gray_code
    __del__ = lambda self : None;
    def a_first(*args): return _spot.loopless_modular_mixed_radix_gray_code_a_first(*args)
    def a_next(*args): return _spot.loopless_modular_mixed_radix_gray_code_a_next(*args)
    def a_last(*args): return _spot.loopless_modular_mixed_radix_gray_code_a_last(*args)
    def first(*args): return _spot.loopless_modular_mixed_radix_gray_code_first(*args)
    def last(*args): return _spot.loopless_modular_mixed_radix_gray_code_last(*args)
    def done(*args): return _spot.loopless_modular_mixed_radix_gray_code_done(*args)
    def next(*args): return _spot.loopless_modular_mixed_radix_gray_code_next(*args)
    def __disown__(self):
        self.this.disown()
        _spot.disown_loopless_modular_mixed_radix_gray_code(self)
        return weakref_proxy(self)
loopless_modular_mixed_radix_gray_code_swigregister = _spot.loopless_modular_mixed_radix_gray_code_swigregister
loopless_modular_mixed_radix_gray_code_swigregister(loopless_modular_mixed_radix_gray_code)

class formula(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def accept(*args): return _spot.formula_accept(*args)
    def ref(*args): return _spot.formula_ref(*args)
    __swig_getmethods__["unref"] = lambda x: _spot.formula_unref
    if _newclass:unref = staticmethod(_spot.formula_unref)
    def dump(*args): return _spot.formula_dump(*args)
    def hash(*args): return _spot.formula_hash(*args)
    def __cmp__(*args): return _spot.formula___cmp__(*args)
    def __str__(*args): return _spot.formula___str__(*args)
formula_swigregister = _spot.formula_swigregister
formula_swigregister(formula)
formula_unref = _spot.formula_unref

class formula_ptr_less_than(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula_ptr_less_than, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula_ptr_less_than, name)
    __repr__ = _swig_repr
    def __call__(*args): return _spot.formula_ptr_less_than___call__(*args)
    def __init__(self, *args): 
        this = _spot.new_formula_ptr_less_than(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_formula_ptr_less_than
    __del__ = lambda self : None;
formula_ptr_less_than_swigregister = _spot.formula_ptr_less_than_swigregister
formula_ptr_less_than_swigregister(formula_ptr_less_than)

class formula_ptr_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, formula_ptr_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, formula_ptr_hash, name)
    __repr__ = _swig_repr
    def __call__(*args): return _spot.formula_ptr_hash___call__(*args)
    def __init__(self, *args): 
        this = _spot.new_formula_ptr_hash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_formula_ptr_hash
    __del__ = lambda self : None;
formula_ptr_hash_swigregister = _spot.formula_ptr_hash_swigregister
formula_ptr_hash_swigregister(formula_ptr_hash)

class ref_formula(formula):
    __swig_setmethods__ = {}
    for _s in [formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ref_formula, name, value)
    __swig_getmethods__ = {}
    for _s in [formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ref_formula, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
ref_formula_swigregister = _spot.ref_formula_swigregister
ref_formula_swigregister(ref_formula)

class atomic_prop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, atomic_prop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, atomic_prop, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _spot.atomic_prop_instance
    if _newclass:instance = staticmethod(_spot.atomic_prop_instance)
    def accept(*args): return _spot.atomic_prop_accept(*args)
    def name(*args): return _spot.atomic_prop_name(*args)
    def env(*args): return _spot.atomic_prop_env(*args)
    __swig_getmethods__["instance_count"] = lambda x: _spot.atomic_prop_instance_count
    if _newclass:instance_count = staticmethod(_spot.atomic_prop_instance_count)
    __swig_getmethods__["dump_instances"] = lambda x: _spot.atomic_prop_dump_instances
    if _newclass:dump_instances = staticmethod(_spot.atomic_prop_dump_instances)
atomic_prop_swigregister = _spot.atomic_prop_swigregister
atomic_prop_swigregister(atomic_prop)
atomic_prop_instance = _spot.atomic_prop_instance
atomic_prop_instance_count = _spot.atomic_prop_instance_count
atomic_prop_dump_instances = _spot.atomic_prop_dump_instances

class binop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, binop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, binop, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Xor = _spot.binop_Xor
    Implies = _spot.binop_Implies
    Equiv = _spot.binop_Equiv
    U = _spot.binop_U
    R = _spot.binop_R
    __swig_getmethods__["instance"] = lambda x: _spot.binop_instance
    if _newclass:instance = staticmethod(_spot.binop_instance)
    def accept(*args): return _spot.binop_accept(*args)
    def first(*args): return _spot.binop_first(*args)
    def second(*args): return _spot.binop_second(*args)
    def op(*args): return _spot.binop_op(*args)
    def op_name(*args): return _spot.binop_op_name(*args)
    __swig_getmethods__["instance_count"] = lambda x: _spot.binop_instance_count
    if _newclass:instance_count = staticmethod(_spot.binop_instance_count)
binop_swigregister = _spot.binop_swigregister
binop_swigregister(binop)
binop_instance = _spot.binop_instance
binop_instance_count = _spot.binop_instance_count

class constant(formula):
    __swig_setmethods__ = {}
    for _s in [formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, constant, name, value)
    __swig_getmethods__ = {}
    for _s in [formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, constant, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    False = _spot.constant_False
    True = _spot.constant_True
    def accept(*args): return _spot.constant_accept(*args)
    def val(*args): return _spot.constant_val(*args)
    def val_name(*args): return _spot.constant_val_name(*args)
    __swig_getmethods__["true_instance"] = lambda x: _spot.constant_true_instance
    if _newclass:true_instance = staticmethod(_spot.constant_true_instance)
    __swig_getmethods__["false_instance"] = lambda x: _spot.constant_false_instance
    if _newclass:false_instance = staticmethod(_spot.constant_false_instance)
constant_swigregister = _spot.constant_swigregister
constant_swigregister(constant)
constant_true_instance = _spot.constant_true_instance
constant_false_instance = _spot.constant_false_instance

class multop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, multop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, multop, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Or = _spot.multop_Or
    And = _spot.multop_And
    __swig_getmethods__["instance"] = lambda x: _spot.multop_instance
    if _newclass:instance = staticmethod(_spot.multop_instance)
    def accept(*args): return _spot.multop_accept(*args)
    def size(*args): return _spot.multop_size(*args)
    def nth(*args): return _spot.multop_nth(*args)
    def op(*args): return _spot.multop_op(*args)
    def op_name(*args): return _spot.multop_op_name(*args)
    __swig_getmethods__["instance_count"] = lambda x: _spot.multop_instance_count
    if _newclass:instance_count = staticmethod(_spot.multop_instance_count)
multop_swigregister = _spot.multop_swigregister
multop_swigregister(multop)
multop_instance = _spot.multop_instance
multop_instance_count = _spot.multop_instance_count

class unop(ref_formula):
    __swig_setmethods__ = {}
    for _s in [ref_formula]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unop, name, value)
    __swig_getmethods__ = {}
    for _s in [ref_formula]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unop, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    Not = _spot.unop_Not
    X = _spot.unop_X
    F = _spot.unop_F
    G = _spot.unop_G
    __swig_getmethods__["instance"] = lambda x: _spot.unop_instance
    if _newclass:instance = staticmethod(_spot.unop_instance)
    def accept(*args): return _spot.unop_accept(*args)
    def child(*args): return _spot.unop_child(*args)
    def op(*args): return _spot.unop_op(*args)
    def op_name(*args): return _spot.unop_op_name(*args)
    __swig_getmethods__["instance_count"] = lambda x: _spot.unop_instance_count
    if _newclass:instance_count = staticmethod(_spot.unop_instance_count)
unop_swigregister = _spot.unop_swigregister
unop_swigregister(unop)
unop_instance = _spot.unop_instance
unop_instance_count = _spot.unop_instance_count

class visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_visitor
    __del__ = lambda self : None;
    def visit(*args): return _spot.visitor_visit(*args)
visitor_swigregister = _spot.visitor_swigregister
visitor_swigregister(visitor)

class const_visitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, const_visitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, const_visitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_const_visitor
    __del__ = lambda self : None;
    def visit(*args): return _spot.const_visitor_visit(*args)
const_visitor_swigregister = _spot.const_visitor_swigregister
const_visitor_swigregister(const_visitor)

class environment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, environment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, environment, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def require(*args): return _spot.environment_require(*args)
    def name(*args): return _spot.environment_name(*args)
    __swig_destroy__ = _spot.delete_environment
    __del__ = lambda self : None;
environment_swigregister = _spot.environment_swigregister
environment_swigregister(environment)

class default_environment(environment):
    __swig_setmethods__ = {}
    for _s in [environment]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, default_environment, name, value)
    __swig_getmethods__ = {}
    for _s in [environment]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, default_environment, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_default_environment
    __del__ = lambda self : None;
    def require(*args): return _spot.default_environment_require(*args)
    def name(*args): return _spot.default_environment_name(*args)
    __swig_getmethods__["instance"] = lambda x: _spot.default_environment_instance
    if _newclass:instance = staticmethod(_spot.default_environment_instance)
default_environment_swigregister = _spot.default_environment_swigregister
default_environment_swigregister(default_environment)
default_environment_instance = _spot.default_environment_instance

format_parse_errors = _spot.format_parse_errors
class clone_visitor(visitor):
    __swig_setmethods__ = {}
    for _s in [visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, clone_visitor, name, value)
    __swig_getmethods__ = {}
    for _s in [visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, clone_visitor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_clone_visitor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_clone_visitor
    __del__ = lambda self : None;
    def result(*args): return _spot.clone_visitor_result(*args)
    def visit(*args): return _spot.clone_visitor_visit(*args)
    def recurse(*args): return _spot.clone_visitor_recurse(*args)
clone_visitor_swigregister = _spot.clone_visitor_swigregister
clone_visitor_swigregister(clone_visitor)
parse = _spot.parse

clone = _spot.clone
destroy = _spot.destroy
dotty = _spot.dotty
dump = _spot.dump
class unabbreviate_logic_visitor(clone_visitor):
    __swig_setmethods__ = {}
    for _s in [clone_visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unabbreviate_logic_visitor, name, value)
    __swig_getmethods__ = {}
    for _s in [clone_visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unabbreviate_logic_visitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_unabbreviate_logic_visitor
    __del__ = lambda self : None;
    def visit(*args): return _spot.unabbreviate_logic_visitor_visit(*args)
    def recurse(*args): return _spot.unabbreviate_logic_visitor_recurse(*args)
unabbreviate_logic_visitor_swigregister = _spot.unabbreviate_logic_visitor_swigregister
unabbreviate_logic_visitor_swigregister(unabbreviate_logic_visitor)

unabbreviate_logic = _spot.unabbreviate_logic
Reduce_None = _spot.Reduce_None
Reduce_Basics = _spot.Reduce_Basics
Reduce_Syntactic_Implications = _spot.Reduce_Syntactic_Implications
Reduce_Eventuality_And_Universality = _spot.Reduce_Eventuality_And_Universality
Reduce_Containment_Checks = _spot.Reduce_Containment_Checks
Reduce_Containment_Checks_Stronger = _spot.Reduce_Containment_Checks_Stronger
Reduce_All = _spot.Reduce_All
is_eventual = _spot.is_eventual
is_universal = _spot.is_universal
class unabbreviate_ltl_visitor(unabbreviate_logic_visitor):
    __swig_setmethods__ = {}
    for _s in [unabbreviate_logic_visitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, unabbreviate_ltl_visitor, name, value)
    __swig_getmethods__ = {}
    for _s in [unabbreviate_logic_visitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, unabbreviate_ltl_visitor, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_unabbreviate_ltl_visitor
    __del__ = lambda self : None;
    def visit(*args): return _spot.unabbreviate_ltl_visitor_visit(*args)
    def recurse(*args): return _spot.unabbreviate_ltl_visitor_recurse(*args)
unabbreviate_ltl_visitor_swigregister = _spot.unabbreviate_ltl_visitor_swigregister
unabbreviate_ltl_visitor_swigregister(unabbreviate_ltl_visitor)
negative_normal_form = _spot.negative_normal_form
reduce = _spot.reduce
to_string = _spot.to_string
to_spin_string = _spot.to_spin_string

unabbreviate_ltl = _spot.unabbreviate_ltl
class bdd_dict(bdd_allocator):
    __swig_setmethods__ = {}
    for _s in [bdd_allocator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, bdd_dict, name, value)
    __swig_getmethods__ = {}
    for _s in [bdd_allocator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, bdd_dict, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_bdd_dict(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_bdd_dict
    __del__ = lambda self : None;
    __swig_setmethods__["now_map"] = _spot.bdd_dict_now_map_set
    __swig_getmethods__["now_map"] = _spot.bdd_dict_now_map_get
    if _newclass:now_map = _swig_property(_spot.bdd_dict_now_map_get, _spot.bdd_dict_now_map_set)
    __swig_setmethods__["now_formula_map"] = _spot.bdd_dict_now_formula_map_set
    __swig_getmethods__["now_formula_map"] = _spot.bdd_dict_now_formula_map_get
    if _newclass:now_formula_map = _swig_property(_spot.bdd_dict_now_formula_map_get, _spot.bdd_dict_now_formula_map_set)
    __swig_setmethods__["var_map"] = _spot.bdd_dict_var_map_set
    __swig_getmethods__["var_map"] = _spot.bdd_dict_var_map_get
    if _newclass:var_map = _swig_property(_spot.bdd_dict_var_map_get, _spot.bdd_dict_var_map_set)
    __swig_setmethods__["var_formula_map"] = _spot.bdd_dict_var_formula_map_set
    __swig_getmethods__["var_formula_map"] = _spot.bdd_dict_var_formula_map_get
    if _newclass:var_formula_map = _swig_property(_spot.bdd_dict_var_formula_map_get, _spot.bdd_dict_var_formula_map_set)
    __swig_setmethods__["acc_map"] = _spot.bdd_dict_acc_map_set
    __swig_getmethods__["acc_map"] = _spot.bdd_dict_acc_map_get
    if _newclass:acc_map = _swig_property(_spot.bdd_dict_acc_map_get, _spot.bdd_dict_acc_map_set)
    __swig_setmethods__["acc_formula_map"] = _spot.bdd_dict_acc_formula_map_set
    __swig_getmethods__["acc_formula_map"] = _spot.bdd_dict_acc_formula_map_get
    if _newclass:acc_formula_map = _swig_property(_spot.bdd_dict_acc_formula_map_get, _spot.bdd_dict_acc_formula_map_set)
    __swig_setmethods__["clone_counts"] = _spot.bdd_dict_clone_counts_set
    __swig_getmethods__["clone_counts"] = _spot.bdd_dict_clone_counts_get
    if _newclass:clone_counts = _swig_property(_spot.bdd_dict_clone_counts_get, _spot.bdd_dict_clone_counts_set)
    __swig_setmethods__["next_to_now"] = _spot.bdd_dict_next_to_now_set
    __swig_getmethods__["next_to_now"] = _spot.bdd_dict_next_to_now_get
    if _newclass:next_to_now = _swig_property(_spot.bdd_dict_next_to_now_get, _spot.bdd_dict_next_to_now_set)
    __swig_setmethods__["now_to_next"] = _spot.bdd_dict_now_to_next_set
    __swig_getmethods__["now_to_next"] = _spot.bdd_dict_now_to_next_get
    if _newclass:now_to_next = _swig_property(_spot.bdd_dict_now_to_next_get, _spot.bdd_dict_now_to_next_set)
    def register_proposition(*args): return _spot.bdd_dict_register_proposition(*args)
    def register_propositions(*args): return _spot.bdd_dict_register_propositions(*args)
    def register_state(*args): return _spot.bdd_dict_register_state(*args)
    def register_acceptance_variable(*args): return _spot.bdd_dict_register_acceptance_variable(*args)
    def register_clone_acc(*args): return _spot.bdd_dict_register_clone_acc(*args)
    def register_acceptance_variables(*args): return _spot.bdd_dict_register_acceptance_variables(*args)
    def register_anonymous_variables(*args): return _spot.bdd_dict_register_anonymous_variables(*args)
    def register_all_variables_of(*args): return _spot.bdd_dict_register_all_variables_of(*args)
    def unregister_all_my_variables(*args): return _spot.bdd_dict_unregister_all_my_variables(*args)
    def unregister_variable(*args): return _spot.bdd_dict_unregister_variable(*args)
    def is_registered_proposition(*args): return _spot.bdd_dict_is_registered_proposition(*args)
    def is_registered_state(*args): return _spot.bdd_dict_is_registered_state(*args)
    def is_registered_acceptance_variable(*args): return _spot.bdd_dict_is_registered_acceptance_variable(*args)
    def dump(*args): return _spot.bdd_dict_dump(*args)
    def assert_emptiness(*args): return _spot.bdd_dict_assert_emptiness(*args)
bdd_dict_swigregister = _spot.bdd_dict_swigregister
bdd_dict_swigregister(bdd_dict)

bdd_print_sat = _spot.bdd_print_sat
bdd_format_sat = _spot.bdd_format_sat
bdd_print_acc = _spot.bdd_print_acc
bdd_print_accset = _spot.bdd_print_accset
bdd_format_accset = _spot.bdd_format_accset
bdd_print_set = _spot.bdd_print_set
bdd_format_set = _spot.bdd_format_set
bdd_print_formula = _spot.bdd_print_formula
bdd_format_formula = _spot.bdd_format_formula
bdd_print_dot = _spot.bdd_print_dot
bdd_print_table = _spot.bdd_print_table
class state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def compare(*args): return _spot.state_compare(*args)
    def hash(*args): return _spot.state_hash(*args)
    def clone(*args): return _spot.state_clone(*args)
    __swig_destroy__ = _spot.delete_state
    __del__ = lambda self : None;
state_swigregister = _spot.state_swigregister
state_swigregister(state)

class state_ptr_less_than(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_less_than, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_less_than, name)
    __repr__ = _swig_repr
    def __call__(*args): return _spot.state_ptr_less_than___call__(*args)
    def __init__(self, *args): 
        this = _spot.new_state_ptr_less_than(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_less_than
    __del__ = lambda self : None;
state_ptr_less_than_swigregister = _spot.state_ptr_less_than_swigregister
state_ptr_less_than_swigregister(state_ptr_less_than)

class state_ptr_equal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_equal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_equal, name)
    __repr__ = _swig_repr
    def __call__(*args): return _spot.state_ptr_equal___call__(*args)
    def __init__(self, *args): 
        this = _spot.new_state_ptr_equal(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_equal
    __del__ = lambda self : None;
state_ptr_equal_swigregister = _spot.state_ptr_equal_swigregister
state_ptr_equal_swigregister(state_ptr_equal)

class state_ptr_hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_ptr_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, state_ptr_hash, name)
    __repr__ = _swig_repr
    def __call__(*args): return _spot.state_ptr_hash___call__(*args)
    def __init__(self, *args): 
        this = _spot.new_state_ptr_hash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_ptr_hash
    __del__ = lambda self : None;
state_ptr_hash_swigregister = _spot.state_ptr_hash_swigregister
state_ptr_hash_swigregister(state_ptr_hash)

class tgba_succ_iterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_succ_iterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_succ_iterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba_succ_iterator
    __del__ = lambda self : None;
    def first(*args): return _spot.tgba_succ_iterator_first(*args)
    def next(*args): return _spot.tgba_succ_iterator_next(*args)
    def done(*args): return _spot.tgba_succ_iterator_done(*args)
    def current_state(*args): return _spot.tgba_succ_iterator_current_state(*args)
    def current_condition(*args): return _spot.tgba_succ_iterator_current_condition(*args)
    def current_acceptance_conditions(*args): return _spot.tgba_succ_iterator_current_acceptance_conditions(*args)
tgba_succ_iterator_swigregister = _spot.tgba_succ_iterator_swigregister
tgba_succ_iterator_swigregister(tgba_succ_iterator)

class tgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_tgba
    __del__ = lambda self : None;
    def get_init_state(*args): return _spot.tgba_get_init_state(*args)
    def succ_iter(*args): return _spot.tgba_succ_iter(*args)
    def support_conditions(*args): return _spot.tgba_support_conditions(*args)
    def support_variables(*args): return _spot.tgba_support_variables(*args)
    def get_dict(*args): return _spot.tgba_get_dict(*args)
    def format_state(*args): return _spot.tgba_format_state(*args)
    def transition_annotation(*args): return _spot.tgba_transition_annotation(*args)
    def project_state(*args): return _spot.tgba_project_state(*args)
    def all_acceptance_conditions(*args): return _spot.tgba_all_acceptance_conditions(*args)
    def number_of_acceptance_conditions(*args): return _spot.tgba_number_of_acceptance_conditions(*args)
    def neg_acceptance_conditions(*args): return _spot.tgba_neg_acceptance_conditions(*args)
tgba_swigregister = _spot.tgba_swigregister
tgba_swigregister(tgba)

class state_bdd(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_bdd, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_bdd, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_bdd(*args)
        try: self.this.append(this)
        except: self.this = this
    def as_bdd(*args): return _spot.state_bdd_as_bdd(*args)
    def compare(*args): return _spot.state_bdd_compare(*args)
    def hash(*args): return _spot.state_bdd_hash(*args)
    def clone(*args): return _spot.state_bdd_clone(*args)
    __swig_destroy__ = _spot.delete_state_bdd
    __del__ = lambda self : None;
state_bdd_swigregister = _spot.state_bdd_swigregister
state_bdd_swigregister(state_bdd)

class tgba_bdd_core_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_bdd_core_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_bdd_core_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["relation"] = _spot.tgba_bdd_core_data_relation_set
    __swig_getmethods__["relation"] = _spot.tgba_bdd_core_data_relation_get
    if _newclass:relation = _swig_property(_spot.tgba_bdd_core_data_relation_get, _spot.tgba_bdd_core_data_relation_set)
    __swig_setmethods__["acceptance_conditions"] = _spot.tgba_bdd_core_data_acceptance_conditions_set
    __swig_getmethods__["acceptance_conditions"] = _spot.tgba_bdd_core_data_acceptance_conditions_get
    if _newclass:acceptance_conditions = _swig_property(_spot.tgba_bdd_core_data_acceptance_conditions_get, _spot.tgba_bdd_core_data_acceptance_conditions_set)
    __swig_setmethods__["all_acceptance_conditions"] = _spot.tgba_bdd_core_data_all_acceptance_conditions_set
    __swig_getmethods__["all_acceptance_conditions"] = _spot.tgba_bdd_core_data_all_acceptance_conditions_get
    if _newclass:all_acceptance_conditions = _swig_property(_spot.tgba_bdd_core_data_all_acceptance_conditions_get, _spot.tgba_bdd_core_data_all_acceptance_conditions_set)
    __swig_setmethods__["now_set"] = _spot.tgba_bdd_core_data_now_set_set
    __swig_getmethods__["now_set"] = _spot.tgba_bdd_core_data_now_set_get
    if _newclass:now_set = _swig_property(_spot.tgba_bdd_core_data_now_set_get, _spot.tgba_bdd_core_data_now_set_set)
    __swig_setmethods__["next_set"] = _spot.tgba_bdd_core_data_next_set_set
    __swig_getmethods__["next_set"] = _spot.tgba_bdd_core_data_next_set_get
    if _newclass:next_set = _swig_property(_spot.tgba_bdd_core_data_next_set_get, _spot.tgba_bdd_core_data_next_set_set)
    __swig_setmethods__["nownext_set"] = _spot.tgba_bdd_core_data_nownext_set_set
    __swig_getmethods__["nownext_set"] = _spot.tgba_bdd_core_data_nownext_set_get
    if _newclass:nownext_set = _swig_property(_spot.tgba_bdd_core_data_nownext_set_get, _spot.tgba_bdd_core_data_nownext_set_set)
    __swig_setmethods__["notnow_set"] = _spot.tgba_bdd_core_data_notnow_set_set
    __swig_getmethods__["notnow_set"] = _spot.tgba_bdd_core_data_notnow_set_get
    if _newclass:notnow_set = _swig_property(_spot.tgba_bdd_core_data_notnow_set_get, _spot.tgba_bdd_core_data_notnow_set_set)
    __swig_setmethods__["notnext_set"] = _spot.tgba_bdd_core_data_notnext_set_set
    __swig_getmethods__["notnext_set"] = _spot.tgba_bdd_core_data_notnext_set_get
    if _newclass:notnext_set = _swig_property(_spot.tgba_bdd_core_data_notnext_set_get, _spot.tgba_bdd_core_data_notnext_set_set)
    __swig_setmethods__["var_set"] = _spot.tgba_bdd_core_data_var_set_set
    __swig_getmethods__["var_set"] = _spot.tgba_bdd_core_data_var_set_get
    if _newclass:var_set = _swig_property(_spot.tgba_bdd_core_data_var_set_get, _spot.tgba_bdd_core_data_var_set_set)
    __swig_setmethods__["notvar_set"] = _spot.tgba_bdd_core_data_notvar_set_set
    __swig_getmethods__["notvar_set"] = _spot.tgba_bdd_core_data_notvar_set_get
    if _newclass:notvar_set = _swig_property(_spot.tgba_bdd_core_data_notvar_set_get, _spot.tgba_bdd_core_data_notvar_set_set)
    __swig_setmethods__["varandnext_set"] = _spot.tgba_bdd_core_data_varandnext_set_set
    __swig_getmethods__["varandnext_set"] = _spot.tgba_bdd_core_data_varandnext_set_get
    if _newclass:varandnext_set = _swig_property(_spot.tgba_bdd_core_data_varandnext_set_get, _spot.tgba_bdd_core_data_varandnext_set_set)
    __swig_setmethods__["acc_set"] = _spot.tgba_bdd_core_data_acc_set_set
    __swig_getmethods__["acc_set"] = _spot.tgba_bdd_core_data_acc_set_get
    if _newclass:acc_set = _swig_property(_spot.tgba_bdd_core_data_acc_set_get, _spot.tgba_bdd_core_data_acc_set_set)
    __swig_setmethods__["notacc_set"] = _spot.tgba_bdd_core_data_notacc_set_set
    __swig_getmethods__["notacc_set"] = _spot.tgba_bdd_core_data_notacc_set_get
    if _newclass:notacc_set = _swig_property(_spot.tgba_bdd_core_data_notacc_set_get, _spot.tgba_bdd_core_data_notacc_set_set)
    __swig_setmethods__["negacc_set"] = _spot.tgba_bdd_core_data_negacc_set_set
    __swig_getmethods__["negacc_set"] = _spot.tgba_bdd_core_data_negacc_set_get
    if _newclass:negacc_set = _swig_property(_spot.tgba_bdd_core_data_negacc_set_get, _spot.tgba_bdd_core_data_negacc_set_set)
    __swig_setmethods__["dict"] = _spot.tgba_bdd_core_data_dict_set
    __swig_getmethods__["dict"] = _spot.tgba_bdd_core_data_dict_get
    if _newclass:dict = _swig_property(_spot.tgba_bdd_core_data_dict_get, _spot.tgba_bdd_core_data_dict_set)
    def __init__(self, *args): 
        this = _spot.new_tgba_bdd_core_data(*args)
        try: self.this.append(this)
        except: self.this = this
    def declare_now_next(*args): return _spot.tgba_bdd_core_data_declare_now_next(*args)
    def declare_atomic_prop(*args): return _spot.tgba_bdd_core_data_declare_atomic_prop(*args)
    def declare_acceptance_condition(*args): return _spot.tgba_bdd_core_data_declare_acceptance_condition(*args)
    __swig_destroy__ = _spot.delete_tgba_bdd_core_data
    __del__ = lambda self : None;
tgba_bdd_core_data_swigregister = _spot.tgba_bdd_core_data_swigregister
tgba_bdd_core_data_swigregister(tgba_bdd_core_data)

class tgba_succ_iterator_concrete(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_succ_iterator_concrete, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_succ_iterator_concrete, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_succ_iterator_concrete(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_succ_iterator_concrete
    __del__ = lambda self : None;
    def first(*args): return _spot.tgba_succ_iterator_concrete_first(*args)
    def next(*args): return _spot.tgba_succ_iterator_concrete_next(*args)
    def done(*args): return _spot.tgba_succ_iterator_concrete_done(*args)
    def current_state(*args): return _spot.tgba_succ_iterator_concrete_current_state(*args)
    def current_condition(*args): return _spot.tgba_succ_iterator_concrete_current_condition(*args)
    def current_acceptance_conditions(*args): return _spot.tgba_succ_iterator_concrete_current_acceptance_conditions(*args)
tgba_succ_iterator_concrete_swigregister = _spot.tgba_succ_iterator_concrete_swigregister
tgba_succ_iterator_concrete_swigregister(tgba_succ_iterator_concrete)

class tgba_bdd_concrete(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_bdd_concrete, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_bdd_concrete, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_bdd_concrete(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_bdd_concrete
    __del__ = lambda self : None;
    def set_init_state(*args): return _spot.tgba_bdd_concrete_set_init_state(*args)
    def get_init_state(*args): return _spot.tgba_bdd_concrete_get_init_state(*args)
    def get_init_bdd(*args): return _spot.tgba_bdd_concrete_get_init_bdd(*args)
    def succ_iter(*args): return _spot.tgba_bdd_concrete_succ_iter(*args)
    def format_state(*args): return _spot.tgba_bdd_concrete_format_state(*args)
    def get_dict(*args): return _spot.tgba_bdd_concrete_get_dict(*args)
    def get_core_data(*args): return _spot.tgba_bdd_concrete_get_core_data(*args)
    def all_acceptance_conditions(*args): return _spot.tgba_bdd_concrete_all_acceptance_conditions(*args)
    def neg_acceptance_conditions(*args): return _spot.tgba_bdd_concrete_neg_acceptance_conditions(*args)
tgba_bdd_concrete_swigregister = _spot.tgba_bdd_concrete_swigregister
tgba_bdd_concrete_swigregister(tgba_bdd_concrete)

class tgba_explicit(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_explicit(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_init_state(*args): return _spot.tgba_explicit_set_init_state(*args)
    def create_transition(*args): return _spot.tgba_explicit_create_transition(*args)
    def add_condition(*args): return _spot.tgba_explicit_add_condition(*args)
    def add_conditions(*args): return _spot.tgba_explicit_add_conditions(*args)
    def declare_acceptance_condition(*args): return _spot.tgba_explicit_declare_acceptance_condition(*args)
    def copy_acceptance_conditions_of(*args): return _spot.tgba_explicit_copy_acceptance_conditions_of(*args)
    def has_acceptance_condition(*args): return _spot.tgba_explicit_has_acceptance_condition(*args)
    def add_acceptance_condition(*args): return _spot.tgba_explicit_add_acceptance_condition(*args)
    def add_acceptance_conditions(*args): return _spot.tgba_explicit_add_acceptance_conditions(*args)
    def complement_all_acceptance_conditions(*args): return _spot.tgba_explicit_complement_all_acceptance_conditions(*args)
    def merge_transitions(*args): return _spot.tgba_explicit_merge_transitions(*args)
    def add_state(*args): return _spot.tgba_explicit_add_state(*args)
    __swig_destroy__ = _spot.delete_tgba_explicit
    __del__ = lambda self : None;
    def get_init_state(*args): return _spot.tgba_explicit_get_init_state(*args)
    def succ_iter(*args): return _spot.tgba_explicit_succ_iter(*args)
    def get_dict(*args): return _spot.tgba_explicit_get_dict(*args)
    def format_state(*args): return _spot.tgba_explicit_format_state(*args)
    def all_acceptance_conditions(*args): return _spot.tgba_explicit_all_acceptance_conditions(*args)
    def neg_acceptance_conditions(*args): return _spot.tgba_explicit_neg_acceptance_conditions(*args)
tgba_explicit_swigregister = _spot.tgba_explicit_swigregister
tgba_explicit_swigregister(tgba_explicit)

class state_explicit(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_explicit, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_explicit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_explicit(*args)
        try: self.this.append(this)
        except: self.this = this
    def compare(*args): return _spot.state_explicit_compare(*args)
    def hash(*args): return _spot.state_explicit_hash(*args)
    def clone(*args): return _spot.state_explicit_clone(*args)
    __swig_destroy__ = _spot.delete_state_explicit
    __del__ = lambda self : None;
    def get_state(*args): return _spot.state_explicit_get_state(*args)
state_explicit_swigregister = _spot.state_explicit_swigregister
state_explicit_swigregister(state_explicit)

class tgba_explicit_succ_iterator(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_explicit_succ_iterator, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_explicit_succ_iterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_explicit_succ_iterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_explicit_succ_iterator
    __del__ = lambda self : None;
    def first(*args): return _spot.tgba_explicit_succ_iterator_first(*args)
    def next(*args): return _spot.tgba_explicit_succ_iterator_next(*args)
    def done(*args): return _spot.tgba_explicit_succ_iterator_done(*args)
    def current_state(*args): return _spot.tgba_explicit_succ_iterator_current_state(*args)
    def current_condition(*args): return _spot.tgba_explicit_succ_iterator_current_condition(*args)
    def current_acceptance_conditions(*args): return _spot.tgba_explicit_succ_iterator_current_acceptance_conditions(*args)
tgba_explicit_succ_iterator_swigregister = _spot.tgba_explicit_succ_iterator_swigregister
tgba_explicit_succ_iterator_swigregister(tgba_explicit_succ_iterator)

class state_product(state):
    __swig_setmethods__ = {}
    for _s in [state]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, state_product, name, value)
    __swig_getmethods__ = {}
    for _s in [state]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, state_product, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_state_product(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_state_product
    __del__ = lambda self : None;
    def left(*args): return _spot.state_product_left(*args)
    def right(*args): return _spot.state_product_right(*args)
    def compare(*args): return _spot.state_product_compare(*args)
    def hash(*args): return _spot.state_product_hash(*args)
    def clone(*args): return _spot.state_product_clone(*args)
state_product_swigregister = _spot.state_product_swigregister
state_product_swigregister(state_product)

class tgba_succ_iterator_product(tgba_succ_iterator):
    __swig_setmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_succ_iterator_product, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_succ_iterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_succ_iterator_product, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_succ_iterator_product(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_succ_iterator_product
    __del__ = lambda self : None;
    def first(*args): return _spot.tgba_succ_iterator_product_first(*args)
    def next(*args): return _spot.tgba_succ_iterator_product_next(*args)
    def done(*args): return _spot.tgba_succ_iterator_product_done(*args)
    def current_state(*args): return _spot.tgba_succ_iterator_product_current_state(*args)
    def current_condition(*args): return _spot.tgba_succ_iterator_product_current_condition(*args)
    def current_acceptance_conditions(*args): return _spot.tgba_succ_iterator_product_current_acceptance_conditions(*args)
tgba_succ_iterator_product_swigregister = _spot.tgba_succ_iterator_product_swigregister
tgba_succ_iterator_product_swigregister(tgba_succ_iterator_product)

class tgba_product(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_product, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_product, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_product(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_product
    __del__ = lambda self : None;
    def get_init_state(*args): return _spot.tgba_product_get_init_state(*args)
    def succ_iter(*args): return _spot.tgba_product_succ_iter(*args)
    def get_dict(*args): return _spot.tgba_product_get_dict(*args)
    def format_state(*args): return _spot.tgba_product_format_state(*args)
    def transition_annotation(*args): return _spot.tgba_product_transition_annotation(*args)
    def project_state(*args): return _spot.tgba_product_project_state(*args)
    def all_acceptance_conditions(*args): return _spot.tgba_product_all_acceptance_conditions(*args)
    def neg_acceptance_conditions(*args): return _spot.tgba_product_neg_acceptance_conditions(*args)
tgba_product_swigregister = _spot.tgba_product_swigregister
tgba_product_swigregister(tgba_product)

class tgba_tba_proxy(tgba):
    __swig_setmethods__ = {}
    for _s in [tgba]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_tba_proxy, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_tba_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_tba_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_tba_proxy
    __del__ = lambda self : None;
    def get_init_state(*args): return _spot.tgba_tba_proxy_get_init_state(*args)
    def succ_iter(*args): return _spot.tgba_tba_proxy_succ_iter(*args)
    def get_dict(*args): return _spot.tgba_tba_proxy_get_dict(*args)
    def format_state(*args): return _spot.tgba_tba_proxy_format_state(*args)
    def project_state(*args): return _spot.tgba_tba_proxy_project_state(*args)
    def transition_annotation(*args): return _spot.tgba_tba_proxy_transition_annotation(*args)
    def all_acceptance_conditions(*args): return _spot.tgba_tba_proxy_all_acceptance_conditions(*args)
    def neg_acceptance_conditions(*args): return _spot.tgba_tba_proxy_neg_acceptance_conditions(*args)
tgba_tba_proxy_swigregister = _spot.tgba_tba_proxy_swigregister
tgba_tba_proxy_swigregister(tgba_tba_proxy)

class tgba_sba_proxy(tgba_tba_proxy):
    __swig_setmethods__ = {}
    for _s in [tgba_tba_proxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_sba_proxy, name, value)
    __swig_getmethods__ = {}
    for _s in [tgba_tba_proxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_sba_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_sba_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    def state_is_accepting(*args): return _spot.tgba_sba_proxy_state_is_accepting(*args)
    __swig_destroy__ = _spot.delete_tgba_sba_proxy
    __del__ = lambda self : None;
tgba_sba_proxy_swigregister = _spot.tgba_sba_proxy_swigregister
tgba_sba_proxy_swigregister(tgba_sba_proxy)

ltl_to_tgba_lacim = _spot.ltl_to_tgba_lacim
class dotty_decorator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dotty_decorator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dotty_decorator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_dotty_decorator
    __del__ = lambda self : None;
    def state_decl(*args): return _spot.dotty_decorator_state_decl(*args)
    def link_decl(*args): return _spot.dotty_decorator_link_decl(*args)
    __swig_getmethods__["instance"] = lambda x: _spot.dotty_decorator_instance
    if _newclass:instance = staticmethod(_spot.dotty_decorator_instance)
dotty_decorator_swigregister = _spot.dotty_decorator_swigregister
dotty_decorator_swigregister(dotty_decorator)
ltl_to_tgba_fm = _spot.ltl_to_tgba_fm
dotty_decorator_instance = _spot.dotty_decorator_instance

tgba_dupexp_bfs = _spot.tgba_dupexp_bfs
tgba_dupexp_dfs = _spot.tgba_dupexp_dfs
lbtt_reachable = _spot.lbtt_reachable
class emptiness_check_result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check_result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check_result, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_emptiness_check_result(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_emptiness_check_result
    __del__ = lambda self : None;
    def accepting_run(*args): return _spot.emptiness_check_result_accepting_run(*args)
    def automaton(*args): return _spot.emptiness_check_result_automaton(*args)
    def options(*args): return _spot.emptiness_check_result_options(*args)
    def parse_options(*args): return _spot.emptiness_check_result_parse_options(*args)
    def statistics(*args): return _spot.emptiness_check_result_statistics(*args)
emptiness_check_result_swigregister = _spot.emptiness_check_result_swigregister
emptiness_check_result_swigregister(emptiness_check_result)
dotty_reachable = _spot.dotty_reachable

class emptiness_check(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _spot.delete_emptiness_check
    __del__ = lambda self : None;
    def automaton(*args): return _spot.emptiness_check_automaton(*args)
    def options(*args): return _spot.emptiness_check_options(*args)
    def parse_options(*args): return _spot.emptiness_check_parse_options(*args)
    def safe(*args): return _spot.emptiness_check_safe(*args)
    def check(*args): return _spot.emptiness_check_check(*args)
    def statistics(*args): return _spot.emptiness_check_statistics(*args)
    def print_stats(*args): return _spot.emptiness_check_print_stats(*args)
    def options_updated(*args): return _spot.emptiness_check_options_updated(*args)
emptiness_check_swigregister = _spot.emptiness_check_swigregister
emptiness_check_swigregister(emptiness_check)

class emptiness_check_instantiator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, emptiness_check_instantiator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, emptiness_check_instantiator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["construct"] = lambda x: _spot.emptiness_check_instantiator_construct
    if _newclass:construct = staticmethod(_spot.emptiness_check_instantiator_construct)
    def instantiate(*args): return _spot.emptiness_check_instantiator_instantiate(*args)
    def options(*args): return _spot.emptiness_check_instantiator_options(*args)
    def min_acceptance_conditions(*args): return _spot.emptiness_check_instantiator_min_acceptance_conditions(*args)
    def max_acceptance_conditions(*args): return _spot.emptiness_check_instantiator_max_acceptance_conditions(*args)
    __swig_destroy__ = _spot.delete_emptiness_check_instantiator
    __del__ = lambda self : None;
emptiness_check_instantiator_swigregister = _spot.emptiness_check_instantiator_swigregister
emptiness_check_instantiator_swigregister(emptiness_check_instantiator)
emptiness_check_instantiator_construct = _spot.emptiness_check_instantiator_construct

class tgba_run(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_run, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_run, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prefix"] = _spot.tgba_run_prefix_set
    __swig_getmethods__["prefix"] = _spot.tgba_run_prefix_get
    if _newclass:prefix = _swig_property(_spot.tgba_run_prefix_get, _spot.tgba_run_prefix_set)
    __swig_setmethods__["cycle"] = _spot.tgba_run_cycle_set
    __swig_getmethods__["cycle"] = _spot.tgba_run_cycle_get
    if _newclass:cycle = _swig_property(_spot.tgba_run_cycle_get, _spot.tgba_run_cycle_set)
    __swig_destroy__ = _spot.delete_tgba_run
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _spot.new_tgba_run(*args)
        try: self.this.append(this)
        except: self.this = this
tgba_run_swigregister = _spot.tgba_run_swigregister
tgba_run_swigregister(tgba_run)

print_tgba_run = _spot.print_tgba_run
tgba_run_to_tgba = _spot.tgba_run_to_tgba
class couvreur99_check(emptiness_check):
    __swig_setmethods__ = {}
    for _s in [emptiness_check]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, couvreur99_check, name, value)
    __swig_getmethods__ = {}
    for _s in [emptiness_check]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, couvreur99_check, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_couvreur99_check(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_couvreur99_check
    __del__ = lambda self : None;
    def check(*args): return _spot.couvreur99_check_check(*args)
    def print_stats(*args): return _spot.couvreur99_check_print_stats(*args)
    def result(*args): return _spot.couvreur99_check_result(*args)
couvreur99_check_swigregister = _spot.couvreur99_check_swigregister
couvreur99_check_swigregister(couvreur99_check)
couvreur99 = _spot.couvreur99

class couvreur99_check_shy(couvreur99_check):
    __swig_setmethods__ = {}
    for _s in [couvreur99_check]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, couvreur99_check_shy, name, value)
    __swig_getmethods__ = {}
    for _s in [couvreur99_check]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, couvreur99_check_shy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_couvreur99_check_shy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_couvreur99_check_shy
    __del__ = lambda self : None;
    def check(*args): return _spot.couvreur99_check_shy_check(*args)
couvreur99_check_shy_swigregister = _spot.couvreur99_check_shy_swigregister
couvreur99_check_shy_swigregister(couvreur99_check_shy)

class tgba_run_dotty_decorator(dotty_decorator):
    __swig_setmethods__ = {}
    for _s in [dotty_decorator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_run_dotty_decorator, name, value)
    __swig_getmethods__ = {}
    for _s in [dotty_decorator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_run_dotty_decorator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_tgba_run_dotty_decorator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_run_dotty_decorator
    __del__ = lambda self : None;
    def state_decl(*args): return _spot.tgba_run_dotty_decorator_state_decl(*args)
    def link_decl(*args): return _spot.tgba_run_dotty_decorator_link_decl(*args)
tgba_run_dotty_decorator_swigregister = _spot.tgba_run_dotty_decorator_swigregister
tgba_run_dotty_decorator_swigregister(tgba_run_dotty_decorator)
explicit_magic_search = _spot.explicit_magic_search
bit_state_hashing_magic_search = _spot.bit_state_hashing_magic_search
magic_search = _spot.magic_search
never_claim_reachable = _spot.never_claim_reachable

tgba_save_reachable = _spot.tgba_save_reachable
class tgba_statistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tgba_statistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tgba_statistics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["transitions"] = _spot.tgba_statistics_transitions_set
    __swig_getmethods__["transitions"] = _spot.tgba_statistics_transitions_get
    if _newclass:transitions = _swig_property(_spot.tgba_statistics_transitions_get, _spot.tgba_statistics_transitions_set)
    __swig_setmethods__["states"] = _spot.tgba_statistics_states_set
    __swig_getmethods__["states"] = _spot.tgba_statistics_states_get
    if _newclass:states = _swig_property(_spot.tgba_statistics_states_get, _spot.tgba_statistics_states_set)
    def __init__(self, *args): 
        this = _spot.new_tgba_statistics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_tgba_statistics
    __del__ = lambda self : None;
tgba_statistics_swigregister = _spot.tgba_statistics_swigregister
tgba_statistics_swigregister(tgba_statistics)

stats_reachable = _spot.stats_reachable
class ostream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
ostream_swigregister = _spot.ostream_swigregister
ostream_swigregister(ostream)

class ofstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_ofstream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spot.delete_ofstream
    __del__ = lambda self : None;
ofstream_swigregister = _spot.ofstream_swigregister
ofstream_swigregister(ofstream)

class ostringstream(ostream):
    __swig_setmethods__ = {}
    for _s in [ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostringstream, name, value)
    __swig_getmethods__ = {}
    for _s in [ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostringstream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spot.new_ostringstream(*args)
        try: self.this.append(this)
        except: self.this = this
    def str(*args): return _spot.ostringstream_str(*args)
    __swig_destroy__ = _spot.delete_ostringstream
    __del__ = lambda self : None;
ostringstream_swigregister = _spot.ostringstream_swigregister
ostringstream_swigregister(ostringstream)

empty_parse_error_list = _spot.empty_parse_error_list
get_cout = _spot.get_cout
get_cerr = _spot.get_cerr
print_on = _spot.print_on
unblock_signal = _spot.unblock_signal


