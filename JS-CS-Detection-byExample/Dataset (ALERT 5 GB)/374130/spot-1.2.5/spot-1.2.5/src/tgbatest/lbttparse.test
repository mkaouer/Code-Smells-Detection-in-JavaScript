#!/bin/sh
# -*- coding: utf-8 -*-
# Copyright (C) 2012, 2013 Laboratoire de Recherche et DÃ©veloppement
# de l'Epita (LRDE).
#
# This file is part of Spot, a model checking library.
#
# Spot is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# Spot is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. ./defs

set -e

for f in 'p0 U p1 U p2' 'Gp00 | Gp13 | Gp42' '{(1;1)*}[]->p1'
do
  # Make sure Spot can read the LBTT it produces
  run 0 ../ltl2tgba -t "$f" > out
  s=`wc -l < out`
  run 0 ../ltl2tgba -t -XL out > out2
  s2=`wc -l < out2`
  test "$s" -eq "$s2"

  # The LBTT output use 2 lines par state, one line per transition,
  # and one extra line for header.
  run 0 ../ltl2tgba -ks "$f" > size
  st=`cat size | sed -n 's/states: //p'`
  tr=`cat size | sed -n 's/transitions: //p'`
  l=`expr $st \* 2 + $tr + 1`
  test "$s" -eq "$l"

  # Do the same with bin/ltl2tgba
  run 0 ../../bin/ltl2tgba --low --any --lbtt "$f" >out3
  cmp out out3
  head -n 1 out3 | grep t
  # Make sure we output the state-based format
  # for BA...
  run 0 ../../bin/ltl2tgba --ba --lbtt --low --any "$f" >out4
  head -n 1 out4 | grep t && exit 1
  s4=`wc -l < out4`
  test "$s" -eq "$s4"
  run 0 ../ltl2tgba -t -XL out4 > out5
  s5=`wc -l < out5`
  test "$s" -eq "$s5"
  # ... unless --lbtt=t is used.
  run 0 ../../bin/ltl2tgba --ba --lbtt=t --low --any "$f" >out6
  head -n 1 out6 | grep t
  s6=`wc -l < out6`
  test "$s" -eq "$s6"
  run 0 ../ltl2tgba -t -XL out6 > out7
  s7=`wc -l < out7`
  test "$s" -eq "$s7"
done

# This is the output of 'lbt' on the formula 'U p0 p1'.
cat >Up0p1 <<EOF
4 1
0 1 -1
1 p0
2 p1
-1
1 0 -1
1 p0
2 p1
-1
2 0 0 -1
3 t
-1
3 0 0 -1
3 t
-1
EOF

run 0 ../ltl2tgba -ks -XL Up0p1 > size
test "`cat size | sed -n 's/states: //p'`" = 4
test "`cat size | sed -n 's/transitions: //p'`" = 6


# This kind of output is returned by wring2lbtt, on the same formula.
# (Newer versions of LBTT reject this input with missing new lines.)
cat >wring2lbtt <<EOF
4 1 0 1 -1 1 p0
2 p1
-1 1 0 -1 1 p0
2 p1
-1 2 0 0 -1 3 t
-1 3 0 0 -1 3 t
-1
EOF

run 0 ../ltl2tgba -ks -XL wring2lbtt > size
test "`cat size | sed -n 's/states: //p'`" = 4
test "`cat size | sed -n 's/transitions: //p'`" = 6

# Another example from wring2lbtt (or modella), showing that the
# acceptance set of the state is not always numbered from 0.
cat >wring2lbtt2 <<EOF
6 1 0 1 -1 1 | & ! p0 ! p1 & p0 ! p1
2 & ! p0 ! p1
3 | & p0 p1 & ! p0 p1
-1 1 0 -1 4 ! p1
-1 2 0 -1 2 & ! p0 ! p1
3 | & p0 p1 & ! p0 p1
-1 3 0 -1 5 t
-1 4 0 1 -1 4 ! p1
-1 5 0 1 -1 5 t
-1
EOF

run 0 ../ltl2tgba -ks -XL wring2lbtt2 > size
test "`cat size | sed -n 's/states: //p'`" = 6
test "`cat size | sed -n 's/transitions: //p'`" = 9
