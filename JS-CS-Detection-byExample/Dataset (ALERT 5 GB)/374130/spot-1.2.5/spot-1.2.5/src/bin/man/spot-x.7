.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.12.
.TH SPOT-X "1" "August 2014" "spot-x (spot 1.2.5)" "User Commands"
.SH NAME
spot-x \- Common fine-tuning options.
.SH SYNOPSIS
.B \-\-extra-options STRING
.br
.B \-x STRING
.SH DESCRIPTION
.\" Add any additional description here
.PP
Common fine\-tuning options for binaries built with Spot.
.PP
The argument of \fB\-x\fR or \fB\-\-extra\-options\fR is a comma\-separated list of KEY=INT
assignments that are passed to the post\-processing routines (they may be passed
to other algorithms in the future). These options are mostly used for
benchmarking and debugging purpose. KEYR (without any value) is a shorthand for
KEY=1, while !KEY is a shorthand for KEY=0.
.SS "Translation options:"
.TP
comp\-susp
Set to 1 to enable compositional suspension, as
described in our SPIN'13 paper (see Bibliography
below).  Set to 2, to build only the skeleton TGBA
without composing it.  Set to 0 (the default) to
disable.
.TP
early\-susp
When set to 1, start compositional suspension on
the transitions that enter accepting SCCs, and not
only on the transitions inside accepting SCCs.
This option defaults to 0, and is only used when
comp\-susp=1.
.TP
skel\-simul
Default to 1.  Set to 0 to disable simulation on
the skeleton automaton during compositional
suspension. Only used when comp\-susp=1.
.TP
skel\-wdba
Set to 0 to disable WDBA minimization on the
skeleton automaton during compositional
suspension. Set to 1 always WDBA\-minimize the
skeleton .  Set to 2 to keep the WDBA only if it
is smaller than the original skeleton.  This
option is only used when comp\-susp=1 and default
to 1 or 2 depending on whether \fB\-\-small\fR or
\fB\-\-deterministic\fR is specified.
.SS "Postprocessing options:"
.TP
ba\-simul
Set to 0 to disable simulation\-based reductions on
the Büchi automaton (i.e., after degeneralization
has been performed). Set to 1 to use only direct
simulation.  Set to 2 to use only reverse
simulation.  Set to 3 to iterate both direct and
reverse simulations.   The default is 3 in \fB\-\-high\fR
mode, and 0 otherwise.
.TP
degen\-lcache
If non\-zero (the default), whenever the
degeneralization algorithm enters an SCC on a
state that has already been associated to a level
elsewhere, it should reuse that level. Different
values can be used to select which level to reuse:
1 always uses the first level seen, 2 uses the
minimum level seen so far, and 3 uses the maximum
level seen so far. The "lcache" stands for "level
cache".
.TP
degen\-lskip
If non\-zero (the default), the degeneralization
algorithm will skip as much levels as possible for
each transition.  This is enabled by default as it
very often reduce the number of resulting states.
A consequence of skipping levels is that the
degeneralized automaton tends to have smaller
cycles around the accepting states.  Disabling
skipping will produce automata with large cycles,
and often with more states.
.TP
degen\-order
If non\-zero, the degeneralization algorithm will
compute one degeneralization order for each SCC it
processes. This is currently disabled by default.
.TP
degen\-reset
If non\-zero (the default), the degeneralization
algorithm will reset its level any time it exits a
non\-accepting SCC.
.TP
sat\-acc
When this is set to some positive integer, the
SAT\-based will attempt to construct a TGBA with
the given number of acceptance sets. states.  It
may however return an automaton with less
acceptance sets if some of these are useless.
Setting sat\-acc automatically sets sat\-minimize to
1 if not set differently.
.TP
sat\-minimize
Set to 1 to enable SAT\-based minimization of
deterministic TGBA: it starts with the number of
states of the input, and iteratively tries to find
a deterministic TGBA with one less state. Set to 2
to perform a binary search instead.  Disabled (0)
by default.  The sat solver to use can be set with
the SPOT_SATSOLVER environment variable (see
below).  By default the procedure looks for a TGBA
with the same number of acceptance set; this can
be changed with the sat\-acc option, or of course
by using \fB\-B\fR to construct a Büchi automaton.
Enabling SAT\-based minimization will also enable
tba\-det.
.TP
sat\-states
When this is set to some positive integer, the
SAT\-based minimization will attempt to construct a
TGBA with the given number of states.  It may
however return an automaton with less states if
some of these are unreachable or useless.  Setting
sat\-states automatically enables sat\-minimize, but
no iteration is performed.  If no equivalent
automaton could be constructed with the given
number of states, the original automaton is
returned.
.TP
scc\-filter
Set to 1 (the default) to enable SCC\-pruning and
acceptance simplification at the beginning of
post\-processing. Transitions that are outside of
accepting SCC are removed from accepting sets,
except those that enter into an accepting SCC. Set
to 2 to remove even these entering transition from
the accepting sets. Set to 0 to disable this
SCC\-pruning and acceptance simpification pass.
.TP
simul
Set to 0 to disable simulation\-based reductions.
Set to 1 to use only direct simulation. Set to 2
to use only reverse simulation. Set to 3 to
iterate both direct and reverse simulations. Set
to 4 to apply only "don't care" direct simulation.
Set to 5 to iterate "don't care" direct simulation
and reverse simulation. The default is 3, except
when option \fB\-\-low\fR is specified, in which case the
default is 1.
.TP
simul\-limit
Can be set to a positive integer to cap the number
of "don't care" transitions considered by the
"don't care"\-simulation algorithm. A negative
value (the default) does not enforce any limit.
Note that if there are N "don't care" transitions,
the algorithm may potentially test 2^N
configurations.
.TP
state\-based
Set to 1 to instruct the SAT\-minimization
procedure to produce a TGBA where all outgoing
transition of a state have the same acceptance
sets.  By default this is only enabled when option
\fB\-B\fR is used.
.TP
tba\-det
Set to 1 to attempt a powerset determinization if
the TGBA is not already deterministic.  Doing so
will degeneralize the automaton.  This is disabled
by default, unless sat\-minimize is set.
.TP
wdba\-minimize
Set to 0 to disable WDBA\-minimization.  Enabled by
default.
.SH "ENVIRONMENT VARIABLES"

.TP
\fBSPOT_SATLOG\fR
If set to a filename, the SAT-based minimization routines will append
statistics about each iteration to the named file.  Each line lists
the following comma-separated values: requested number of states,
number of reachable states in the output, number of edges in the
output, number of transitions in the output, number of variables in
the SAT problem, number of clauses in the SAT problem, user time for
encoding the SAT problem, system time for encoding the SAT problem,
user time for solving the SAT problem, system time for solving the SAT
problem.

.TP
\fBSPOT_SATSOLVER\fR If set, this variable should indicate how to call
a SAT\-solver.  This is used by the sat\-minimize option described
above.  The default value is \f(CW"glucose -verb=0 -model %I >%O"\fR,
it is correct for glucose version 3.0 (for older versions, remove the
\fCW(-model\fR option).  The escape sequences \f(CW%I\fR and
\f(CW%O\fR respectively denote the names of the input and output
files.  These temporary files are created in the directory specified
by \fBSPOT_TMPDIR\fR or \fBTMPDIR\fR (see below).  The SAT-solver
should follow the convention of the SAT Competition for its input and
output format.

.TP
\fBSPOT_TMPDIR\fR, \fBTMPDIR\fR
These variables control in which directory temporary files (e.g.,
those who contain the input and output when interfacing with
translators) are created.  \fBTMPDIR\fR is only read if
\fBSPOT_TMPDIR\fR does not exist.  If none of these environment
variables exist, or if their value is empty, files are created in the
current directory.

.TP
\fBSPOT_TMPKEEP\fR
When this variable is defined, temporary files are not removed.
This is mostly useful for debugging.
.SH BIBLIOGRAPHY
.TP
1.
Christian Dax, Jochen Eisinger, Felix Klaedtke: Mechanizing the
Powerset Construction for Restricted Classes of
ω-Automata. Proceedings of ATVA'07.  LNCS 4762.

Describes the WDBA-minimization algorithm implemented in Spot.  The
algorithm used for the tba-det options is also a generalization (to
TBA instead of BA) of what they describe in sections 3.2 and 3.3.

.TP
2.
Tomáš Babiak, Thomas Badie, Alexandre Duret-Lutz, Mojmír Křetínský,
Jan Strejček: Compositional Approach to Suspension and Other
Improvements to LTL Translation.  Proceedings of SPIN'13.  LNCS 7976.

Describes the compositional suspension, the simulation-based
reductions, and the SCC-based simplifications.

.TP
3.
Rüdiger Ehlers: Minimising Deterministic Büchi Automata Precisely using
SAT Solving.  Proceedings of SAT'10.  LNCS 6175.

Our SAT-based minimization procedures are generalizations of this
paper to deal with TBA or TGBA.
.SH "REPORTING BUGS"
Report bugs to <spot@lrde.epita.fr>.
.SH COPYRIGHT
Copyright \(co 2014  Laboratoire de Recherche et Développement de l'Epita.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
.BR ltl2tgba (1)
.BR ltl2tgta (1)
.BR dstar2tgba (1)
