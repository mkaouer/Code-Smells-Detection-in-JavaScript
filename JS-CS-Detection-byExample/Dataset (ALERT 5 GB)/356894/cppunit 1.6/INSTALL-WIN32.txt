At the current time, the only supported WIN32 platform is 
Microsoft Visual C++. You must have VC++ 6.0 at least.

Quick Steps to compile & run a sample using the GUI TestRunner:
- Open examples/examples.dsw in VC++ (contains all the samples)
- Make HostApp the Active project
- Compile
- in VC++, Tools/Customize.../Add-ins and macro files/Browse...
- select the file lib/TestRunnerDSPlugIn.dll and press ok to register
  the add-ins (double-click on failure = open file in VC++).
- Run the project


Project build Target:
---------------------

Framework & tools:

* cppunit (cppunit.lib) : unit testing framework library, the one you use 
to write unit tests.

* TestRunner (testrunner.dll) : a MFC extension DLL to run and browser unit 
tests from a GUI.

* DSPlugIn (lib/TestRunnerDSPlugInXX.dll) : a VC++ add-in used by 
testrunner.dll. If you double-click on a failure in the MFC TestRunner,
a running instance of VC++ will open the file and highlight the line.

* TestPlugInRunner : (Warning: experimental) a VC++ 
application to run test plug-in. A test plug-in is a DLL that publish a 
specified interface. This application is still incomplete (the auto-reload 
feature is missing).

All libraries are placed in the Lib/ directory.


Examples:

* CppUnitTestMain : the actual test suite use to test CppUnit. Use a 
TextTestRunner.

* CppUnitTestApp : contains the same test suite as CppUnitTestMain, but
run them using the MFC TestRunner.

* hierarchy : a sample demonstrating how to sublcass test (you might rather
want to use HelperMacros.h and the CPPUNIT_TEST_SUB_SUITE macro which does
it in a 'cleaner' way. That sample has not been updated for a long time).

* HostApp : a sample using the MFC TestRunner demonstrating different test
failure.

* TestPlugIn : a sample demonstrating how to write a TestPlugIn for the
TestPlugInRunner (experimental).


Configuration:
--------------

CppUnit and TestRunner comes with 3 configurations.

* Release (): Multihtreaded DLL, release mode
* Debug (d): Debug Multithreaded DLL, debug mode
* Debug Crossplatform (cd): Debug Multithreaded DLL, suite name for
test cases are not extracted from the class name using type_info.

The letters enclosed in brackets indicates the suffix added to
the library name. For example, the debug configuration cppunit library
name is cppunitd.lib.


Building:
---------

* Open the src/msvc6/testrunner/TestRunner.dsw workspace in VC++.
* Make TestRunner is the active project.
* Select the configuration you want to build (Release, Debug or
  Debug Crossplatform)
* Press F7 to compile TestRunner. Dependency should automatically
compile the CppUnit and DSPlugIn which TestRunner depends on.
* The resulting libraries can be found in the lib/ directory.


Testing:
--------

* Open the workspace examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsw.
* Make CppUnitTestApp the active project.
* Select the configuration you build the library for.
* Compile and run the project. The TestRunner GUI should appear.


Using CppUnit:
--------------

* Writing unit tests:
  To write unit tests, you need to link against cppunitXX.lib, where
  XX is the chosen configuration suffix letters. You must
  enable RTTI (Project Settings/C++/C++ Language) in your project.
  CppUnit include directory must be in the include search path.
  You can do that by adding the include directory in 
  Project Settings/C++/Preprocessor/Additional include directories,
  or Tools/Options/Directories/Include.

  Quick steps:
  - enable RTTI
  - link lib/cppunitXX.lib
  - include/ must be in the include search path

* Using the TestRunner GUI:
  To use the test runner GUI you need to link against testrunnerXX.lib
  and cppunitXX.lib, where XX is the chosen configuration suffix 
  letters. You must enable RTTI (Project Settings/C++/C++ Language) in 
  your project. testrunner.dll must be in the path when your program is
  run (the Debug/Release directory, your project dsp directory, or
  in a directory specified in the PATH environment variable).
  One of the easiest way to do that is to either add a post-build
  command or add the testrunner.dll which is in the lib/ directory
  to your project and define a custom build step that copy the
  dll to your "Intermediate" directory (Debug or Release usually).

  Since the TestRunner GUI is a MFC extension DLL, it can access
  the CWinApp of the using application. Settings are stored using 
  the application registry key. That means that "most recently used
  test" settings are different for each application.

  Quick steps:
  - enable RTTI
  - link lib/cppunitXX.lib and lib/testrunnerXX.lib
  - include/ must be in the include search path
  - lib/testrunnerXX.dll must be available to run your project

* Using the DSPlugIn:
  You must register the plug-in with VC++. This is done in 
  Tools/Customize/Add-ins and Macro files, selecting browse and
  selecting lib/TestRunnerDSPlugIn.dll (you can register the release
  or the debug version, both work).

  If an instance of VC++ is running and you double-click on a failure,
  VC++ will open the file and select the failure line.

* Using the Test Plug In Runner:
  Your DLL must export a function that implement the interface
defined in include/msvc6/testrunner/TestPlugInInterface.h.
See examples/msvc6/TestPlugIn/TestPlugInInterfaceImpl.* for an example.
Be warned, that runner is still experimental and have not been tested
much.


Frequently Asked Questions:
---------------------------

1) Why does my application crash when I use CppUnit ?
   
   You probably forgot to enable RTTI in your project/configuration.
RTTI are disabled by default. 
   Enable RTTI in Projects/Settings.../C++/C++ Langage. Make sure to
do so for all configurations.

2) Why does the compiler report an error when linking with CppUnit library ?

   You most likely are not using the same C-RunTime library as CppUnit.
   In Release configuration, CppUnit use "Mulithreaded DLL".
   In Debug configurations, CppUnit use "Debug Multihreaded DLL".
   Check that Projects/Settings.../C++/Code Generation is indeed using
the correct library.

3) Why does the test ExceptionTest.testAssignment failed in CppUnit test 
   suite ?

   I've never been able to figure out why that test fails.  It seems
to be specific to VC++ since the test passes with gcc.  If you can figure
out the failure, please let us know!
