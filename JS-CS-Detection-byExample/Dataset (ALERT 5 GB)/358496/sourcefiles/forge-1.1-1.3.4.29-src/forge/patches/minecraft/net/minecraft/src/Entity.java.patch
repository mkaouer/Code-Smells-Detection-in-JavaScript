--- ../src_base/minecraft/net/minecraft/src/Entity.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/Entity.java	0000-00-00 00:00:00.000000000 -0000
@@ -70,6 +70,9 @@
     public int serverPosZ;
     public boolean ignoreFrustrumCheck;
     public boolean isAirBorne;
+    
+    //Forge: Used to store custom data for each entity.
+    private NBTTagCompound customEntityData;
 
     public Entity(World world)
     {
@@ -110,6 +113,20 @@
     }
 
     protected abstract void entityInit();
+    
+    /**
+     * Returns a NBTTagCompound that can be used to store custom data for this entity.
+     * It will be written, and read from disc, so it persists over world saves.
+     * @return A NBTTagCompound
+     */
+    public NBTTagCompound getEntityData()
+    {
+    	if (customEntityData == null)
+    	{
+    		customEntityData = new NBTTagCompound();
+    	}
+    	return customEntityData;
+    }
 
     public DataWatcher getDataWatcher()
     {
@@ -967,6 +984,10 @@
         nbttagcompound.setShort("Fire", (short)fire);
         nbttagcompound.setShort("Air", (short)getAir());
         nbttagcompound.setBoolean("OnGround", onGround);
+        if (customEntityData != null) 
+        {
+        	nbttagcompound.setCompoundTag("ForgeData", customEntityData);
+    	}
         writeEntityToNBT(nbttagcompound);
     }
 
@@ -1001,6 +1022,10 @@
         onGround = nbttagcompound.getBoolean("OnGround");
         setPosition(posX, posY, posZ);
         setRotation(rotationYaw, rotationPitch);
+        if (nbttagcompound.hasKey("ForgeData")) 
+        {
+        	customEntityData = nbttagcompound.getCompoundTag("ForgeData");
+        }
         readEntityFromNBT(nbttagcompound);
     }
 
