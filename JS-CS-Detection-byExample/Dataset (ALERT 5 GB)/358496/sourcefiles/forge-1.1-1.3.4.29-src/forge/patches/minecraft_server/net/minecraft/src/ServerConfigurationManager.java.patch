--- ../src_base/minecraft_server/net/minecraft/src/ServerConfigurationManager.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/ServerConfigurationManager.java	0000-00-00 00:00:00.000000000 -0000
@@ -4,13 +4,14 @@
 import java.util.*;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.forge.DimensionManager;
 
 public class ServerConfigurationManager
 {
     public static Logger logger = Logger.getLogger("Minecraft");
     public List playerEntities;
     private MinecraftServer mcServer;
-    private PlayerManager playerManagerObj[];
+    //private PlayerManager playerManagerObj[];
     private int maxPlayers;
     private Set bannedPlayers;
     private Set bannedIPs;
@@ -32,16 +33,18 @@
         ops = new HashSet();
         whiteListedIPs = new HashSet();
         field_35482_p = 0;
-        playerManagerObj = new PlayerManager[3];
+        //playerManagerObj = new PlayerManager[3];
         mcServer = minecraftserver;
         bannedPlayersFile = minecraftserver.getFile("banned-players.txt");
         ipBanFile = minecraftserver.getFile("banned-ips.txt");
         opFile = minecraftserver.getFile("ops.txt");
         whitelistPlayersFile = minecraftserver.getFile("white-list.txt");
         int i = minecraftserver.propertyManagerObj.getIntProperty("view-distance", 10);
+        /*
         playerManagerObj[0] = new PlayerManager(minecraftserver, 0, i);
         playerManagerObj[1] = new PlayerManager(minecraftserver, -1, i);
         playerManagerObj[2] = new PlayerManager(minecraftserver, 1, i);
+        */
         maxPlayers = minecraftserver.propertyManagerObj.getIntProperty("max-players", 20);
         whiteListEnforced = minecraftserver.propertyManagerObj.getBooleanProperty("white-list", false);
         readBannedPlayers();
@@ -61,9 +64,10 @@
 
     public void joinNewPlayerManager(EntityPlayerMP entityplayermp)
     {
-        playerManagerObj[0].removePlayer(entityplayermp);
-        playerManagerObj[1].removePlayer(entityplayermp);
-        playerManagerObj[2].removePlayer(entityplayermp);
+        for (World world : DimensionManager.getWorlds())
+        {
+            ((WorldServer)world).playerManager.removePlayer(entityplayermp);
+        }
         getPlayerManager(entityplayermp.dimension).addPlayer(entityplayermp);
         WorldServer worldserver = mcServer.getWorldManager(entityplayermp.dimension);
         worldserver.chunkProviderServer.loadChunk((int)entityplayermp.posX >> 4, (int)entityplayermp.posZ >> 4);
@@ -71,27 +75,18 @@
 
     public int getMaxTrackingDistance()
     {
-        return playerManagerObj[0].getMaxTrackingDistance();
+        WorldServer world = (WorldServer)DimensionManager.getWorld(0);
+        return world.playerManager.getMaxTrackingDistance();
     }
 
     private PlayerManager getPlayerManager(int i)
     {
-        if (i == -1)
-        {
-            return playerManagerObj[1];
-        }
-        if (i == 0)
-        {
-            return playerManagerObj[0];
-        }
-        if (i == 1)
-        {
-            return playerManagerObj[2];
-        }
-        else
+        WorldServer world = (WorldServer)DimensionManager.getWorld(i);
+        if (world == null)
         {
             return null;
         }
+        return world.playerManager;
     }
 
     public void readPlayerDataFromFile(EntityPlayerMP entityplayermp)
@@ -213,6 +208,10 @@
 
     public void sendPlayerToOtherDimension(EntityPlayerMP entityplayermp, int i)
     {
+        sendPlayerToOtherDimension(entityplayermp, i, new Teleporter());
+    }
+    public void sendPlayerToOtherDimension(EntityPlayerMP entityplayermp, int i, Teleporter teleporter)
+    {
         int j = entityplayermp.dimension;
         WorldServer worldserver = mcServer.getWorldManager(entityplayermp.dimension);
         entityplayermp.dimension = i;
@@ -220,30 +219,14 @@
         entityplayermp.playerNetServerHandler.sendPacket(new Packet9Respawn((byte)entityplayermp.dimension, (byte)entityplayermp.worldObj.difficultySetting, worldserver1.getSeed(), worldserver1.getWorldInfo().getTerrainType(), worldserver1.worldHeight, entityplayermp.itemInWorldManager.getGameType()));
         worldserver.removePlayer(entityplayermp);
         entityplayermp.isDead = false;
-        double d = entityplayermp.posX;
-        double d1 = entityplayermp.posZ;
-        double d2 = 8D;
-        if (entityplayermp.dimension == -1)
-        {
-            d /= d2;
-            d1 /= d2;
-            entityplayermp.setLocationAndAngles(d, entityplayermp.posY, d1, entityplayermp.rotationYaw, entityplayermp.rotationPitch);
-            if (entityplayermp.isEntityAlive())
-            {
-                worldserver.updateEntityWithOptionalForce(entityplayermp, false);
-            }
-        }
-        else if (entityplayermp.dimension == 0)
-        {
-            d *= d2;
-            d1 *= d2;
-            entityplayermp.setLocationAndAngles(d, entityplayermp.posY, d1, entityplayermp.rotationYaw, entityplayermp.rotationPitch);
-            if (entityplayermp.isEntityAlive())
-            {
-                worldserver.updateEntityWithOptionalForce(entityplayermp, false);
-            }
-        }
-        else
+        
+        WorldProvider pOld = DimensionManager.getProvider(j);
+        WorldProvider pNew = DimensionManager.getProvider(i);
+        double moveFactor = pOld.getMovementFactor() / pNew.getMovementFactor();
+        double d = entityplayermp.posX * moveFactor;
+        double d1 = entityplayermp.posZ * moveFactor;
+        
+        if (entityplayermp.dimension == 1)
         {
             ChunkCoordinates chunkcoordinates = worldserver1.getEntrancePortalLocation();
             d = chunkcoordinates.posX;
@@ -283,9 +266,9 @@
             EntityPlayerMP entityplayermp = (EntityPlayerMP)playerEntities.get(field_35482_p);
             sendPacketToAllPlayers(new Packet201PlayerInfo(entityplayermp.username, true, entityplayermp.ping));
         }
-        for (int i = 0; i < playerManagerObj.length; i++)
+        for (World world : DimensionManager.getWorlds())
         {
-            playerManagerObj[i].updatePlayerInstances();
+            ((WorldServer)world).playerManager.updatePlayerInstances();
         }
     }
 
