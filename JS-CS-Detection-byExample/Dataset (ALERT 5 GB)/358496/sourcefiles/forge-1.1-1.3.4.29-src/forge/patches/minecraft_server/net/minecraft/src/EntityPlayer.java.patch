--- ../src_base/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/EntityPlayer.java	0000-00-00 00:00:00.000000000 -0000
@@ -2,6 +2,10 @@
 
 import java.util.*;
 
+import net.minecraft.src.forge.ArmorProperties;
+import net.minecraft.src.forge.ForgeHooks;
+import net.minecraft.src.forge.ISpecialArmor;
+
 public abstract class EntityPlayer extends EntityLiving
 {
     public InventoryPlayer inventory;
@@ -124,6 +128,7 @@
             }
             else
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse,this,itemInUseCount);
                 if (itemInUseCount <= 25 && itemInUseCount % 4 == 0)
                 {
                     func_35208_b(itemstack, 5);
@@ -274,6 +279,10 @@
 
     protected void closeScreen()
     {
+        if (craftingInventory != null)
+        {
+            craftingInventory.onCraftGuiClosed(this);
+        }
         craftingInventory = inventorySlots;
     }
 
@@ -433,7 +442,16 @@
 
     public void dropCurrentItem()
     {
-        dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+    	ItemStack stack = inventory.getCurrentItem();
+    	if (stack == null)
+    	{
+    		return;
+    	}    	
+    	
+    	if (stack.getItem().onDroppedByPlayer(stack, this))
+    	{
+            dropPlayerItemWithRandomChoice(inventory.decrStackSize(inventory.currentItem, 1), false);
+    	}
     }
 
     public void dropPlayerItem(ItemStack itemstack)
@@ -480,6 +498,8 @@
         worldObj.spawnEntityInWorld(entityitem);
     }
 
+    /* FORGE: This isnt called anymore, There is a new metadata sensitive version */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block block)
     {
         float f = inventory.getStrVsBlock(block);
@@ -508,6 +528,45 @@
         return f1;
     }
 
+    /* FORGE: Extended to allow metadata.
+     */
+    public float getCurrentPlayerStrVsBlock(Block block, int md)
+    {
+        float f = 1.0F;
+        ItemStack ist = inventory.getCurrentItem();
+        if(ist != null)
+        {
+        	f = ist.getItem().getStrVsBlock(ist, block, md);
+        }
+        
+        int i = EnchantmentHelper.getEfficiencyModifier(inventory);
+        if (i > 0 && ForgeHooks.canHarvestBlock(block, this, md))
+        {
+        	f += i * i + 1;
+        }
+        
+        if(isPotionActive(Potion.digSpeed))
+        {
+            f *= 1.0F + (float)(getActivePotionEffect(Potion.digSpeed).getAmplifier() + 1) * 0.2F;
+        }
+        
+        if(isPotionActive(Potion.digSlowdown))
+        {
+            f *= 1.0F - (float)(getActivePotionEffect(Potion.digSlowdown).getAmplifier() + 1) * 0.2F;
+        }
+        
+        if(isInsideOfMaterial(Material.water) && !EnchantmentHelper.getAquaAffinityModifier(inventory))
+        {
+            f /= 5F;
+        }
+        
+        if(!onGround)
+        {
+            f /= 5F;
+        }
+        return f;
+    }
+
     public boolean canHarvestBlock(Block block)
     {
         return inventory.canHarvestBlock(block);
@@ -711,7 +770,11 @@
         {
             i = 1 + i >> 1;
         }
-        i = applyArmorCalculations(damagesource, i);
+        i = ArmorProperties.ApplyArmor(this, inventory.armorInventory, damagesource, i);
+        if (i <= 0)
+        {
+            return;
+        }
         i = applyPotionDamageCalculations(damagesource, i);
         addExhaustion(damagesource.getHungerDamage());
         health -= i;
@@ -758,7 +821,9 @@
 
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig=inventory.getCurrentItem();
         inventory.setInventorySlotContents(inventory.currentItem, null);
+        ForgeHooks.onDestroyCurrentItem(this, orig);
     }
 
     public double getYOffset()
@@ -777,6 +842,11 @@
 
     public void attackTargetEntityWithCurrentItem(Entity entity)
     {
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, entity))
+        {
+            return;
+        }
         int i = inventory.getDamageVsEntity(entity);
         if (isPotionActive(Potion.damageBoost))
         {
@@ -884,6 +954,11 @@
 
     public EnumStatus sleepInBedAt(int i, int j, int k)
     {
+        EnumStatus customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+        if (customSleep != null)
+        {
+            return customSleep;
+        }
         if (!worldObj.isRemote)
         {
             if (isPlayerSleeping() || !isEntityAlive())
@@ -1353,4 +1428,16 @@
         experience = entityplayer.experience;
         score = entityplayer.score;
     }
+    
+    /**
+     * Opens a Gui for the player. 
+     * 
+     * @param mod The mod associated with the gui
+     * @param ID The ID number for the Gui
+     * @param world The World
+     * @param X X Position
+     * @param Y Y Position
+     * @param Z Z Position
+     */
+    public void openGui(BaseMod mod, int ID, World world, int X, int Y, int Z){}
 }
