/* Merchant of Venice - technical analysis software for the stock market.
   Copyright (C) 2002 Andrew Leppard (aleppard@picknowl.com.au)

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
*/

package org.mov.prefs;

import org.mov.ui.*;
import org.mov.prefs.PreferencesManager;

import java.awt.event.*;
import java.util.prefs.Preferences;
import javax.swing.*;

/*
 * EquationPage.java
 *
 * Created on 24 January 2002, 23:43
 */

/**
 *
 * @author  Dan
 */
public class EquationPage extends javax.swing.JPanel 
    implements PreferencesPage, javax.swing.event.DocumentListener,
    javax.swing.event.ListSelectionListener
{

    /** The desktop that new windows are opened upon */
    private JDesktopPane desktop;
    
    /** The list model for the LHS function list */
    private SortedListModel functionListModel;
    
    /** Accessor the system preferences for functions */
    Preferences prefs;
    
    /** Currently selected function in the list view */
    private int current_selection;
    
    /** Creates new form EquationPage */
    public EquationPage(JDesktopPane desktop) {
        initComponents();
        functionList.setModel(functionListModel);
        current_selection = -1;
        this.desktop = desktop;
        prefs = PreferencesManager.getUserNode("/filters/functions");

        functionList.addListSelectionListener(this);
        initFunctionList();
        
        /* Set up TextListeners for the text fields */
        nameText.getDocument().addDocumentListener(this);
        detailText.getDocument().addDocumentListener(this);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane1 = new javax.swing.JSplitPane();
        listPanel = new javax.swing.JPanel();
        listScrollPane = new javax.swing.JScrollPane();
        functionList = new javax.swing.JList();
        listButtonPanel = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        entryPanel = new javax.swing.JPanel();
        namePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        detailPanel = new javax.swing.JPanel();
        detailLabel = new javax.swing.JLabel();
        detailText = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        commentLabel = new javax.swing.JLabel();
        
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));
        
        setBorder(new javax.swing.border.TitledBorder("Functions"));
        jSplitPane1.setContinuousLayout(true);
        jSplitPane1.setLastDividerLocation(-1);
        jSplitPane1.setOneTouchExpandable(true);
        listPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        functionListModel = new org.mov.ui.SortedListModel();
        functionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listScrollPane.setViewportView(functionList);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.weightx = 2.0;
        gridBagConstraints1.weighty = 2.0;
        listPanel.add(listScrollPane, gridBagConstraints1);
        
        listButtonPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints2;
        
        newButton.setText("New...");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        listButtonPanel.add(newButton, gridBagConstraints2);
        
        editButton.setText("Edit...");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        listButtonPanel.add(editButton, gridBagConstraints2);
        
        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        
        gridBagConstraints2 = new java.awt.GridBagConstraints();
        listButtonPanel.add(deleteButton, gridBagConstraints2);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        listPanel.add(listButtonPanel, gridBagConstraints1);
        
        jSplitPane1.setLeftComponent(listPanel);
        
        entryPanel.setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints3;
        
        entryPanel.setBorder(new javax.swing.border.EtchedBorder());
        nameLabel.setText("Function name");
        nameLabel.setMaximumSize(new java.awt.Dimension(89, 16));
        nameLabel.setMinimumSize(new java.awt.Dimension(89, 16));
        nameLabel.setPreferredSize(new java.awt.Dimension(89, 16));
        namePanel.add(nameLabel);
        
        nameText.setMinimumSize(new java.awt.Dimension(100, 20));
        nameText.setPreferredSize(new java.awt.Dimension(100, 20));
        nameText.setEnabled(false);
        namePanel.add(nameText);
        
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 1;
        entryPanel.add(namePanel, gridBagConstraints3);
        
        detailLabel.setText("Function details");
        detailPanel.add(detailLabel);
        
        detailText.setPreferredSize(new java.awt.Dimension(100, 20));
        detailText.setEnabled(false);
        detailPanel.add(detailText);
        
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 2;
        gridBagConstraints3.insets = new java.awt.Insets(5, 5, 5, 5);
        entryPanel.add(detailPanel, gridBagConstraints3);
        
        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        
        buttonPanel.add(saveButton);
        
        undoButton.setText("Undo");
        undoButton.setEnabled(false);
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });
        
        buttonPanel.add(undoButton);
        
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 3;
        entryPanel.add(buttonPanel, gridBagConstraints3);
        
        commentLabel.setText(" ");
        gridBagConstraints3 = new java.awt.GridBagConstraints();
        gridBagConstraints3.gridx = 0;
        gridBagConstraints3.gridy = 0;
        entryPanel.add(commentLabel, gridBagConstraints3);
        
        jSplitPane1.setRightComponent(entryPanel);
        
        add(jSplitPane1);
        
    }//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (current_selection != -1)
            prefs.remove(""+functionListModel.getElementAt(current_selection));
        prefs.put(nameText.getText(), detailText.getText());
	EquationComboBox.updateEquations();

        initFunctionList();

        current_selection = functionList.getNextMatch(nameText.getText(), 0, javax.swing.text.Position.Bias.Backward);
        functionList.setSelectedIndex(current_selection);
        nameText.setEnabled(false);
        detailText.setEnabled(false);
        undoButton.setEnabled(false);

    }//GEN-LAST:event_saveButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        if (functionList.getSelectedIndex() == -1) {
            nameText.setText("");
            detailText.setText("");
            saveButton.setEnabled(false);
            undoButton.setEnabled(false);
        } else {
            valueChanged(null);
        }
    }//GEN-LAST:event_undoButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        System.out.println("Delete");
        if (JOptionPane.showInternalConfirmDialog(desktop,
                                                  "Really delete function \""+nameText.getText()+"\"?",
                                                  "Please confirm", 
                                                  JOptionPane.YES_NO_OPTION, 
                                                  JOptionPane.INFORMATION_MESSAGE) == JOptionPane.YES_OPTION) 
        {
            prefs.remove(""+functionListModel.getElementAt(current_selection));
	    EquationComboBox.updateEquations();

            current_selection = -1;
            nameText.setText("");
            detailText.setText("");
            initFunctionList();
            valueChanged(null);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        nameText.setEnabled(true);
        detailText.setEnabled(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        if (!isOkToDiscardCurrentFunction())
            return;
        current_selection = -1;
//        functionList.clearSelection();
//functionList.setSelectedIndex(-1);
functionList.getSelectionModel().clearSelection();
        nameText.setText("");
        nameText.setEnabled(true);
        detailText.setText("");
        detailText.setEnabled(true);
        commentLabel.setText("Enter function, then click \"Add\"");
        saveButton.setEnabled(false);
        undoButton.setEnabled(false);
    }//GEN-LAST:event_newButtonActionPerformed

    /** Initializes the list of functions with all functions stored in user
     *  preferences */
    private void initFunctionList() {
        functionListModel.clear();
        
        /* Set up the function list */
        try {
            String[] keys = prefs.keys();
            for(int i = 0; i < keys.length; i++) {
                functionListModel.addElement(keys[i]);  
            }
        } catch (Exception e) {}
    }
    
    /** Determines whether or not it is ok to reset the text fields for either
     *  entry of a new function or display of another existing one
     *  @returns true if ok, false otherwise */
    private boolean isOkToDiscardCurrentFunction() {
        return true;
    }
    /**
     * Update the preferences file.
     */
    public void save() {
    }    

    /**
     * Return displayed component for this page.
     *
     * @return the component to display.
     */
    public JComponent getComponent() {
        return this;
    }    

    /**
     * Return the window title.
     *
     * @return	the window title.
     */
    public String getTitle() {
        return "Functions";
    }
    
    public void changedUpdate(javax.swing.event.DocumentEvent documentEvent) {
    }    

    public void removeUpdate(javax.swing.event.DocumentEvent documentEvent) {
        if ((nameText.getText().length() == 0) ||
            (detailText.getText().length() == 0)) {
            saveButton.setEnabled(false);
            if ((nameText.getText().length() == 0) &&
                (detailText.getText().length() == 0))
                undoButton.setEnabled(false);
        } else if (nameText.isEnabled()){
            undoButton.setEnabled(true);
            saveButton.setEnabled(true);
        }
    }
    
    public void insertUpdate(javax.swing.event.DocumentEvent documentEvent) {
        if ((nameText.getText().length() > 0) && 
            (detailText.getText().length() > 0) &&
            (nameText.isEnabled()))
            saveButton.setEnabled(true);
        if (nameText.isEnabled())
            undoButton.setEnabled(true);
    }
    
    public void valueChanged(javax.swing.event.ListSelectionEvent listSelectionEvent) {
        if (!isOkToDiscardCurrentFunction())
            return;
        this.current_selection = functionList.getSelectedIndex();
        if (current_selection <= functionList.getMaxSelectionIndex()) {
            nameText.setText(""+functionListModel.getElementAt(current_selection));
            detailText.setText(""+prefs.get((String)functionListModel.getElementAt(current_selection), ""));
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
        
        nameText.setEnabled(false);
        detailText.setEnabled(false);
        undoButton.setEnabled(false);
        saveButton.setEnabled(false);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel listPanel;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.JList functionList;
    private javax.swing.JPanel listButtonPanel;
    private javax.swing.JButton newButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel entryPanel;
    private javax.swing.JPanel namePanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JLabel detailLabel;
    private javax.swing.JTextField detailText;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JLabel commentLabel;
    // End of variables declaration//GEN-END:variables

}
