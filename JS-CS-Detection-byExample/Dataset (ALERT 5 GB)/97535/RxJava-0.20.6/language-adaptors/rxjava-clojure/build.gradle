apply plugin: 'clojure'
apply plugin: 'osgi'

dependencies {
    compile project(':rxjava-core')

    // clojure
    compile 'org.clojure:clojure:1.4.+'

    // this should be 'compile' for the 'examples' module
    testCompile 'clj-http:clj-http:0.6.4' // https://clojars.org/clj-http
}

tasks.compileExamplesClojure.classpath = files(tasks.compileClojure.destinationDir) + tasks.compileClojure.classpath + configurations.testCompile

/*
 * Clojure
 */
aotCompile = true
warnOnReflection = false

buildscript {
  repositories { maven { url "http://clojars.org/repo" } }
  dependencies { classpath "clojuresque:clojuresque:1.5.8" }
}

repositories {
  clojarsRepo()
}

/*
 * Add Counterclockwise and include 'testCompile' dependencies
 */
eclipse {
  project {
    natures "ccw.nature"
  }
}

tasks.clojureTest {
    classpath = classpath + configurations.testCompile
}

jar {
    manifest {
        name = 'rxjava-clojure'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/RxJava'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
        instruction 'Fragment-Host', 'com.netflix.rxjava.core'
    }
}


////////////////////////////////////////////////////////////////////////////////
// Define a task that runs an nrepl server. The port is given with the nreplPort
// property:
//    gradlew nrepl -PnreplPort=9999
// or put the property in ~/.gradle/gradle.properties

def nreplPortValue = (project.hasProperty('nreplPort') && !project.nreplPort.isEmpty()) ? project.nreplPort : '9999'
configurations { nrepl }
dependencies { nrepl 'org.clojure:tools.nrepl:0.2.2' }
task nrepl(type: JavaExec) {
    classpath configurations.nrepl,
              project.sourceSets.main.clojure.srcDirs,
              project.sourceSets.test.clojure.srcDirs,
              sourceSets.main.runtimeClasspath,
              sourceSets.test.runtimeClasspath

    main = "clojure.main"
    args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",
         '--eval', "(println \"Starting nrepl server on port $nreplPortValue\")",
         '--eval', "(def server (start-server :port $nreplPortValue))"
}
