--- ../src-base/minecraft/net/minecraft/src/TextureWatchFX.java
+++ ../src-work/minecraft/net/minecraft/src/TextureWatchFX.java
@@ -1,14 +1,20 @@
 package net.minecraft.src;
 
+import cpw.mods.fml.client.FMLTextureFX;
 import cpw.mods.fml.common.Side;
 import cpw.mods.fml.common.asm.SideOnly;
+
+import java.awt.Graphics2D;
 import java.awt.image.BufferedImage;
+import java.awt.image.ImageObserver;
 import java.io.IOException;
+import java.util.logging.Level;
+
 import javax.imageio.ImageIO;
 import net.minecraft.client.Minecraft;
 
 @SideOnly(Side.CLIENT)
-public class TextureWatchFX extends TextureFX
+public class TextureWatchFX extends FMLTextureFX
 {
     private Minecraft field_76860_g;
     private int[] field_76863_h = new int[256];
@@ -21,19 +27,37 @@
         super(Item.field_77752_aS.func_77617_a(0));
         this.field_76860_g = p_i3214_1_;
         this.field_76847_f = 1;
+        setup();
+    }
 
+    @Override
+    public void setup()
+    {
+        super.setup();
+        field_76863_h = new int[tileSizeSquare];
+        field_76864_i = new int[tileSizeSquare];
         try
         {
-            BufferedImage var2 = ImageIO.read(Minecraft.class.getResource("/gui/items.png"));
-            int var3 = this.field_76850_b % 16 * 16;
-            int var4 = this.field_76850_b / 16 * 16;
-            var2.getRGB(var3, var4, 16, 16, this.field_76863_h, 0, 16);
-            var2 = ImageIO.read(Minecraft.class.getResource("/misc/dial.png"));
-            var2.getRGB(0, 0, 16, 16, this.field_76864_i, 0, 16);
+            BufferedImage var2 = ImageIO.read(field_76860_g.field_71418_C.func_77292_e().func_77532_a("/gui/items.png"));
+            int var3 = this.field_76850_b % 16 * tileSizeBase;
+            int var4 = this.field_76850_b / 16 * tileSizeBase;
+            var2.getRGB(var3, var4, tileSizeBase, tileSizeBase, this.field_76863_h, 0, tileSizeBase);
+            var2 = ImageIO.read(field_76860_g.field_71418_C.func_77292_e().func_77532_a("/misc/dial.png"));
+            if (var2.getWidth() != tileSizeBase)
+            {
+                BufferedImage tmp = new BufferedImage(tileSizeBase, tileSizeBase, 6);
+                Graphics2D gfx = tmp.createGraphics();
+                gfx.drawImage(var2, 0, 0, tileSizeBase, tileSizeBase, 0, 0, var2.getWidth(), var2.getHeight(), (ImageObserver) null);
+                gfx.dispose();
+                var2 = tmp;
+            }
+
+            var2.getRGB(0, 0, tileSizeBase, tileSizeBase, this.field_76864_i, 0, tileSizeBase);
         }
-        catch (IOException var5)
+        catch (Exception var5)
         {
-            var5.printStackTrace();
+            log.log(Level.WARNING, String.format("A problem occurred with the watch texture: animation will be disabled"), var5);
+            setErrored(true);
         }
     }
 
@@ -44,7 +68,7 @@
         if (this.field_76860_g.field_71441_e != null && this.field_76860_g.field_71439_g != null)
         {
             float var3 = this.field_76860_g.field_71441_e.func_72826_c(1.0F);
-            var1 = (double)(-var3 * (float)Math.PI * 2.0F);
+            var1 = (double) (-var3 * (float) Math.PI * 2.0F);
 
             if (!this.field_76860_g.field_71441_e.field_73011_w.func_76569_d())
             {
@@ -80,7 +104,7 @@
         double var5 = Math.sin(this.field_76861_j);
         double var7 = Math.cos(this.field_76861_j);
 
-        for (int var9 = 0; var9 < 256; ++var9)
+        for (int var9 = 0; var9 < tileSizeSquare; ++var9)
         {
             int var10 = this.field_76863_h[var9] >> 24 & 255;
             int var11 = this.field_76863_h[var9] >> 16 & 255;
@@ -89,12 +113,12 @@
 
             if (var11 == var13 && var12 == 0 && var13 > 0)
             {
-                double var14 = -((double)(var9 % 16) / 15.0D - 0.5D);
-                double var16 = (double)(var9 / 16) / 15.0D - 0.5D;
+                double var14 = -((double) (var9 % tileSizeBase) / tileSizeMask - 0.5D);
+                double var16 = (double) (var9 / tileSizeBase) / tileSizeMask - 0.5D;
                 int var18 = var11;
-                int var19 = (int)((var14 * var7 + var16 * var5 + 0.5D) * 16.0D);
-                int var20 = (int)((var16 * var7 - var14 * var5 + 0.5D) * 16.0D);
-                int var21 = (var19 & 15) + (var20 & 15) * 16;
+                int var19 = (int) ((var14 * var7 + var16 * var5 + 0.5D) * tileSizeBase);
+                int var20 = (int) ((var16 * var7 - var14 * var5 + 0.5D) * tileSizeBase);
+                int var21 = (var19 & tileSizeMask) + (var20 & tileSizeMask) * tileSizeBase;
                 var10 = this.field_76864_i[var21] >> 24 & 255;
                 var11 = (this.field_76864_i[var21] >> 16 & 255) * var11 / 255;
                 var12 = (this.field_76864_i[var21] >> 8 & 255) * var18 / 255;
@@ -111,10 +135,10 @@
                 var13 = var24;
             }
 
-            this.field_76852_a[var9 * 4 + 0] = (byte)var11;
-            this.field_76852_a[var9 * 4 + 1] = (byte)var12;
-            this.field_76852_a[var9 * 4 + 2] = (byte)var13;
-            this.field_76852_a[var9 * 4 + 3] = (byte)var10;
+            this.field_76852_a[var9 * 4 + 0] = (byte) var11;
+            this.field_76852_a[var9 * 4 + 1] = (byte) var12;
+            this.field_76852_a[var9 * 4 + 2] = (byte) var13;
+            this.field_76852_a[var9 * 4 + 3] = (byte) var10;
         }
     }
 }
