--- ../src_base/minecraft_server/net/minecraft/src/FurnaceRecipes.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/FurnaceRecipes.java	0000-00-00 00:00:00.000000000 -0000
@@ -2,11 +2,13 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Arrays;
 
 public class FurnaceRecipes
 {
     private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
     private Map smeltingList;
+    private Map metaSmeltingList;
 
     public static final FurnaceRecipes smelting()
     {
@@ -16,6 +18,7 @@
     private FurnaceRecipes()
     {
         smeltingList = new HashMap();
+        metaSmeltingList = new HashMap();
         addSmelting(Block.oreIron.blockID, new ItemStack(Item.ingotIron));
         addSmelting(Block.oreGold.blockID, new ItemStack(Item.ingotGold));
         addSmelting(Block.oreDiamond.blockID, new ItemStack(Item.diamond));
@@ -38,11 +41,43 @@
         smeltingList.put(Integer.valueOf(i), itemstack);
     }
 
+    /**
+     * Add a metadata-sensitive furnace recipe
+     * @param itemID The Item ID
+     * @param metadata The Item Metadata
+     * @param itemstack The ItemStack for the result
+     */
+    public void addSmelting(int itemID, int metadata, ItemStack itemstack)
+    {
+        metaSmeltingList.put(Arrays.asList(itemID, metadata), itemstack);
+    }
+
+    /* FORGE: Not used anymore, now uses a metadata sensitive version */
+    @Deprecated
     public ItemStack getSmeltingResult(int i)
     {
         return (ItemStack)smeltingList.get(Integer.valueOf(i));
     }
 
+    /**
+     * Used to get the resulting ItemStack form a source ItemStack
+     * @param item The Source ItemStack
+     * @return The result ItemStack
+     */
+    public ItemStack getSmeltingResult(ItemStack item) 
+    {
+        if (item == null)
+        {
+            return null;
+        }
+        ItemStack ret = (ItemStack)metaSmeltingList.get(Arrays.asList(item.itemID, item.getItemDamage()));
+        if (ret != null) 
+        {
+            return ret;
+        }
+        return (ItemStack)smeltingList.get(Integer.valueOf(item.itemID));
+    }
+
     public Map getSmeltingList()
     {
         return smeltingList;
