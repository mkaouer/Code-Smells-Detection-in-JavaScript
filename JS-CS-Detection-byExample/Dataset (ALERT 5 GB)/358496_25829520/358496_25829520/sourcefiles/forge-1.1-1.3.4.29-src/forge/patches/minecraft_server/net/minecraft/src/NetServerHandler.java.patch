--- ../src_base/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/NetServerHandler.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,9 +1,11 @@
 package net.minecraft.src;
 
 import java.io.PrintStream;
+import java.io.UnsupportedEncodingException;
 import java.util.*;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.src.forge.MessageManager;
 
 public class NetServerHandler extends NetHandler
     implements ICommandListener
@@ -295,7 +297,9 @@
             double d1 = (playerEntity.posY - ((double)j + 0.5D)) + 1.5D;
             double d3 = playerEntity.posZ - ((double)k + 0.5D);
             double d5 = d * d + d1 * d1 + d3 * d3;
-            if (d5 > 36D)
+            double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 1;
+            dist *= dist;
+            if (d5 > dist)
             {
                 return;
             }
@@ -366,7 +370,9 @@
             {
                 j1 = i1;
             }
-            if (hasMoved && playerEntity.getDistanceSq((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D) < 64D && (j1 > 16 || flag))
+            double dist = playerEntity.itemInWorldManager.getBlockReachDistance() + 3;
+            dist *= dist;
+            if (hasMoved && playerEntity.getDistanceSq((double)i + 0.5D, (double)j + 0.5D, (double)k + 0.5D) < dist && (j1 > 16 || flag))
             {
                 playerEntity.itemInWorldManager.activeBlockOrUseItem(playerEntity, worldserver, itemstack, i, j, k, l);
             }
@@ -764,4 +770,49 @@
     {
         return true;
     }
+    
+    public EntityPlayerMP getPlayerEntity()
+    {
+        return playerEntity;
+    }
+    
+    @Override
+    public void handleCustomPayload(Packet250CustomPayload pkt)
+    {
+        MessageManager inst = MessageManager.getInstance();
+        if (pkt.channel.equals("REGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.addActiveChannel(netManager, channel);
+                }
+            } 
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.ThrowException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else if (pkt.channel.equals("UNREGISTER")) 
+        {
+            try 
+            {
+                String channels = new String(pkt.data, "UTF8");
+                for (String channel : channels.split("\0")) 
+                {
+                    inst.removeActiveChannel(netManager, channel);
+                }
+            }
+            catch (UnsupportedEncodingException ex) 
+            {
+                ModLoader.ThrowException("NetServerHandler.handleCustomPayload", ex);
+            }
+        } 
+        else 
+        {
+            inst.dispatchIncomingMessage(netManager, pkt.channel, pkt.data);
+        }
+    }
 }
