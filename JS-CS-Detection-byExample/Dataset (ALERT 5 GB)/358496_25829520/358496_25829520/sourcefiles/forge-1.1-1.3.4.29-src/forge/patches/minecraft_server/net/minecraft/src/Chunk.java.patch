--- ../src_base/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/Chunk.java	0000-00-00 00:00:00.000000000 -0000
@@ -316,7 +316,7 @@
             {
                 Block.blocksList[l1].onBlockRemoval(worldObj, i2, j, j2);
             }
-            else if ((Block.blocksList[l1] instanceof BlockContainer) && l1 != l)
+            else if (Block.blocksList[l1] != null && Block.blocksList[l1].hasTileEntity(getBlockMetadata(i, j, k)))
             {
                 worldObj.removeBlockTileEntity(i2, j, j2);
             }
@@ -346,12 +346,12 @@
             {
                 Block.blocksList[l].onBlockAdded(worldObj, i2, j, j2);
             }
-            if (Block.blocksList[l] instanceof BlockContainer)
+            if (Block.blocksList[l] != null && Block.blocksList[l].hasTileEntity(i1))
             {
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if (tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = Block.blocksList[l].getTileEntity(i1);
                     worldObj.setBlockTileEntity(i2, j, j2, tileentity);
                 }
                 if (tileentity != null)
@@ -360,14 +360,6 @@
                 }
             }
         }
-        else if (l1 > 0 && (Block.blocksList[l1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if (tileentity1 != null)
-            {
-                tileentity1.updateContainingBlockInfo();
-            }
-        }
         isModified = true;
         return true;
     }
@@ -391,7 +383,11 @@
         blocks[i << worldObj.xShift | k << worldObj.heightShift | j] = (byte)(byte0 & 0xff);
         if (k1 != 0)
         {
-            Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+            if (!worldObj.isRemote) 
+            {
+            	Block.blocksList[k1].onBlockRemoval(worldObj, l1, j, i2);
+            }
+            worldObj.removeBlockTileEntity(l1,  j, i2);
         }
         data.set(i, j, k, 0);
         if (Block.lightOpacity[byte0 & 0xff] != 0)
@@ -414,28 +410,22 @@
             {
                 Block.blocksList[l].onBlockAdded(worldObj, l1, j, i2);
             }
-            if (l > 0 && (Block.blocksList[l] instanceof BlockContainer))
+            int meta = getBlockMetadata(i, j, k);
+            if (l > 0 && Block.blocksList[l] != null && Block.blocksList[l].hasTileEntity(meta))
             {
                 TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
                 if (tileentity == null)
                 {
-                    tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                    tileentity = Block.blocksList[l].getTileEntity(meta);
                     worldObj.setBlockTileEntity(l1, j, i2, tileentity);
                 }
                 if (tileentity != null)
                 {
                     tileentity.updateContainingBlockInfo();
+                    tileentity.blockMetadata = meta;
                 }
             }
         }
-        else if (k1 > 0 && (Block.blocksList[k1] instanceof BlockContainer))
-        {
-            TileEntity tileentity1 = getChunkBlockTileEntity(i, j, k);
-            if (tileentity1 != null)
-            {
-                tileentity1.updateContainingBlockInfo();
-            }
-        }
         isModified = true;
         return true;
     }
@@ -455,7 +445,7 @@
         }
         data.set(i, j, k, l);
         int j1 = getBlockID(i, j, k);
-        if (j1 > 0 && (Block.blocksList[j1] instanceof BlockContainer))
+        if (j1 > 0 && Block.blocksList[j1] != null && Block.blocksList[j1].hasTileEntity(l))
         {
             TileEntity tileentity = getChunkBlockTileEntity(i, j, k);
             if (tileentity != null)
@@ -572,29 +562,27 @@
     {
         ChunkPosition chunkposition = new ChunkPosition(i, j, k);
         TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+        if(tileentity != null && tileentity.isInvalid())
+        {
+            chunkTileEntityMap.remove(chunkposition);
+            tileentity = null;
+        }
         if (tileentity == null)
         {
             int l = getBlockID(i, j, k);
-            if (!Block.isBlockContainer[l])
+            int meta = getBlockMetadata(i, j, k);
+            if(Block.blocksList[l] == null || !Block.blocksList[l].hasTileEntity(meta))
             {
                 return null;
             }
             if (tileentity == null)
             {
-                tileentity = ((BlockContainer)Block.blocksList[l]).getBlockEntity();
+                tileentity = Block.blocksList[l].getTileEntity(meta);
                 worldObj.setBlockTileEntity(xPosition * 16 + i, j, zPosition * 16 + k, tileentity);
             }
             tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
         }
-        if (tileentity != null && tileentity.isInvalid())
-        {
-            chunkTileEntityMap.remove(chunkposition);
-            return null;
-        }
-        else
-        {
-            return tileentity;
-        }
+        return tileentity;
     }
 
     public void addTileEntity(TileEntity tileentity)
@@ -605,7 +593,7 @@
         setChunkBlockTileEntity(i, j, k, tileentity);
         if (isChunkLoaded)
         {
-            worldObj.loadedTileEntityList.add(tileentity);
+            worldObj.addTileEntity(tileentity);
         }
     }
 
@@ -616,12 +604,18 @@
         tileentity.xCoord = xPosition * 16 + i;
         tileentity.yCoord = j;
         tileentity.zCoord = zPosition * 16 + k;
-        if (getBlockID(i, j, k) == 0 || !(Block.blocksList[getBlockID(i, j, k)] instanceof BlockContainer))
+        int id = getBlockID(i, j, k);
+        if(id == 0 || Block.blocksList[id] == null || !Block.blocksList[id].hasTileEntity(getBlockMetadata(i, j, k)))
         {
             return;
         }
         else
         {
+            TileEntity old = (TileEntity)chunkTileEntityMap.get(chunkposition);
+            if (old != null)
+            {
+                old.invalidate();
+            }
             tileentity.validate();
             chunkTileEntityMap.put(chunkposition, tileentity);
             return;
@@ -903,4 +897,18 @@
     {
         return new ChunkCoordIntPair(xPosition, zPosition);
     }
+    
+    /* FORGE: Used to remove only invalid TileEntities */
+    public void cleanChunkBlockTileEntity(int i, int j, int k) 
+    {
+    	ChunkPosition chunkposition = new ChunkPosition(i, j, k);
+    	if (isChunkLoaded)
+    	{
+    		TileEntity tileentity = (TileEntity)chunkTileEntityMap.get(chunkposition);
+    		if (tileentity != null && tileentity.isInvalid())
+    		{
+    			chunkTileEntityMap.remove(chunkposition);
+    		}
+    	}
+    }
 }
