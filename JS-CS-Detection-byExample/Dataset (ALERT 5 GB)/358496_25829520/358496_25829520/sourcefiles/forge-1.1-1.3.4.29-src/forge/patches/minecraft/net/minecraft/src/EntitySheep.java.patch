--- ../src_base/minecraft/net/minecraft/src/EntitySheep.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/EntitySheep.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 
-public class EntitySheep extends EntityAnimal
+import net.minecraft.src.forge.IShearable;
+
+public class EntitySheep extends EntityAnimal implements IShearable
 {
     public static final float fleeceColorTable[][] =
     {
@@ -194,23 +197,6 @@
 
     public boolean interact(EntityPlayer entityplayer)
     {
-        ItemStack itemstack = entityplayer.inventory.getCurrentItem();
-        if (itemstack != null && itemstack.itemID == Item.shears.shiftedIndex && !getSheared() && !isChild())
-        {
-            if (!worldObj.isRemote)
-            {
-                setSheared(true);
-                int i = 1 + rand.nextInt(3);
-                for (int j = 0; j < i; j++)
-                {
-                    EntityItem entityitem = entityDropItem(new ItemStack(Block.cloth.blockID, 1, getFleeceColor()), 1.0F);
-                    entityitem.motionY += rand.nextFloat() * 0.05F;
-                    entityitem.motionX += (rand.nextFloat() - rand.nextFloat()) * 0.1F;
-                    entityitem.motionZ += (rand.nextFloat() - rand.nextFloat()) * 0.1F;
-                }
-            }
-            itemstack.damageItem(1, entityplayer);
-        }
         return super.interact(entityplayer);
     }
 
@@ -308,4 +294,23 @@
         }
         return entitysheep1;
     }
+
+    @Override
+    public boolean isShearable(ItemStack item, World world, int X, int Y, int Z) 
+    {
+        return !getSheared() && !isChild();
+    }
+
+    @Override
+    public ArrayList<ItemStack> onSheared(ItemStack item, World world, int X, int Y, int Z, int fortune) 
+    {
+        ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
+        setSheared(true);
+        int i = 1 + rand.nextInt(3);
+        for (int j = 0; j < i; j++)
+        {
+            ret.add(new ItemStack(Block.cloth.blockID, 1, getFleeceColor()));
+        }
+        return ret;
+    }
 }
