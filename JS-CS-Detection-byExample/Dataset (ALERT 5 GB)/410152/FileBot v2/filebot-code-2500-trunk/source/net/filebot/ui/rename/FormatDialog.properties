help.url = http://www.filebot.net/naming.html

episode.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name, <b>s</b> \u2026 season, <b>e</b> \u2026 episode, <b>t</b> \u2026 title</html>
movie.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name, <b>y</b> \u2026 year</html>
music.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 album artist, <b>t</b> \u2026 title, <b>album</b> \u2026 album, <b>pi</b> \u2026 track</html>
file.syntax: <html><b>{</b> <b>}</b> \u2026 expression, <b>n</b> \u2026 name</html>


episode.sample: {"@type":"net.filebot.web.Episode","seriesName":"Firefly","seriesStartDate":{"year":2002,"month":9,"day":20},"season":1,"episode":1,"title":"Serenity","absolute":1,"special":null,"airdate":{"year":2002,"month":12,"day":20},"series":{"@type":"net.filebot.web.TheTVDBSearchResult","seriesId":78874,"name":"Firefly","aliasNames":[]}}
movie.sample: {"@type":"net.filebot.web.MoviePart","partIndex":1,"partCount":2,"year":2009,"imdbId":-1,"tmdbId":19995,"name":"Avatar","aliasNames":[]}
music.sample: {"@type":"net.filebot.web.AudioTrack","artist":"Leona Lewis","title":"I See You","album":"Avatar","albumArtist":"James Horner","trackTitle":null,"albumReleaseDate":{"year":2009,"month":12,"day":11},"mediumIndex":1,"mediumCount":1,"trackIndex":14,"trackCount":14}

# basic 1.01
episode.example[0]: {n} - {s}.{e} - {t}
# S01E01
episode.example[1]: {n} - {sxe} - {t}
# airdate
episode.example[2]: {n} [{airdate}] {t}
# uglyfy name
episode.example[3]: {n.space('.').lower()}.{s}{e.pad(2)}
# organize folder structure
episode.example[4]: {n}/{'Season '+s.pad(2)}/{s00e00} - {t}

# simple name/year
movie.example[0]: {n} ({y}){' CD'+pi}{'.'+lang}
# media info name
movie.example[1]: {n} ({y}, {director}) {vf} {af}
# name/year and ratings
movie.example[2]: {n} {[y, certification, rating]}
# normalized scene name
movie.example[3]: {n.space('.')}.{y}{'.'+source}.{vc}
# organize folder structure
movie.example[4]: {n} ({y})/{n} ({y}){' CD'+pi}

# simple artist - title
music.example[0]: {artist} - {t}
# simple artist - album - title
music.example[1]: {[y]} {artist} - {t}
# artist - title [crc32]
music.example[2]: {n} - {t} {[audio.SamplingRateString]}
# artist - title [2ch, 128000]
music.example[3]: {pi.pad(2)} {n} - {t} {[af, audio.BitRate]}
# organize folder structure
music.example[4]: {n}/{album+'/'}{pi.pad(2)+'. '} {t}

# simple filename without extension
file.example[0]: {n}
# simple filename regex-replace
file.example[1]: {n.replaceAll(/\\d+/, '')}
# simple filename regex-replace
file.example[2]: {n.replaceAll(/\\p{Punct}+/, ' ')}
# simple filter
file.example[3]: {n.after('-')}
