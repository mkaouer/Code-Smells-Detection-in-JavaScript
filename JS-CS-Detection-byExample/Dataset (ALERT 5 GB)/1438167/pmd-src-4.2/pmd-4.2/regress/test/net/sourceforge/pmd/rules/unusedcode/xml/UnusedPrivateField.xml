<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
simple unused private field
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
private String foo;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private field referenced in another field's initializer
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private String foo;
 private String bar = foo;
 void buz() {
  bar = bar + 1;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private field with field of same name in anonymous inner class
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 private String foo;
 void baz() {
  Runnable r = new Runnable() {
   public void run() {
    String foo = "buz";
   }
  };   
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
field is used semantically before it's declared syntactically
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  foo[0] = foo[0] + 1;
 }
 private int[] foo;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private field referenced via 'this' modifier
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private String foo;
 void bar() {   
  bar = this.foo;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private referenced by anonymous inner class
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private static final String FOO = "foo";
  public Runnable bar() {      
   return new Runnable() {
    public void run() {
     FOO.toString();
    }
   };
  }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
interface sanity test
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public interface Foo {
 public static final String FOO = "FOO"; 
 public boolean equals(Object another);
 public int hashCode();
 public String toString();
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
unused private field in static inner class
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 public static class Services {
  private String x;    
 }
}

     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private field referenced in nonstatic inner class
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private int x;
 private class Bar {
  void baz() {
   x = x + 2;
  }
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
unused private static field
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 private static String foo;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private static final referenced with qualifier
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private static final int BAR = 2;
 int x = Foo.BAR;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
unused private field after class decl
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 public class Foo {}
 private int x;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
two unused private fields in separate inner classes
     ]]></description>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
public class Foo {
 public class Foo {private int x;}
 public class Bar {private int x;}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
method param shadows unused private field
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 private int value;
 int doSomething(int value) { 
  return value + 1; 
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
private field referenced via 'this' not shadowed by param of same name
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private int x; 
 public Foo(int x) {
  this.x= this.x + 1;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
don't catch public fields
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 public static final int FOO = 1;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
instantiate self and reference private field on other object
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private int x;
 void foo() {
  Foo foo = new Foo();  
  foo.x = foo.x + 2;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
don't count Serialization fields as being unused
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private static final ObjectStreamField[] serialPersistentFields = {new ObjectStreamField("foo", String.class)};
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
an assignment does not a usage make
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 private int x;
 void bar() {
  x = 4;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
assignment to field member is a usage
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private Foo x = new Foo();
 void bar() {
  x.y = 42;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
assignment to field member using this modifier is a usage
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 private Foo x = new Foo();
 void bar() {
  this.x.y = 42;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
this.foo++ shouldn't throw an NPE, but isn't a usage
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 private int x;
 void bar() {
  this.x++;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
super.foo++ shouldn't throw an NPE
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  super.x++;
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
SuppressWarnings("unused") unused private field
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
@SuppressWarnings("unused")
private String foo;
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
631681, private field is accessed by outer class
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class XPathFunctionContext {

    private class Singleton {
        private String foo = "";
    }

    public String getFoo() {
        return (new Singleton()).foo;
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
631681, private field in singleton is accessed by outer class
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class XPathFunctionContext {

    private static class Singleton {
        private static XPathFunctionContext instance = new XPathFunctionContext();
    }

    public static XPathFunctionContext getInstance() {
        return Singleton.instance;
    }
}
     ]]></code>
    </test-code>
</test-data>
