<?xml version="1.0"?>
<document>
<properties>
    <author email="tomcopeland@users.sourceforge.net">Tom Copeland</author>
    <title>How to write a PMD rule</title>
</properties>
<body>
    <section name="How to write a PMD rule">
<p>
Writing PMD rules is cool because you don't have to wait for us to get around to implementing feature requests.
</p>
    <subsection name="Get a development environment set up first">
    <p><a href="compiling.html">Here's some initial information on compiling PMD</a>
    </p>
    </subsection>

        <subsection name="Java or XPath?">
            <p>There are two way to write rules:</p>
            <ul>
                <li>Write a rule using Java</li>
                <li>Write an XPath expression</li>
            </ul>
            <p>We'll cover the Java way first and the XPath way second.  Most of this documentation is applicable
 to both methods, too, so read on.</p>
        </subsection>
    <subsection name="Figure out what you want to look for">
    <p>
    Lets's figure out what problem we want to spot.   We can use "While loops must use braces" as an example.
    In the source code below, it's easy to get lost visually - it's kind of hard to tell what the curly braces belong to.
    </p>
    <source>
<![CDATA[class Example {
 void bar() {
  while (baz)
   buz.doSomething();
 }
}]]></source>
    <p>
    So we know what an example in source code looks like, which is half the battle.
    </p>
    </subsection>

    <subsection name="Write a test-data example and look at the AST">
    <p>
    PMD doesn't use the source code directly; it uses a <code>JavaCC</code>
        generated parser to parse the source code and
    produce an AST (Abstract Syntax Tree).  The AST for the code above looks like this:
    </p>
    <source>
<![CDATA[CompilationUnit
 TypeDeclaration
  ClassDeclaration:(package private)
   UnmodifiedClassDeclaration(Example)
    ClassBody
     ClassBodyDeclaration
      MethodDeclaration:(package private)
       ResultType
       MethodDeclarator(bar)
        FormalParameters
       Block
        BlockStatement
         Statement
          WhileStatement
           Expression
            PrimaryExpression
             PrimaryPrefix
              Name:baz
           Statement
            StatementExpression:null
             PrimaryExpression
              PrimaryPrefix
               Name:buz.doSomething
              PrimarySuffix
               Arguments]]></source>
    <p>
    You can generate this yourself by:
    <ul>
    <li>Run the batch file bin/designer.bat</li>
    <li>Paste the code into the left text area and click the "Go" button</li>
    <li>Note that there's another panel and a textfield to test out XPath expressions; more on that later.</li>
        <li>Here's a screenshot:<br/><img src="images/designer_screenshot.png"/></li>
    </ul>
    </p>
    <p>
    So you can see in the example above that the AST for a <code>WhileStatement</code>
        looks kind of like this (excluding that expression gibberish for clarity):
    </p>
    <source>
<![CDATA[WhileStatement
 Expression
 Statement
  StatementExpression]]>
    </source>
    <p>
    If you were to add curly braces around the call to <code>buz.doSomething()</code>and click &quot;Go&quot; again, you'd see that the
        AST would change a bit.  It'd look like this:
    </p>
    <source>
<![CDATA[WhileStatement
 Expression
 Statement
  Block
   BlockStatement
    Statement
     StatementExpression]]>
    </source>
    <p>
    Ah ha!  We see that the curly braces add a couple more AST nodes - a <code>Block</code>
        and a <code>BlockStatement</code>.  So all we have
    to do is write a rule to detect a <code>WhileStatement</code> that
        has a <code>Statement</code> that's not followed by a <code>Block</code>, and we've got a rule violation.
    </p>
        <p>
           By the way, all this structural information - i.e., the fact that a Statement may be
            followed a Block - is concisely defined in the
            <a href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/pmd/pmd/etc/grammar/Java1.4-c.jjt?rev=1.3&amp;content-type=text/vnd.viewcvs-markup">EBNF grammar</a>.
            So, for example, the Statement definition looks like this:
<source>
<![CDATA[void Statement() :
{}
{
  LOOKAHEAD( { isNextTokenAnAssert() } ) AssertStatement()
| LOOKAHEAD(2) LabeledStatement()
| Block()
| EmptyStatement()
| StatementExpression() ";"
| SwitchStatement()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
| SynchronizedStatement()
| TryStatement()
}]]>
</source>
            showing that a Statement may be followed by all sorts of stuff.
        </p>
    </subsection>

    <subsection name="Write a rule class">
    <p>
    Create a new Java class that extends <code>net.sourceforge.pmd.AbstractRule</code>:
    </p>
    <source>
<![CDATA[import net.sourceforge.pmd.*;
public class WhileLoopsMustUseBracesRule extends AbstractRule {
}]]>
    </source>
    <p>
    That was easy.  PMD works by creating the AST and then traverses it recursively so a rule can get a callback
    for any type it's interested in.  So let's make sure our rule gets called whenever
        the AST traversal finds a <code>WhileStatement</code>:
    </p>
    <source>
<![CDATA[import net.sourceforge.pmd.*;
import net.sourceforge.pmd.ast.*;
public class WhileLoopsMustUseBracesRule extends AbstractRule {
    public Object visit(ASTWhileStatement node, Object data) {
        System.out.println("hello world");
        return data;
    }
}]]>
    </source>
    <p>
    We stuck a <code>println()</code> in there for now so we can see when our rule gets hit.
    </p>

    </subsection>

    <subsection name="Put the WhileLoopsMustUseBracesRule rule in a ruleset file">
    <p>
    Now our rule is written - at least, the shell of it is - and now we need to tell PMD about it.  We need
    to add it to a ruleset XML file.  Look at <code>rulesets/basic.xml</code>; it's got lots of rule definitions in it.
    Copy and paste one of these rules into a new ruleset - call it <code>mycustomrules.xml</code> or something.
        Then fill in the elements and attributes:
    </p>
    <ul>
    <li>name - WhileLoopsMustUseBracesRule</li>
    <li>message - Use braces for while loops</li>
    <li>class - Wherever you put the rule.  Note this doesn't have to be in <code>net.sourceforge.pmd</code>;
        it can be in <code>com.yourcompany.util.pmd</code> or whereever you want</li>
    <li>description - Use braces for while loops</li>
    <li>example - A little code snippet in CDATA tags that shows a rule violation</li>
    </ul>
        <p>The whole ruleset file should look something like this:</p>
        <source>

        &lt;?xml version="1.0"?>
        &lt;ruleset name="My custom rules"
            xmlns="http://pmd.sf.net/ruleset/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
            xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"&gt;
            &lt;rule name="WhileLoopsMustUseBracesRule"
                  message="Avoid using 'while' statements without curly braces"
                  class="WhileLoopsMustUseBracesRule">
              &lt;description>
              Avoid using 'while' statements without using curly braces
              &lt;/description>
                &lt;priority>3&lt;/priority>

              &lt;example>
        &lt;![CDATA[
            public void doSomething() {
              while (true)
                  x++;
            }
        ]]&gt;
              &lt;/example>
            &lt;/rule>
        &lt;/ruleset>

        </source>
    </subsection>

    <subsection name="Run PMD using your new ruleset">
    <p>OK, let's run the new rule so we can see something work.  Like this:</p>
        <source>
            pmd.bat c:\path\to\my\src xml c:\path\to\mycustomrules.xml
        </source>
    <p>This time your "hello world" will show up right after the
    AST gets printed out.  If it doesn't, post a message to
    <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a> so we can improve this document :-)
    </p>
    </subsection>

    <subsection name="Write code to add rule violations where appropriate">
    <p>
    Now that we've identified our problem, recognized the AST pattern that
        illustrates the problem, written a new rule, and plugged
    it into a ruleset, we need to actually make our rule find the problem, create a <code>RuleViolation</code>,
    and put it in the <code>Report</code>, which is attached to the <code>RuleContext</code>.  Like this:
    </p>
    <source>
<![CDATA[public class WhileLoopsMustUseBracesRule extends AbstractRule {
    public Object visit(ASTWhileStatement node, Object data) {
        SimpleNode firstStmt = (SimpleNode)node.jjtGetChild(1);
        if (!hasBlockAsFirstChild(firstStmt)) {
            addViolation(data, node);
        }
        return super.visit(node,data);
    }
    private boolean hasBlockAsFirstChild(SimpleNode node) {
        return (node.jjtGetNumChildren() != 0 && (node.jjtGetChild(0) instanceof ASTBlock));
    }
}]]>
    </source>
    </subsection>
    <p>
    TODO - if you don't understand the code for the rule, post a message
    to <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a> so we can improve this document :-)
    </p>

    <subsection name="Writing a rule as an XPath expression">
        <p>Daniel Sheppard integrated an XPath engine into PMD, so now you can write rules as
        XPath expressions.  For example, the XPath expression for our WhileLoopsMustUseBracesRule looks like this:</p>
        <source>
            //WhileStatement[not(Statement/Block)]
        </source>
        <p>Concise, eh?  Here's an <a href="http://www.onjava.com/pub/a/onjava/2003/04/09/pmd_rules.html">article</a> with a lot more detail.</p>
        <p>Note that for XPath rules you'll need to set the
            <code>class</code> attribute in the rule definition to <code>net.sourceforge.pmd.rules.XPathRule.</code>  Like this:
            <source>
                <![CDATA[<rule name="EmptyCatchBlock"
                      message="Avoid empty catch blocks"
                      class="net.sourceforge.pmd.rules.XPathRule">
                  <description>
                  etc., etc.]]>
            </source>

            </p>
        <p>Note that access modifiers are held as attributes, so, for example,
                <source>//FieldDeclaration[@Private='true']</source>
                finds all private fields.  You can see the code
            that determines all the attributes <a href="http://pmd.sourceforge.net/xref/net/sourceforge/pmd/jaxen/AttributeAxisIterator.html">here</a></p>
        <p>Thanks to Miguel Griffa for writing a longer  <a href="xpathruletutorial.html">XPath tutorial</a>.</p>
    </subsection>

	<subsection name="I want to implement a rule that analyse more than the class !">
		<p>
			An obvious limitation of the previous mechanism is the "class-centric" focus of the rule. How can you implement a rule that checks stuff accross the
			all source code ? Let's take a dummy example. Let's say you want to implement a rule that count how many Expression Node you have in your source code
			(told you, it was a dummy example :) ).</p>
		<p>
		You realize quite simply. You just have to add static field to the RulesContext, as an attribute, and uses Rule.start() and Rule.end() hook
		to initialized and finalize your rule's implementation :
		</p>
		<source>
			<![CDATA[
			package net.sourceforge.pmd.rules;

			import java.util.concurrent.atomic.AtomicLong;

			import net.sourceforge.pmd.AbstractJavaRule;
			import net.sourceforge.pmd.RuleContext;
			import net.sourceforge.pmd.ast.ASTExpression;

			public class CountRule extends AbstractJavaRule {

			       private static final String COUNT = "count";

			       @Override
			       public void start(RuleContext ctx) {
			               ctx.setAttribute(COUNT, new AtomicLong());
			               super.start(ctx);
			       }

			       @Override
			       public Object visit(ASTExpression node, Object data) {
			               // How many Expression nodes are there in all files parsed!  I must know!
			               RuleContext ctx = (RuleContext)data;
			               AtomicLong total = (AtomicLong)ctx.getAttribute(COUNT);
			               total.incrementAndGet();
			               return super.visit(node, data);
			       }

			       @Override
			       public void end(RuleContext ctx) {
			               AtomicLong total = (AtomicLong)ctx.getAttribute(COUNT);
			               addViolation(ctx, null, new Object[] { total });
			               ctx.removeAttribute(COUNT);
			               super.start(ctx);
			       }
			}
			]]>
		</source>
		<p>
			As you can see in this example, the method start will be call the first time the rule is going to be used, so you can initialize properly
			your rule here. Once the rule will have finished to parses the source code, the method end() will be invoke you can assert there if, or not,
			your rule has been violated.
		</p>
		<p>
			<i>
				Note that the example log a violation <strong>without</strong> a proper classname. This is not really a good idea. Indeed, a lot of aggregating
				tools that PMD (Such as <a href="http://xradar.sourceforge.net">XRadar</a>, or <a href="http://sonar.hortis.ch/">Sonar</a>) probably uses this kind
				of meta data on their aggregation processes. So, when implements such a rule, always try to find a way to add
				classname to the violation report.
			</i>
		</p>
	</subsection>
<!--
TODO: TR documentation
	<subsection name="I need somekind of Type Resolution for my rule !">
		<p>
		</p>
	</subsection>
-->

    <subsection name="Bundle it up">
        <p>To use your rules as part of a nightly build or whatever, it's helpful to bundle up both
        the rule and the ruleset.xml file in a jar file.  Then you can put that jar file on the CLASSPATH of
        your build.  Setting up a script or an Ant task to do this can save you some tedious typing.</p>
    </subsection>

    <subsection name="Repeat as necessary">
    <p>
    I've found that my rules usually don't work the first time, and so I have to go back and tweak them a
    couple times.  That's OK, if we were perfect programmers PMD would be useless anyhow :-).
    </p>
    <p>As an acceptance test of sorts, I usually run a rule on the JDK 1.4 source code and make sure that a random
    sampling of the problems found are in fact legitimate rule violations.
    This also ensures that the rule doesn't get confused by nested
    inner classes or any of the other oddities that appear at various points in the JDK source.
    </p>
    <p>
    You're rolling now.  If you think a rule would benefit the Java development community as a whole,
    post a message to <a href="http://sourceforge.net/forum/forum.php?forum_id=188192">the forum</a>
        so we can get the rule
    moved into one of the core rulesets.</p>
    <p>Or, if you can improve one of the existing rules, that'd be great too!  Thanks!
    </p>
      <p>Finally, for many more details on writing rules, pick up <a href="http://pmdapplied.com/">PMD Applied</a>!</p>
    </subsection>
    </section>
</body>
</document>
