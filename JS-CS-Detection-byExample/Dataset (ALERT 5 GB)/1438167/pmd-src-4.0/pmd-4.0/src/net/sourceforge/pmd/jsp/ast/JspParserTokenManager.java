/* Generated By:JJTree&JavaCC: Do not edit this line. JspParserTokenManager.java */
/** 
 * JSP Parser for PMD.
 * @author Pieter � Application Engineers NV/SA � http://www.ae.be
 */

package net.sourceforge.pmd.jsp.ast;

public class JspParserTokenManager implements JspParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_9(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_9(0x40000000000L);
      default :
         return jjMoveNfa_9(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_9(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_9(0, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffdfffffffffL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffdfffffffffL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_4(0x80000000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa2_4(active0, 0x80000000000000L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         break;
      default :
         return 3;
   }
   return 3;
}
private final int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(1, 0);
}
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(0);
                  }
                  else if ((0x400001000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 48;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 36)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(0, 0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 45)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
               case 4:
                  if (curChar == 62 && kind > 75)
                     kind = 75;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 69);
      default :
         return jjMoveNfa_2(9, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0xffffff67ffffffffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     jjCheckNAddStates(2, 4);
                  }
                  else if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 36);
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 8);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 8);
                  break;
               case 11:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 19:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 20:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 22:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 24:
                  if (curChar == 62 && kind > 68)
                     kind = 68;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xffffff67ffffffffL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               case 29:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0xffffff7fffffffffL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (curChar == 36)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 36);
                  break;
               case 36:
                  if (curChar == 39 && kind > 71)
                     kind = 71;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  if (curChar == 92)
                     jjAddStates(16, 17);
                  break;
               case 0:
                  if (curChar == 123)
                     jjCheckNAddStates(5, 8);
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 3:
                  jjAddStates(18, 19);
                  break;
               case 6:
                  jjAddStates(20, 21);
                  break;
               case 8:
                  if (curChar == 125 && kind > 66)
                     kind = 66;
                  break;
               case 10:
                  if (curChar == 123)
                     jjCheckNAddStates(9, 12);
                  break;
               case 11:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 13:
                  jjAddStates(22, 23);
                  break;
               case 16:
                  jjAddStates(24, 25);
                  break;
               case 18:
                  if (curChar == 125 && kind > 67)
                     kind = 67;
                  break;
               case 21:
               case 23:
                  jjCheckNAddStates(13, 15);
                  break;
               case 28:
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               case 30:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               case 31:
                  if (curChar == 92)
                     jjAddStates(16, 17);
                  break;
               case 32:
                  if (curChar != 123)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 28:
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjCheckNAddStates(2, 4);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 8);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 12);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 21:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x400000000000L) != 0L)
            return 4;
         return -1;
      case 2:
         if ((active0 & 0x400000000000L) != 0L)
            return 6;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_7(0x400000000000L);
      default :
         return jjMoveNfa_7(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_7(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, active0);
}
private final int jjMoveStringLiteralDfa2_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa3_7(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_7(1, active0);
}
private final int jjMoveStringLiteralDfa3_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(3, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_7(2, active0);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffdfffffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(26, 28);
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 3:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(26, 28);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(26, 28);
                  }
                  else if (curChar == 45)
                     jjAddStates(29, 30);
                  if (curChar == 45)
                     jjCheckNAdd(0);
                  break;
               case 0:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 1:
                  if (curChar == 45)
                     jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 45)
                     jjAddStates(29, 30);
                  break;
               case 5:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 7:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 6:
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 3:
               case 0:
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 8:
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 3:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               case 8:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(26, 28);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 65);
      case 39:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private final int jjMoveNfa_13(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 21;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0)
{
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_16(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_16(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_16()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_16(0x1ff800000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_16(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_16(active0, 0xd000000L);
      case 37:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_16(active0, 0x170000000L);
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_16(0, active0);
}
private final int jjMoveStringLiteralDfa2_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         break;
      case 45:
         return jjMoveStringLiteralDfa3_16(active0, 0x11000000L);
      case 61:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      case 64:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      case 91:
         return jjMoveStringLiteralDfa3_16(active0, 0x8000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_16(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(1, active0);
}
private final int jjMoveStringLiteralDfa3_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_16(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_16(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(2, active0);
}
private final int jjMoveStringLiteralDfa4_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_16(active0, 0x4000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_16(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_16(3, active0);
}
private final int jjMoveStringLiteralDfa5_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_16(active0, 0x8000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_16(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(4, active0);
}
private final int jjMoveStringLiteralDfa6_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_16(active0, 0x8000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_16(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(5, active0);
}
private final int jjMoveStringLiteralDfa7_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_16(active0, 0x8000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_16(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_16(6, active0);
}
private final int jjMoveStringLiteralDfa8_16(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_16(7, active0);
}
private final int jjMoveNfa_16(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 20;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_12(0x1ff800000L);
      default :
         return jjMoveNfa_12(10, 0);
   }
}
private final int jjMoveStringLiteralDfa1_12(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_12(active0, 0xd000000L);
      case 37:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_12(active0, 0x170000000L);
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 63:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_12(0, active0);
}
private final int jjMoveStringLiteralDfa2_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         break;
      case 45:
         return jjMoveStringLiteralDfa3_12(active0, 0x11000000L);
      case 61:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         break;
      case 64:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 32);
         break;
      case 91:
         return jjMoveStringLiteralDfa3_12(active0, 0x8000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_12(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_12(1, active0);
}
private final int jjMoveStringLiteralDfa3_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(3, 24);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_12(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_12(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_12(2, active0);
}
private final int jjMoveStringLiteralDfa4_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_12(active0, 0x4000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_12(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_12(3, active0);
}
private final int jjMoveStringLiteralDfa5_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_12(active0, 0x8000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_12(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_12(4, active0);
}
private final int jjMoveStringLiteralDfa6_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_12(active0, 0x8000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_12(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_12(5, active0);
}
private final int jjMoveStringLiteralDfa7_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_12(active0, 0x8000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_12(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_12(6, active0);
}
private final int jjMoveStringLiteralDfa8_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(8, 27);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_12(7, active0);
}
private final int jjMoveNfa_12(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 18;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0xefffffefffffffffL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAddStates(31, 33);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 3:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(34, 37);
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddStates(34, 37);
                  break;
               case 11:
                  if ((0xefffffefffffffffL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               case 12:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               case 16:
                  if (curChar == 35)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if (curChar == 36)
                     jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  if (curChar == 92)
                     jjAddStates(24, 25);
                  break;
               case 1:
                  if (curChar == 123)
                     jjCheckNAddStates(34, 37);
                  break;
               case 2:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(34, 37);
                  break;
               case 4:
                  jjAddStates(38, 39);
                  break;
               case 7:
                  jjAddStates(40, 41);
                  break;
               case 9:
                  if (curChar == 125 && kind > 33)
                     kind = 33;
                  break;
               case 11:
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               case 13:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(24, 25);
                  break;
               case 15:
                  if (curChar != 123)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 10:
               case 11:
               case 13:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(31, 33);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(34, 37);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 18 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000000000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_8(0x100000000000L);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffdfffffffffL & l) != 0L)
                  {
                     if (kind > 45)
                        kind = 45;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffdfffffffffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_11(0x2000000000000000L);
      case 61:
         return jjStopAtPos(0, 62);
      case 62:
         return jjStopAtPos(0, 59);
      default :
         return jjMoveNfa_11(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_11(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      default :
         break;
   }
   return jjStartNfa_11(0, active0);
}
private final int jjMoveNfa_11(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(3);
                  else if (curChar == 36)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 63)
                     jjCheckNAdd(3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 21;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 62)
                     kind = 60;
                  break;
               case 4:
                  if (curChar == 63)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if (curChar == 33)
                     jjCheckNAdd(3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_15()
{
   return jjMoveNfa_15(1, 0);
}
private final int jjMoveNfa_15(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 20;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_1(9, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0xffffffe3ffffffffL & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                     jjCheckNAddStates(2, 4);
                  }
                  else if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 36);
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 8);
                  break;
               case 5:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddStates(5, 8);
                  break;
               case 11:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 13:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 12);
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 12);
                  break;
               case 19:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 20:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0xffffffdfffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 22:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 24:
                  if (curChar == 62 && kind > 68)
                     kind = 68;
                  break;
               case 25:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xffffffe3ffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               case 29:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAdd(32);
                  break;
               case 34:
                  if (curChar == 36)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x1800000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 36);
                  break;
               case 36:
                  if (curChar == 34 && kind > 74)
                     kind = 74;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  if (curChar == 92)
                     jjAddStates(16, 17);
                  break;
               case 0:
                  if (curChar == 123)
                     jjCheckNAddStates(5, 8);
                  break;
               case 1:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 3:
                  jjAddStates(18, 19);
                  break;
               case 6:
                  jjAddStates(20, 21);
                  break;
               case 8:
                  if (curChar == 125 && kind > 66)
                     kind = 66;
                  break;
               case 10:
                  if (curChar == 123)
                     jjCheckNAddStates(9, 12);
                  break;
               case 11:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 13:
                  jjAddStates(22, 23);
                  break;
               case 16:
                  jjAddStates(24, 25);
                  break;
               case 18:
                  if (curChar == 125 && kind > 67)
                     kind = 67;
                  break;
               case 21:
               case 23:
                  jjCheckNAddStates(13, 15);
                  break;
               case 28:
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               case 30:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               case 31:
                  if (curChar == 92)
                     jjAddStates(16, 17);
                  break;
               case 32:
                  if (curChar != 123)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 28:
               case 30:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddStates(2, 4);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 8);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 12);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 21:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 52);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_5(0x4000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_5(0x8000000000000L);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_5(active0, 0x4000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_5(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private final int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_5(active0, 0x4000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_5(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
private final int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_5(active0, 0x4000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_5(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0);
}
private final int jjMoveStringLiteralDfa4_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_5(active0, 0x8000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_5(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0);
}
private final int jjMoveStringLiteralDfa5_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(5, 50);
         break;
      case 77:
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(5, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_5(4, active0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 53)
                     kind = 53;
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 53)
                     kind = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(42, 43);
                  break;
               case 5:
                  jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000L) != 0L)
            return 2;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_10(0x10000000000L);
      default :
         return jjMoveNfa_10(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      default :
         break;
   }
   return jjStartNfa_10(0, active0);
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffdfffffffffL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffdfffffffffL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 0:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_14(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_14(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa1_14(0x8000000000L);
      case 61:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_14(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_14(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_14(0, active0);
}
private final int jjMoveNfa_14(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 36)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x7ff601000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  jjAddStates(38, 39);
                  break;
               case 7:
                  jjAddStates(40, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(40, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 4, 28, 29, 31, 1, 2, 5, 8, 11, 12, 15, 18, 21, 22, 25, 
   33, 34, 3, 4, 6, 7, 13, 14, 16, 17, 0, 1, 2, 3, 7, 11, 
   12, 14, 2, 3, 6, 9, 4, 5, 7, 8, 2, 3, 5, 6, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\74", "\74\57", 
"\74\41\55\55", "\74\77", null, null, "\74\45\55\55", "\74\45\41", "\74\45\75", "\74\45", 
"\74\45\100", null, null, null, null, "\75", null, "\45\76", "\45\76", null, "\45\76", null, 
"\45\76", null, "\55\55\45\76", null, null, null, null, null, "\76", null, null, 
"\135\135\76", null, null, null, "\76", null, "\57\76", "\75", null, "\47", "\42", null, null, 
null, "\47", null, null, "\42", null, null, null, null, };
public static final String[] lexStateNames = {
   "CommentState", 
   "AttrValueBetweenDoubleQuotesState", 
   "AttrValueBetweenSingleQuotesState", 
   "StartTagState", 
   "CDataState", 
   "DocTypeExternalIdState", 
   "DocTypeState", 
   "JspCommentState", 
   "JspDeclarationState", 
   "JspExpressionState", 
   "JspScriptletState", 
   "InTagState", 
   "AfterTagState", 
   "AttrValueState", 
   "JspDirectiveAttributesState", 
   "JspDirectiveState", 
   "DEFAULT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 0, 
   3, 6, 4, 7, 8, 9, 10, 15, -1, -1, 14, -1, -1, -1, 12, 12, -1, 12, -1, 12, -1, 12, -1, -1, 5, 
   -1, -1, 12, -1, -1, 12, 11, 16, -1, 12, 12, 12, 13, -1, 2, 1, -1, -1, -1, 11, -1, 11, 11, -1, 11, 
   12, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffc00001L, 0x1fffL, 
};
static final long[] jjtoSkip = {
   0x300000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x200000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
protected char curChar;
public JspParserTokenManager(CharStream stream){
   input_stream = stream;
}
public JspParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 17 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 16;
int defaultLexState = 16;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 76)
       {
          jjmatchedKind = 76;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 57)
       {
          jjmatchedKind = 57;
       }
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       if (jjmatchedPos == 0 && jjmatchedKind > 54)
       {
          jjmatchedKind = 54;
       }
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       if (jjmatchedPos == 0 && jjmatchedKind > 63)
       {
          jjmatchedKind = 63;
       }
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
