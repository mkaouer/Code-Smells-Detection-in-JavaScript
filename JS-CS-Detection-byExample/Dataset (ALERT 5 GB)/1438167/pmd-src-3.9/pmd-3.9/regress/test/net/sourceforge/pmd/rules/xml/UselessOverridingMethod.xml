<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
call super
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public void foo() {
    super.foo();
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with same argument
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public void foo(String bar) {
    super.foo(bar);
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with different argument
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
String text = "text";
public void foo(String bar) {
    super.foo(text);
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with different argument 2
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public void foo(String bar) {
    super.foo(boe(bar));
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with different argument 3
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Buz{
 public String foo(String bar) {
    super.foo("" + bar); 
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with inverted arguments
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public void foo(String bar, String stool) {
    super.foo(stool, bar);
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
return value of super
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public String foo() {
    return super.foo();
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
return value of super with argument
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public String foo(String bar) {
    return super.foo(bar);
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
return value of super after adding a string
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public String foo(String bar) {
    return super.foo(bar) + "is foo";
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
do not crash on abstract methods
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public abstract String foo();
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
do not crash on interfaces
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public interface Foo extends Bar {
public String foo();
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
do not crash on empty returns
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
public void foo(String bar) {
    return;
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
do not crash on super
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
public void init(String[] args) {
    super.init( args, Application.NO_MODULES );
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
call super with different argument 4
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Buz{
 public String foo(Object bar) {
    super.foo(this); 
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
adding final is OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public final String foo() {
    return super.foo();
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
adding synchronized is OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public synchronized String foo() {
    return super.foo();
}
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
Constructors are OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo extends Bar {
public Foo(String bar) {
    super(bar);
}
}
     ]]></code>
    </test-code>
</test-data>
