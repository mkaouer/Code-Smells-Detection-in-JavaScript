<?xml version="1.0"?>
<document>
<properties>
    <author email="mikkey@users.sourceforge.net">Miguel Griffa</author>
    <title>XPath Rule tutorial</title>
</properties>
<body>
    <section name="XPath Rule tutorial">
<p>
Writing PMD rules with XPath can be a bit easier than writing rules with Java code.
    Here's an introduction on how to do that.
</p>
    <subsection name="Introduction">
    <p>PMD provides a very handy method for writing rules by writing an XPath query.
 When the XPath query finds a match, a violation is added to the report. This document
 focuses on XPath rules.  You can go <a href="howtowritearule.html">here</a> for more
 information about writing a rule.
    </p>
    </subsection>
    <subsection name="What is the Abstract Syntax Tree (AST)?">
    <p>From <a href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?abstract+syntax+tree">FOLDOC</a> an AST is 'A data structure
    representing something which has been parsed, often used as
    a compiler or interpreter's internal representation of a
    program while it is being optimised and from which code
    generation is performed'.</p>
    <p>
    	In our context, this means that we basically have a tree representation
    	of the Java source file.  This tree can viewed as a structured document - just like XML.
        And since it's conceptually similar to XML, it can be queried with XPath to find a pattern.
    </p>
    </subsection>

    <section name="Using Designer">
    <p> PMD comes with a handy tool that you will love if you want to write an XPath rule.
    Designer, runnable from a script in <code>bin/</code>, is a very simple and useful utility for writing rules.
    </p>
    <p>The basic steps involved in writing XPath rules are these:
    	<ol>
		    <li>Write a simple Java example source snippet in Designer</li>
		    <li>See the AST for the class you wrote</li>
		    <li>Write an XPath expression that matches the violation you are searching</li>
		    <li>Modify the Java class and go back to previous step to refine the XPath expression</li>
	    </ol>
    </p>

    </section>
    </section>

    <section name="Simple XPath expressions">
    <p>This section provides hands-on examples of XPath queries over the AST.
    You will probably find this section more useful if you follow it with
    Designer and copy/paste the examples.</p>
    <p>Copy the following Java source code to Designer:</p>
    <source>
<![CDATA[public class a {
	int fOne;
	int fTwo;

	private void run() {
		int one;
		int two;
	}
}]]>
    </source>
        <p>Let's assume you want to match something on class variable names. You
	see in the ASTVviewer that VariableDeclaratorId contains the variable name - in XML terms,
    the name is in the <code>@Image</code> attribute. So you try an
	XPath expression as follows: </p>
	<source>//VariableDeclaratorId</source>
	<p>If you try this expression you'll see that variables declared in
	methods are also matched. A more precise expression for matching field
	declarations is, well, using the FieldDeclaration node. This expression
	matches only the two fields declared in the class:</p>
	<source>//FieldDeclaration</source>
	<p>In a similar way, you can match only local variables with this
	expression</p>
	<source>//LocalVariableDeclaration</source>
	<p>With local variables we need to be more careful.  Consider the
	following class:</p>
	<source><![CDATA[public class a {
	private void run() {
		final int one;
		int two;

		{
			int a;
		}
	}
}]]></source>
	<p>Local variable declarations will match 'a', since it is a perfectly
	legal Java local variable. Now, a more interesting expression is
	to match variables declared in a method, and not on an internal block,
	nor in the class. Maybe you'll start with an expression like this:</p>
	<source>//MethodDeclaration//LocalVariableDeclaration</source>
	<p>You'll quickly see that all three local variables are matched.  A possible
	solution for this is to request that the parent of the local variable
	declaration is the MethodDeclaration node:</p>
	<source>
        <![CDATA[
    //LocalVariableDeclaration[name(../../..) = 'MethodDeclaration']
 ]]>
    </source>
	<subsection name="Matching variables by name">
	<p>Let's consider that we are writing rules for logger. Let's assume we
	use the Java logging API and we want to find all classes that have more
	than one logger. The following expression returns all variable declarations
	whose type is 'Logger'. </p>
	<source><![CDATA[//VariableDeclarator[../Type/ReferenceType/ClassOrInterfaceType[@Image='Log
ger']]]]></source>
	<p>Finding a class with more than one logger is quite easy now. This
	expression matches the classes we are looking for.</p>
	<source><![CDATA[TypeDeclaration[count(//VariableDeclarator[../Type/ReferenceType/ClassOrInt
erfaceType[@Image='Logger']])>1]]]></source>
	<p>But let's refine this expression a little bit more. Consider the
	following class:</p>
	<source><![CDATA[public class a {
	Logger log = null;
	Logger log = null;
	int b;

	void myMethod() {
		Logger log = null;
		int a;
	}
	class c {
		Logger a;
		Logger a;
	}

}
]]></source>
	<p>With this class we will only be matching one violation, when we
	probably would have wanted to produce two violations (one for each class).
	The following refined expression matches classes that contain more than one logger.</p>
	<source><![CDATA[//ClassOrInterfaceBodyDeclaration[count(//VariableDeclarator[../Type/ReferenceType/ClassOrInterfaceType[@Image='Logger']])>1]]]></source>
	<p>Let's assume we have a Factory class, that could be always declared final.
	We'll search an xpath expression that matches all declarations of Factory
	and reports a violation if it is not declared final.
	Consider the following class:</p>
	<source><![CDATA[public class a {
	Factory f1;

	void myMethod() {
		Factory f2;
		int a;
	}
}
]]></source>
	<p>The following expression does the magic we need:</p>
	<source><![CDATA[
//VariableDeclarator
 [../Type/ReferenceType/ClassOrInterfaceType
  [@Image = 'Factory'] and ..[@Final='false']]
 ]]>
    </source>
	<p>I must recommend at this point that you experiment with Designer putting
	the final modifier to the Factory and verifying that the results produced
	are those expected.</p>

     <p>Finally, for many more details on writing XPath rules, pick up <a href="http://pmdapplied.com/">PMD Applied</a>!</p>
	</subsection>


   </section>

</body>
</document>
