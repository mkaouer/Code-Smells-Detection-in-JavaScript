<?xml version="1.0"?>

<ruleset name="Code Size Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

  <description>
The Code Size Ruleset contains a collection of rules that find code size related problems.
  </description>

<rule name="NPathComplexity"
      since="3.9"
      message="The method {0}() has an NPath complexity of {1}"
      class="net.sourceforge.pmd.rules.design.NpathComplexity"
      externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#NPathComplexity">
   <description>
   The NPath complexity of a method is the number of acyclic execution paths through that method.
   A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.
   </description>
     <priority>3</priority>
   <properties>
    <property name="minimum" description="The npath reporting threshold" value="200"/>
   </properties>
    <example>
 <![CDATA[
 public class Foo {
  void bar() {
   // lots of complicated code
  }
 }
 ]]>
    </example>
</rule>

 <rule name="ExcessiveMethodLength"
 		 since="0.6"
       message="Avoid really long methods."
       class="net.sourceforge.pmd.rules.design.LongMethodRule"
       externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveMethodLength">
   <description>
Violations of this rule usually indicate that the method is doing
too much.  Try to reduce the method size by creating helper methods and removing any copy/pasted code.
   </description>
     <priority>3</priority>
   <properties>
    <property name="minimum" description="The method size reporting threshold" value="100"/>
   </properties>
   <example>
<![CDATA[
public class Foo {
 public void doSomething() {
  System.out.println("Hello world!");
  System.out.println("Hello world!");
  // 98 copies omitted for brevity.
 }
}
]]>
   </example>

 </rule>


 <rule name="ExcessiveParameterList"
 		 since="0.9"
       message="Avoid really long parameter lists."
       class="net.sourceforge.pmd.rules.design.LongParameterListRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveParameterList">
   <description>
Long parameter lists can indicate that a new object should be created to
 wrap the numerous parameters.  Basically, try to group the parameters together.
   </description>
     <priority>3</priority>
   <properties>
    <property name="minimum" description="The parameter count reporting threshold" value="10"/>
   </properties>
   <example>
<![CDATA[
public class Foo {
 public void addData(
  int p0, int p1, int p2, int p3, int p4, int p5,
  int p5, int p6, int p7, int p8, int p9, int p10) {
  }
 }
}
]]>
   </example>

 </rule>


 <rule name="ExcessiveClassLength"
 		 since="0.6"
       message="Avoid really long classes."
       class="net.sourceforge.pmd.rules.design.LongClassRule"
          externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessiveClassLength">
   <description>
Long Class files are indications that the class may be trying to
do too much.  Try to break it down, and reduce the size to something
manageable.
   </description>
     <priority>3</priority>
       <properties>
        <property name="minimum" description="The class size reporting threshold"  value="1000"/>
       </properties>
   <example>
<![CDATA[
public class Foo {
  public void bar() {
    // 1000 lines of code
  }
}
]]>
   </example>
 </rule>


    <rule 	name="CyclomaticComplexity"
    			since="1.03"
      		message = "The {0} ''{1}'' has a Cyclomatic Complexity of {2}."
	      	class="net.sourceforge.pmd.rules.CyclomaticComplexity"
	      	externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#CyclomaticComplexity">
   <description>
   		<![CDATA[
Complexity is determined by the number of decision points in a method plus one for the
method entry.  The decision points are 'if', 'while', 'for', and 'case labels'.  Generally,
1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
 and 11+ is very high complexity.
		]]>
   </description>
   <priority>3</priority>
   <properties>
      <property name="reportLevel" description="The Cyclomatic Complexity reporting threshold"  value="10"/>
      <property name="showClassesComplexity"
      			description="Indicate if class average violation should be added to the report"
      			value="true"/>
      <property name="showMethodsComplexity"
      			description="Indicate if class average violation should be added to the report"
      			value="true"/>

   </properties>
   <example>
<![CDATA[
// Cyclomatic Complexity = 12
public class Foo {
1   public void example()  {
2       if (a == b)  {
3           if (a1 == b1) {
                fiddle();
4           } else if a2 == b2) {
                fiddle();
            }  else {
                fiddle();
            }
5       } else if (c == d) {
6           while (c == d) {
                fiddle();
            }
7        } else if (e == f) {
8           for (int n = 0; n < h; n++) {
                fiddle();
            }
        } else{
            switch (z) {
9               case 1:
                    fiddle();
                    break;
10              case 2:
                    fiddle();
                    break;
11              case 3:
                    fiddle();
                    break;
12              default:
                    fiddle();
                    break;
            }
        }
    }
}
]]>
   </example>
</rule>

    <rule name="ExcessivePublicCount"
    since="1.04"
    message="This class has a bunch of public methods and attributes"
    class="net.sourceforge.pmd.rules.ExcessivePublicCount"
          externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#ExcessivePublicCount">
    <description>
A large number of public methods and attributes declared in a class can indicate the
 class may need to be broken up as increased effort will be required to thoroughly test it.
    </description>
    <priority>3</priority>
    <properties>
    <property name="minimum"  description="The public item reporting threshold" value="45"/>
    </properties>
    <example>
    <![CDATA[
public class Foo {
 public String value;
 public Bar something;
 public Variable var;
 // [... more more public attributes ...]
 public void doWork() {}
 public void doMoreWork() {}
 public void doWorkAgain() {}
 // [... more more public methods ...]
}
    ]]>
    </example>
    </rule>

    <rule name="TooManyFields"
    		 since="3.0"
          message="Too many fields"
          class="net.sourceforge.pmd.rules.design.TooManyFields"
          externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#TooManyFields">
      <description>
Classes that have too many fields could be redesigned to have fewer fields, possibly
 through some nested object grouping of some of the information.  For example, a class with
 city/state/zip fields could instead have one Address field.
      </description>
        <priority>3</priority>
      <properties>
       <property name="maxfields"  description="The field count reporting threshold " value="15"/>
      </properties>
      <example>
   <![CDATA[
public class Person {
   String one;
   int two;
   int three;
   [... many more public fields ...]
}
   ]]>
      </example>
    </rule>

<rule name="NcssMethodCount" message="The method {0}() has an NCSS line count of {1}"
   since="3.9"
   class="net.sourceforge.pmd.rules.codesize.NcssMethodCount"
   externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#NcssMethodCount">
    <description>
This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines
of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
    <properties>
        <property name="minimum" description="The method NCSS count reporting threshold" value="100"/>
    </properties>
   <example>
<![CDATA[
public class Foo extends Bar {
 public int methd() {
     super.methd();





 //this method only has 1 NCSS lines
      return 1;
 }
}
]]>
   </example>
   </rule>

<rule name="NcssTypeCount" message="The type has an NCSS line count of {0}"
   since="3.9"
   class="net.sourceforge.pmd.rules.codesize.NcssTypeCount"
   externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#NcssTypeCount">
    <description>
This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines
of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
    <properties>
        <property name="minimum" description="The type NCSS count reporting threshold" value="1500"/>
    </properties>
   <example>
<![CDATA[
public class Foo extends Bar {
 public Foo() {
 //this class only has 6 NCSS lines
     super();





      super.foo();
 }
}
]]>
   </example></rule>

<rule name="NcssConstructorCount" message="The constructor with {0} parameters has an NCSS line count of {1}"
   since="3.9"
   class="net.sourceforge.pmd.rules.codesize.NcssConstructorCount"
   externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#NcssConstructorCount">
    <description>
This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines
of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,
lines of code that are split are counted as one.
    </description>
    <priority>3</priority>
    <properties>
        <property name="minimum" description="The constructor NCSS count reporting threshold" value="100"/>
    </properties>
   <example>
<![CDATA[
public class Foo extends Bar {
 public Foo() {
     super();





 //this constructor only has 1 NCSS lines
      super.foo();
 }
}
]]>
   </example>
</rule>

    <rule
        name="TooManyMethods"
        since="4.2"
        class="net.sourceforge.pmd.rules.XPathRule"
        message="This class has too many methods, consider refactoring it."
        externalInfoUrl="http://pmd.sourceforge.net/rules/codesize.html#TooManyMethods">
        <description>
            <![CDATA[
A class with too many methods is probably a good target for refactoring, in
order to reduce its complexity and find a way to have more fine grained objects.
            ]]>
        </description>
        <priority>3</priority>
        <properties>
                <property name="maxmethods"  description="The method count reporting threshold " value="10"/>
                <property name="xpath">
                <value>
                    <!--  FIXME: Refine XPath to discard 'get' and 'set' methods with Block no more than 3 lines,
                                something like this:
                                    not (
                                            (
                                                starts-with(@Image,'get')
                                                or
                                                starts-with(@Image,'set')
                                                or
                                                starts-with(@Image,'is')
                                            )
                                            and (
                                                    (
                                                        (../Block/attribute::endLine)
                                                         -
                                                        (../Block/attribute::beginLine)
                                                    ) <= 3
                                            )
                                        )
                                This will avoid discarding 'real' method...
                     -->
                    <![CDATA[
                     //ClassOrInterfaceDeclaration/ClassOrInterfaceBody
                    [
                        count(descendant::MethodDeclarator[
                        not (
                            starts-with(@Image,'get')
                            or
                            starts-with(@Image,'set')
                            or
                            starts-with(@Image,'is')
                        )
                        ]) > $maxmethods
                    ]
                    ]]>
                </value>
            </property>
        </properties>
    </rule>
</ruleset>
