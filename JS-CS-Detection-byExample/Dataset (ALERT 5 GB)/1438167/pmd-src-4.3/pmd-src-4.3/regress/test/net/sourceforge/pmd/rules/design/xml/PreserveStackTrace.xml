<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
1, Exception thrown without preserving stack
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw new Exception(e.getMessage());
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
2, Exception thrown, stack preserved
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw new Exception(e);
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
3, Exception thrown, stack preserved
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw new Exception(e, e.getMessage());
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
4, No exception thrown, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw e.fillInStackTrace();
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
5, No exception thrown, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
6, No exception thrown, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            e.printStackTrace();
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
7, No exception thrown, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw new Exception(Bar.foo(e),e);
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
8, No exception thrown, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw (Error)e;
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
9, Excetion is cast, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            throw (Error)e.fillInStackTrace();
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
10, Throwing new Exception, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e10){
            Exception e1 = new Exception(e10);
            throw e1;
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
11, Throwing new Exception, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo(String a) {
        try {
            int i = Integer.parseInt(a);
        } catch(Exception e){
            Exception e1 = (Exception)e.fillInStackTrace();
            throw e1;
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
12, Catch and throw RuntimeException
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class B {
    public void bla() {
        try {
            ;
        } catch (IllegalStateException e) {
            throw new RuntimeException(e);
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
13, Catch and throw RuntimeException, fail
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class B {
    public void bla() {
        try {
            ;
        } catch (IllegalStateException e) {
            throw new RuntimeException();
        }
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
14, Nested with same name catch and throw, fail on inner
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class B {
    public void bla() {
        try {
            try {
                ;
            } catch (IllegalStateException ex) {
                throw new RuntimeException("Oh no!");
            }
        } catch (IllegalStateException ex) {
            throw new RuntimeException(ex);
        }
    }
}
     ]]></code>
    </test-code>

	<test-code>
        <description><![CDATA[
15, IllegalStateException does not have any constructor which takes original exception.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        try {
			;
        } catch (Exception excep) {
			throw new IllegalStateException();
	}

    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description><![CDATA[
16, False -, No violations reported by PreserveStackTrace Rule
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        try {
			;
        } catch (Exception notUsed) {
			RuntimeException ex = new RuntimeException();
			throw ex;
		}
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description><![CDATA[
17, PreserveStackTrace Rule should exclude this as initCause is used.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        try {
			;
        } catch (Exception e) {
			IllegalStateException ex = new IllegalStateException();
			ex.initCause(e);
			throw ex;
		}
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description><![CDATA[
18, side effects on rules
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar1() {
        try {
			;
        } catch (Exception notUsed) {
			RuntimeException ex = new RuntimeException();
			throw ex;
		}
    }

    public void bar2() {
        try {
			;
        } catch (Exception e) {
			IllegalStateException ex = new IllegalStateException();
			ex.initCause(e);
			throw ex;
		}
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description><![CDATA[
19, False positive
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

    private static boolean isInstanceOf(final MBeanServer mbs,
                                        final ObjectName name,
                                        final String className) {
        PrivilegedExceptionAction<Boolean> act =
            new PrivilegedExceptionAction<Boolean>() {
                public Boolean run() throws InstanceNotFoundException {
                    return mbs.isInstanceOf(name, className);
                }
            };
        try {
            return AccessController.doPrivileged(act);
        } catch (Exception e) {
            logger.fine("isInstanceOf", "failed: " + e);
            logger.debug("isInstanceOf", e);
            return false;
        }
    }
}
     ]]></code>
    </test-code>

    <test-code>
        <description><![CDATA[
20, False positive
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {

 private CodeException[] getCodeExceptions() {
    int             size  = exception_vec.size();
    CodeException[] c_exc = new CodeException[size];

    try {
      for(int i=0; i < size; i++) {
        CodeExceptionGen c = (CodeExceptionGen)exception_vec.get(i);
        c_exc[i] = c.getCodeException(cp);
      }
    } catch(ArrayIndexOutOfBoundsException e) {}

    return c_exc;
  }
}
     ]]></code>
    </test-code>
    
    <test-code>
        <description><![CDATA[
21, Java 7's multi-catch, NOK
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
class MultiCatch {

  public static void main(String[] args) {
    try {
      Class.forName("org.example.Foo").newInstance();
    } catch (InstantiationException | ClassNotFoundException | IllegalAccessException eMultiCatch) {
      throw new UnsupportedOperationException(args[0]);
    }
  }

}
     ]]></code>
    </test-code>
    
    <test-code>
        <description><![CDATA[
22, Java 7's multi-catch, OK
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
class MultiCatch {

  public static void main(String[] args) {
    try {
      Class.forName("org.example.Foo").newInstance();
    } catch (InstantiationException | ClassNotFoundException | IllegalAccessException eMultiCatch) {
      throw new UnsupportedOperationException(eMultiCatch);
    }
  }

}
     ]]></code>
    </test-code>

</test-data>