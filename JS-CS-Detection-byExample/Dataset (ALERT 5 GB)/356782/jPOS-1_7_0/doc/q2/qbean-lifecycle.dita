<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="q2-qbean-lifecycle">
  <title>QBean Life cycle</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>QBean Life cycle</indexterm>
      </keywords>
      <keywords>
        <indexterm>Life cycle</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>
      <b>Q2</b> provides a very simple life cycle to the <b>QBeans</b>, it basically calls four
      methods: </p>
    <ul>
      <li>
        <tt>init</tt>
      </li>
      <li>
        <tt>start</tt>
      </li>
      <li>
        <tt>stop</tt>
      </li>
      <li>
        <tt>destroy</tt>
      </li>
    </ul>
    <p>Writing a QBean is as easy as implementing the <xref
        href="http://www.jpos.org/doc/javadoc/org/jpos/q2/QBean.html"
        ><tt>org.jpos.q2.QBean</tt></xref> interface which in addition to the aforementioned life
      cycle operations has a couple of additional <codeblock> int getState(); String
        getStateAsString(); </codeblock> methods required for housekeeping and JMX-based monitoring. </p>
    <section>
      <title>A Minimal QBean implementation</title>
      <note type="attention"> Actually a minimal QBean implementation that <b>DOESN'T WORK</b>,
        please keep reading, there's a minor final tweak.</note>
      <codeblock outputclass="java"><![CDATA[

package org.jpos.q2.qbean;

import org.jpos.q2.QBean;

public class Test implements QBean {
    int state;
    public void init () throws Exception {
       state = QBean.STARTING;
       System.out.println ("init");
    }
    public void start () throws Exception {
        state = QBean.STARTED;
        System.out.println ("start");
    }

    public void stop () throws Exception {
        state = QBean.STOPPING;
        System.out.println ("stop");
    }

    public void destroy () throws Exception {
        state = QBean.STOPPED;
        System.out.println ("destroy");
    }
    public int getState () {
        return state;
    }
    public String getStateAsString () {
        return state >= 0 ? stateString[state] : "Unknown";
    }
}
]]></codeblock>

      <p>In order to deploy our Test QBean, 
        we need to place an XML descriptor, which is
        just a simple XML file in the <tt>deploy</tt>
        directory (i.e.: <tt>10_test.xml</tt>)</p>

      <codeblock outputclass="xml"><![CDATA[
        
        <qbean name="" class="org.jpos.q2.qbean.Test" />
        
        ]]></codeblock>

      <p> When <b>Q2</b> detects the new XML descriptor, it attempts to instantiate the service, and
        this is what you'll see (several errors). </p>
      <note type="note"> We believe that showing you these errors is good so you understand how JMX
        gets into play. </note>
      <p> First, we'll see that Q2 is trying to deploy your new QBean: </p>

      <codeblock outputclass="xml"><![CDATA[
<log realm="Q2.system" at="Sun Nov 15 19:17:06 UYST 2009.73">
  <info>
    deploy:/opt/jpos/build/deploy/10_test.xml
  </info>
</log>
        ]]></codeblock>

      <p>
        Then a noisy error will basically tell us that:
      </p>
      <note type="attention">
        Class <tt>org.jpos.q2.qbean.Test</tt> 
        is <b>not a JMX compliant MBean</b>        
      </note>
      <p>The full message looks like this:</p>
      <codeblock outputclass="xml"><![CDATA[
<log realm="Q2.system" at="Sun Nov 15 19:17:06 UYST 2009.77">
  <warn>
    deploy
    <exception name="MBean class org.jpos.q2.qbean.Test does not implement DynamicMBean,
    neither follows the Standard MBean conventions
    ...
    ...
    ...
    </exception>
  </warn>
</log>
]]></codeblock>
      
      <p>
        Then we'll see something useful, when <b>Q2</b> detects a problem with
        a descriptor, it renames it either to a file name ending in <tt>.BAD</tt>,
        or a file name ending in <tt>.DUP</tt> if the problem is related to 
        a duplicate QBean name.  
      </p>
      <codeblock outputclass="xml"><![CDATA[
<log realm="Q2.system" at="Sun Nov 15 19:17:06 UYST 2009.83">
  <warn>
    Tidying /opt/jpos/deploy/10_test.xml out of the way, by adding .BAD
    It will be called: /opt/jpos/deploy/10_test.xml.BAD see log above 
    for detail of problem.
  </warn>
</log>
]]></codeblock>      
    </section>
    <section>
      <title>Fixing the problem with the minimal QBean implementation</title>
      <b>QBeans</b> are also JMX <b>MBeans</b>, so in addition to implementing
      <tt>org.jpos.q2.QBean</tt>, our <tt>org.jpos.q2.qbean.Test</tt> class has
      to implement an interface called <tt>org.jpos.q2.qbean.TestMBean</tt> which
      in turn has to extend <tt>org.jpos.q2.QBean</tt>.
      
      <p>
        So our <tt>org.jpos.q2.qbean.TestMBean</tt> will look like this:
      </p>
      
      <codeblock outputclass="java"><![CDATA[
        
package org.jpos.q2.qbean;

import org.jpos.q2.QBean;

public interface TestMBean extends QBean { }    
     
     ]]></codeblock>
      
      <p>
        and our <tt>org.jpos.q2.qbean.Test</tt> class, instead of implementing <tt>QBean</tt>, 
        it will implement our <tt>TestMBean</tt>. The definition will look like this:
      </p>
      <codeblock outputclass="java"><![CDATA[
        
package org.jpos.q2.qbean;
import org.jpos.q2.QBean;
public class Test implements TestMBean {
   ...
   ...
}     
]]></codeblock>
      
      <p> The reason for the previous requirement is that Q2 instantiates QBean implementations
        using the JMX MBeanServer, and it calls the life cycle operations <tt>init</tt>, <tt>start</tt>,
        <tt>stop</tt> and <tt>destroy</tt> <b>via JMX</b>.
        </p>
    </section>

  </conbody>
</concept>
