$Id$

A typical ISO-8583 interchange sends multiple requests over the
wire and waits for responses that may come in any order.

ISOMUX matches responses with their original requests,
usually associated with different Threads (see ISORequest)

On the other side, a two way interchange have to handle requests 
sent by 'the other end' that do not match against any previously 
sent request. Those requests are sent to an ISORequestListener 
implementation associated with ISOMUX that may in turn forward them
to other ISOChannels, ISOMUXes or custom programs.

ISOMUX associate a response to a request by means of its getKey()
method. The default getKey() implementation uses the concatenation
of fields 41 (Terminal ID - if present) plus field 11 (TraceNumber)
but it is very easy to override getKey() to meet your needs,
as in the following example:

    //
    // use Retrieval Reference Number [field 37] as Key
    //
    ISOMUX mux = new ISOMUX {
	public String getKey(ISOMsg m) {
	    return (String) m.getValue (37);
	}
    };

simplemux example
-----------------

   simpleclient---------> simplemux ------> simpleserver -testmux
   simpleclient--------/      ^
   simpleclient-------/       |
   simpleclient------/        |
   simpleclient-----/         +-----------> [ ISORequestListener ]

ISOMUX can be demonstrated within a single JVM, modifying simpleclient
to generate multiple requests from different Threads; instead of doing
so in an almost useless example we'll construct an application that
may be used almost out-of-the-box in many situations.

simplemux will connect to a simpleserver instance by means of a
single ISOChannel and will listen for incoming connections from
simpleclient(s) (the same way as current simpleserver).

For demonstration purposes we will use ThreadPool for client
connections as well as ISORequestListener's short-lived Threads;

When simpleserver is started with switch '-testmux' it will
originate 0800s messages (every time it receives one). 
These messages that doesn't match any previously sent request 
are handled by ISORequestListener. In our example ISORequestListener
will just send back a dummy reply, in a real life application
it would forward message to another ISOChannel, ISOMUX or
any given program.

HOW TO RUN:
----------
1) run example.sh(bat) simpleserver -testmux
2) run example.sh(bat) simplemux (it will connect to simpleserver)
3) run example.sh(bat) simpleclient -testmux [n]
   (you can run many instance of 'simpleclient -testmux', 'n' can be
    any number, for example 100)

If everything goes fine ISOMUX will forward simpleclient requests to
simpleserver and sends back the responses. If you start simpleserver
with '-testmux' argument, DummyRequestListener will get called and
you'll see a log event like this:

  <dummy-request-listener>
    <isomsg direction="incoming">
      <field id="0" value="0800"/>
      <field id="3" value="000000"/>
      <field id="7" value="0322091358"/>
      <field id="11" value="238349"/>
      <field id="12" value="091358"/>
      <field id="13" value="0322"/>
      <field id="39" value="00"/>
    </isomsg>
  </dummy-request-listener>

In a real life application DummyRequestListener would have to process
the request and use ISOMUX's send method (instead of queue) to provide
a response back to the originating host.


