/*
 * Copyright 1999-2004 Carnegie Mellon University.
 * Portions Copyright 2004 Sun Microsystems, Inc.
 * Portions Copyright 2004 Mitsubishi Electric Research Laboratories.
 * All Rights Reserved.  Use is subject to license terms.
 *
 * See the file "license.terms" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *
 */

package edu.cmu.sphinx.jsgf.test;

import edu.cmu.sphinx.jsapi.JSGFGrammar;
import edu.cmu.sphinx.util.props.ConfigurationManager;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import javax.speech.recognition.RuleGrammar;
import javax.speech.recognition.RuleParse;
import javax.speech.recognition.GrammarException;

import junit.framework.Assert;
import org.junit.Test;

/**
 * A test program for JSGF grammars. This program will generate a number of
 * random sentences from a JSGF grammar and attempt to validate them via a rule
 * parse. A count of valid and invalid sentences is reported after the run.
 * 
 * This test will detect and reports only certain grammar failures. It will
 * detect when a JSGFGrammar generates invalid sentences. It will not detect the
 * case where a valid sentence can never be generated by the JSGFGrammar.
 * 
 * Note that there is a bug in the Rule Grammar parse where rules with nested
 * recursion cause a stack overflow error.
 * 
 */
public class JSGFTest {

    @Test
    public void testParser() throws IOException, GrammarException {
        ConfigurationManager cm = new ConfigurationManager(
                "src/test/edu/cmu/sphinx/jsgf/test/jsgftest.config.xml");

        JSGFGrammar jsgfGrammar = (JSGFGrammar) cm.lookup("jsgfGrammar");

        jsgfGrammar.allocate();

        RuleGrammar grammar = jsgfGrammar.getRuleGrammar();
        Scanner scanner = new Scanner (new File ("src/test/edu/cmu/sphinx/jsgf/test/input.txt"));
        scanner.useDelimiter("\n");
        while (scanner.hasNext()) {
            String sentence = scanner.next();
            RuleParse rp = grammar.parse(sentence, null);
            Assert.assertNotNull(rp);
        }
    }
}
