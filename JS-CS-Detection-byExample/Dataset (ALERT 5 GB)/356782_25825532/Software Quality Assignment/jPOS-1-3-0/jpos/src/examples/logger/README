$Id$

This logger example demonstrate the use of jPOS's Logger subsytem.

There's a Logger object where you attach listeners. You can choose
from various available LogListeners such as:

   SimpleLogListener   (dumps all events to the specified output stream)
   RotateLogListener   (writes to disk, rotating logs at given intervals)
   OperatorLogListener (e-mails specific tags to a predefined address))

LogEvent is a container for various log object that you can add 
(via its addMessage method). It has built in support for
Throwables and SQLException.

If the object being added implements Loggeable interface, its
dump() method will get called instead of Object.toString(). This
allow for well formated, easily parseable Log files.
(many jPOS classes such as ISOMsg implements org.jpos.util.Loggeable)

This Test.java extends SimpleLogProducer and Implements Loggeable;

You don't have to do so on every class, you may want to have just
a couple of LogProducers (possibly for different realms) whithin
your application and have some classes implements Loggeable.

The "realm" thing allows LogListeners (or logfiles post-parsers) 
to filter LogEvents.

